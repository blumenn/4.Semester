
4.Semester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004a2  00800200  000064c0  00006554  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000064c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000101c  008006a2  008006a2  000069f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000069f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009f0  00000000  00000000  00006a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d00f  00000000  00000000  00007484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032ae  00000000  00000000  00014493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000666d  00000000  00000000  00017741  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000024d0  00000000  00000000  0001ddb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000040d6  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c117  00000000  00000000  00024356  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009c0  00000000  00000000  0003046d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	26 c1       	rjmp	.+588    	; 0x24e <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c1       	rjmp	.+614    	; 0x290 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	1d c4       	rjmp	.+2106   	; 0x86c <__vector_12>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cd 1a 	jmp	0x359a	; 0x359a <__vector_21>
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	19 c1       	rjmp	.+562    	; 0x290 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__vector_24>
      64:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__vector_25>
      68:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__vector_26>
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__vector_36>
      94:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__vector_37>
      98:	fb c0       	rjmp	.+502    	; 0x290 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 df 28 	jmp	0x51be	; 0x51be <__vector_39>
      a0:	f7 c0       	rjmp	.+494    	; 0x290 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f5 c0       	rjmp	.+490    	; 0x290 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f3 c0       	rjmp	.+486    	; 0x290 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f1 c0       	rjmp	.+482    	; 0x290 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ef c0       	rjmp	.+478    	; 0x290 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ed c0       	rjmp	.+474    	; 0x290 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	eb c0       	rjmp	.+470    	; 0x290 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e9 c0       	rjmp	.+466    	; 0x290 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e7 c0       	rjmp	.+462    	; 0x290 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e5 c0       	rjmp	.+458    	; 0x290 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e3 c0       	rjmp	.+454    	; 0x290 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b8 22 	jmp	0x4570	; 0x4570 <__vector_51>
      d0:	0c 94 0a 23 	jmp	0x4614	; 0x4614 <__vector_52>
      d4:	dd c0       	rjmp	.+442    	; 0x290 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 4e 23 	jmp	0x469c	; 0x469c <__vector_54>
      dc:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__vector_55>
      e0:	d7 c0       	rjmp	.+430    	; 0x290 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3a 17       	cp	r19, r26
      e6:	3a 17       	cp	r19, r26
      e8:	3a 17       	cp	r19, r26
      ea:	71 17       	cp	r23, r17
      ec:	79 17       	cp	r23, r25
      ee:	8e 17       	cp	r24, r30
      f0:	3a 17       	cp	r19, r26
      f2:	3a 17       	cp	r19, r26
      f4:	71 17       	cp	r23, r17
      f6:	79 17       	cp	r23, r25
      f8:	01 29       	or	r16, r1
      fa:	71 29       	or	r23, r1
      fc:	71 29       	or	r23, r1
      fe:	71 29       	or	r23, r1
     100:	71 29       	or	r23, r1
     102:	71 29       	or	r23, r1
     104:	71 29       	or	r23, r1
     106:	71 29       	or	r23, r1
     108:	01 29       	or	r16, r1
     10a:	71 29       	or	r23, r1
     10c:	71 29       	or	r23, r1
     10e:	71 29       	or	r23, r1
     110:	71 29       	or	r23, r1
     112:	71 29       	or	r23, r1
     114:	71 29       	or	r23, r1
     116:	71 29       	or	r23, r1
     118:	03 29       	or	r16, r3
     11a:	71 29       	or	r23, r1
     11c:	71 29       	or	r23, r1
     11e:	71 29       	or	r23, r1
     120:	71 29       	or	r23, r1
     122:	71 29       	or	r23, r1
     124:	71 29       	or	r23, r1
     126:	71 29       	or	r23, r1
     128:	71 29       	or	r23, r1
     12a:	71 29       	or	r23, r1
     12c:	71 29       	or	r23, r1
     12e:	71 29       	or	r23, r1
     130:	71 29       	or	r23, r1
     132:	71 29       	or	r23, r1
     134:	71 29       	or	r23, r1
     136:	71 29       	or	r23, r1
     138:	03 29       	or	r16, r3
     13a:	71 29       	or	r23, r1
     13c:	71 29       	or	r23, r1
     13e:	71 29       	or	r23, r1
     140:	71 29       	or	r23, r1
     142:	71 29       	or	r23, r1
     144:	71 29       	or	r23, r1
     146:	71 29       	or	r23, r1
     148:	71 29       	or	r23, r1
     14a:	71 29       	or	r23, r1
     14c:	71 29       	or	r23, r1
     14e:	71 29       	or	r23, r1
     150:	71 29       	or	r23, r1
     152:	71 29       	or	r23, r1
     154:	71 29       	or	r23, r1
     156:	71 29       	or	r23, r1
     158:	6d 29       	or	r22, r13
     15a:	71 29       	or	r23, r1
     15c:	71 29       	or	r23, r1
     15e:	71 29       	or	r23, r1
     160:	71 29       	or	r23, r1
     162:	71 29       	or	r23, r1
     164:	71 29       	or	r23, r1
     166:	71 29       	or	r23, r1
     168:	38 29       	or	r19, r8
     16a:	71 29       	or	r23, r1
     16c:	71 29       	or	r23, r1
     16e:	71 29       	or	r23, r1
     170:	71 29       	or	r23, r1
     172:	71 29       	or	r23, r1
     174:	71 29       	or	r23, r1
     176:	71 29       	or	r23, r1
     178:	71 29       	or	r23, r1
     17a:	71 29       	or	r23, r1
     17c:	71 29       	or	r23, r1
     17e:	71 29       	or	r23, r1
     180:	71 29       	or	r23, r1
     182:	71 29       	or	r23, r1
     184:	71 29       	or	r23, r1
     186:	71 29       	or	r23, r1
     188:	2c 29       	or	r18, r12
     18a:	71 29       	or	r23, r1
     18c:	71 29       	or	r23, r1
     18e:	71 29       	or	r23, r1
     190:	71 29       	or	r23, r1
     192:	71 29       	or	r23, r1
     194:	71 29       	or	r23, r1
     196:	71 29       	or	r23, r1
     198:	50 29       	or	r21, r0
     19a:	07 63       	ori	r16, 0x37	; 55
     19c:	42 36       	cpi	r20, 0x62	; 98
     19e:	b7 9b       	sbis	0x16, 7	; 22
     1a0:	d8 a7       	std	Y+40, r29	; 0x28
     1a2:	1a 39       	cpi	r17, 0x9A	; 154
     1a4:	68 56       	subi	r22, 0x68	; 104
     1a6:	18 ae       	std	Y+56, r1	; 0x38
     1a8:	ba ab       	std	Y+50, r27	; 0x32
     1aa:	55 8c       	ldd	r5, Z+29	; 0x1d
     1ac:	1d 3c       	cpi	r17, 0xCD	; 205
     1ae:	b7 cc       	rjmp	.-1682   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     1b0:	57 63       	ori	r21, 0x37	; 55
     1b2:	bd 6d       	ori	r27, 0xDD	; 221
     1b4:	ed fd       	.word	0xfded	; ????
     1b6:	75 3e       	cpi	r23, 0xE5	; 229
     1b8:	f6 17       	cp	r31, r22
     1ba:	72 31       	cpi	r23, 0x12	; 18
     1bc:	bf 00       	.word	0x00bf	; ????
     1be:	00 00       	nop
     1c0:	80 3f       	cpi	r24, 0xF0	; 240
     1c2:	08 00       	.word	0x0008	; ????
     1c4:	00 00       	nop
     1c6:	be 92       	st	-X, r11
     1c8:	24 49       	sbci	r18, 0x94	; 148
     1ca:	12 3e       	cpi	r17, 0xE2	; 226
     1cc:	ab aa       	std	Y+51, r10	; 0x33
     1ce:	aa 2a       	or	r10, r26
     1d0:	be cd       	rjmp	.-1156   	; 0xfffffd4e <__eeprom_end+0xff7efd4e>
     1d2:	cc cc       	rjmp	.-1640   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     1d4:	4c 3e       	cpi	r20, 0xEC	; 236
     1d6:	00 00       	nop
     1d8:	00 80       	ld	r0, Z
     1da:	be ab       	std	Y+54, r27	; 0x36
     1dc:	aa aa       	std	Y+50, r10	; 0x32
     1de:	aa 3e       	cpi	r26, 0xEA	; 234
     1e0:	00 00       	nop
     1e2:	00 00       	nop
     1e4:	bf 00       	.word	0x00bf	; ????
     1e6:	00 00       	nop
     1e8:	80 3f       	cpi	r24, 0xF0	; 240
     1ea:	00 00       	nop
     1ec:	00 00       	nop
     1ee:	00 08       	sbc	r0, r0
     1f0:	41 78       	andi	r20, 0x81	; 129
     1f2:	d3 bb       	out	0x13, r29	; 19
     1f4:	43 87       	std	Z+11, r20	; 0x0b
     1f6:	d1 13       	cpse	r29, r17
     1f8:	3d 19       	sub	r19, r13
     1fa:	0e 3c       	cpi	r16, 0xCE	; 206
     1fc:	c3 bd       	out	0x23, r28	; 35
     1fe:	42 82       	std	Z+2, r4	; 0x02
     200:	ad 2b       	or	r26, r29
     202:	3e 68       	ori	r19, 0x8E	; 142
     204:	ec 82       	std	Y+4, r14	; 0x04
     206:	76 be       	out	0x36, r7	; 54
     208:	d9 8f       	std	Y+25, r29	; 0x19
     20a:	e1 a9       	ldd	r30, Z+49	; 0x31
     20c:	3e 4c       	sbci	r19, 0xCE	; 206
     20e:	80 ef       	ldi	r24, 0xF0	; 240
     210:	ff be       	out	0x3f, r15	; 63
     212:	01 c4       	rjmp	.+2050   	; 0xa16 <xQueueGenericReset+0x16>
     214:	ff 7f       	andi	r31, 0xFF	; 255
     216:	3f 00       	.word	0x003f	; ????
     218:	00 00       	nop
	...

0000021c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     21c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <prvCheckTasksWaitingTermination>
     220:	80 91 af 14 	lds	r24, 0x14AF	; 0x8014af <pxReadyTasksLists>
     224:	82 30       	cpi	r24, 0x02	; 2
     226:	08 f0       	brcs	.+2      	; 0x22a <prvIdleTask+0xe>
     228:	5b d2       	rcall	.+1206   	; 0x6e0 <vPortYield>
     22a:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <vApplicationIdleHook>
     22e:	f6 cf       	rjmp	.-20     	; 0x21c <prvIdleTask>

00000230 <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	1f 92       	push	r1
     236:	cd b7       	in	r28, 0x3d	; 61
     238:	de b7       	in	r29, 0x3e	; 62
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 b7 14 	call	0x296e	; 0x296e <prvGetNextExpireTime>
     242:	49 81       	ldd	r20, Y+1	; 0x01
     244:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <prvProcessTimerOrBlockTask>
     248:	0e 94 03 17 	call	0x2e06	; 0x2e06 <prvProcessReceivedCommands>
     24c:	f6 cf       	rjmp	.-20     	; 0x23a <prvTimerTask+0xa>

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf ef       	ldi	r28, 0xFF	; 255
     254:	d1 e2       	ldi	r29, 0x21	; 33
     256:	de bf       	out	0x3e, r29	; 62
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0c bf       	out	0x3c, r16	; 60

0000025e <__do_copy_data>:
     25e:	16 e0       	ldi	r17, 0x06	; 6
     260:	a0 e0       	ldi	r26, 0x00	; 0
     262:	b2 e0       	ldi	r27, 0x02	; 2
     264:	e0 ec       	ldi	r30, 0xC0	; 192
     266:	f4 e6       	ldi	r31, 0x64	; 100
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	0b bf       	out	0x3b, r16	; 59
     26c:	02 c0       	rjmp	.+4      	; 0x272 <__do_copy_data+0x14>
     26e:	07 90       	elpm	r0, Z+
     270:	0d 92       	st	X+, r0
     272:	a2 3a       	cpi	r26, 0xA2	; 162
     274:	b1 07       	cpc	r27, r17
     276:	d9 f7       	brne	.-10     	; 0x26e <__do_copy_data+0x10>

00000278 <__do_clear_bss>:
     278:	26 e1       	ldi	r18, 0x16	; 22
     27a:	a2 ea       	ldi	r26, 0xA2	; 162
     27c:	b6 e0       	ldi	r27, 0x06	; 6
     27e:	01 c0       	rjmp	.+2      	; 0x282 <.do_clear_bss_start>

00000280 <.do_clear_bss_loop>:
     280:	1d 92       	st	X+, r1

00000282 <.do_clear_bss_start>:
     282:	ae 3b       	cpi	r26, 0xBE	; 190
     284:	b2 07       	cpc	r27, r18
     286:	e1 f7       	brne	.-8      	; 0x280 <.do_clear_bss_loop>
     288:	0e 94 ac 19 	call	0x3358	; 0x3358 <main>
     28c:	0c 94 5e 32 	jmp	0x64bc	; 0x64bc <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     292:	ee ea       	ldi	r30, 0xAE	; 174
     294:	f6 e0       	ldi	r31, 0x06	; 6
     296:	a2 eb       	ldi	r26, 0xB2	; 178
     298:	b6 e0       	ldi	r27, 0x06	; 6
     29a:	b1 83       	std	Z+1, r27	; 0x01
     29c:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     29e:	13 82       	std	Z+3, r1	; 0x03
     2a0:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     2a2:	ea e5       	ldi	r30, 0x5A	; 90
     2a4:	f4 e1       	ldi	r31, 0x14	; 20
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     2a6:	f0 93 ad 06 	sts	0x06AD, r31	; 0x8006ad <pxEnd+0x1>
     2aa:	e0 93 ac 06 	sts	0x06AC, r30	; 0x8006ac <pxEnd>
    pxEnd->xBlockSize = 0;
     2ae:	13 82       	std	Z+3, r1	; 0x03
     2b0:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     2b2:	11 82       	std	Z+1, r1	; 0x01
     2b4:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     2b6:	88 ea       	ldi	r24, 0xA8	; 168
     2b8:	9d e0       	ldi	r25, 0x0D	; 13
     2ba:	13 96       	adiw	r26, 0x03	; 3
     2bc:	9c 93       	st	X, r25
     2be:	8e 93       	st	-X, r24
     2c0:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     2c2:	ed 93       	st	X+, r30
     2c4:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2c6:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <xMinimumEverFreeBytesRemaining+0x1>
     2ca:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     2ce:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <xFreeBytesRemaining+0x1>
     2d2:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e8       	ldi	r25, 0x80	; 128
     2da:	90 93 a3 06 	sts	0x06A3, r25	; 0x8006a3 <__data_end+0x1>
     2de:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__data_end>
     2e2:	08 95       	ret

000002e4 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     2ea:	ae ea       	ldi	r26, 0xAE	; 174
     2ec:	b6 e0       	ldi	r27, 0x06	; 6
     2ee:	01 c0       	rjmp	.+2      	; 0x2f2 <prvInsertBlockIntoFreeList+0xe>
     2f0:	df 01       	movw	r26, r30
     2f2:	ed 91       	ld	r30, X+
     2f4:	fc 91       	ld	r31, X
     2f6:	11 97       	sbiw	r26, 0x01	; 1
     2f8:	ec 17       	cp	r30, r28
     2fa:	fd 07       	cpc	r31, r29
     2fc:	c8 f3       	brcs	.-14     	; 0x2f0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     2fe:	12 96       	adiw	r26, 0x02	; 2
     300:	8d 91       	ld	r24, X+
     302:	9c 91       	ld	r25, X
     304:	13 97       	sbiw	r26, 0x03	; 3
     306:	9d 01       	movw	r18, r26
     308:	28 0f       	add	r18, r24
     30a:	39 1f       	adc	r19, r25
     30c:	c2 17       	cp	r28, r18
     30e:	d3 07       	cpc	r29, r19
     310:	49 f4       	brne	.+18     	; 0x324 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     312:	2a 81       	ldd	r18, Y+2	; 0x02
     314:	3b 81       	ldd	r19, Y+3	; 0x03
     316:	82 0f       	add	r24, r18
     318:	93 1f       	adc	r25, r19
     31a:	13 96       	adiw	r26, 0x03	; 3
     31c:	9c 93       	st	X, r25
     31e:	8e 93       	st	-X, r24
     320:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     322:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	9b 81       	ldd	r25, Y+3	; 0x03
     328:	9e 01       	movw	r18, r28
     32a:	28 0f       	add	r18, r24
     32c:	39 1f       	adc	r19, r25
     32e:	e2 17       	cp	r30, r18
     330:	f3 07       	cpc	r31, r19
     332:	c1 f4       	brne	.+48     	; 0x364 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     334:	20 91 ac 06 	lds	r18, 0x06AC	; 0x8006ac <pxEnd>
     338:	30 91 ad 06 	lds	r19, 0x06AD	; 0x8006ad <pxEnd+0x1>
     33c:	e2 17       	cp	r30, r18
     33e:	f3 07       	cpc	r31, r19
     340:	71 f0       	breq	.+28     	; 0x35e <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     342:	22 81       	ldd	r18, Z+2	; 0x02
     344:	33 81       	ldd	r19, Z+3	; 0x03
     346:	82 0f       	add	r24, r18
     348:	93 1f       	adc	r25, r19
     34a:	9b 83       	std	Y+3, r25	; 0x03
     34c:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     34e:	ed 91       	ld	r30, X+
     350:	fc 91       	ld	r31, X
     352:	11 97       	sbiw	r26, 0x01	; 1
     354:	80 81       	ld	r24, Z
     356:	91 81       	ldd	r25, Z+1	; 0x01
     358:	99 83       	std	Y+1, r25	; 0x01
     35a:	88 83       	st	Y, r24
     35c:	05 c0       	rjmp	.+10     	; 0x368 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     35e:	39 83       	std	Y+1, r19	; 0x01
     360:	28 83       	st	Y, r18
     362:	02 c0       	rjmp	.+4      	; 0x368 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     364:	f9 83       	std	Y+1, r31	; 0x01
     366:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     368:	ca 17       	cp	r28, r26
     36a:	db 07       	cpc	r29, r27
     36c:	11 f0       	breq	.+4      	; 0x372 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     36e:	cd 93       	st	X+, r28
     370:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     386:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     38a:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxEnd>
     38e:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxEnd+0x1>
     392:	89 2b       	or	r24, r25
     394:	09 f4       	brne	.+2      	; 0x398 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     396:	7d df       	rcall	.-262    	; 0x292 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     398:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <__data_end>
     39c:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <__data_end+0x1>
     3a0:	80 23       	and	r24, r16
     3a2:	91 23       	and	r25, r17
     3a4:	89 2b       	or	r24, r25
     3a6:	09 f0       	breq	.+2      	; 0x3aa <pvPortMalloc+0x32>
     3a8:	76 c0       	rjmp	.+236    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3aa:	01 15       	cp	r16, r1
     3ac:	11 05       	cpc	r17, r1
     3ae:	49 f0       	breq	.+18     	; 0x3c2 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     3b0:	c8 01       	movw	r24, r16
     3b2:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     3b4:	08 17       	cp	r16, r24
     3b6:	19 07       	cpc	r17, r25
     3b8:	18 f0       	brcs	.+6      	; 0x3c0 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     3ba:	00 e0       	ldi	r16, 0x00	; 0
     3bc:	10 e0       	ldi	r17, 0x00	; 0
     3be:	01 c0       	rjmp	.+2      	; 0x3c2 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     3c0:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     3c2:	01 15       	cp	r16, r1
     3c4:	11 05       	cpc	r17, r1
     3c6:	09 f4       	brne	.+2      	; 0x3ca <pvPortMalloc+0x52>
     3c8:	69 c0       	rjmp	.+210    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     3ca:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <xFreeBytesRemaining>
     3ce:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <xFreeBytesRemaining+0x1>
     3d2:	80 17       	cp	r24, r16
     3d4:	91 07       	cpc	r25, r17
     3d6:	08 f4       	brcc	.+2      	; 0x3da <pvPortMalloc+0x62>
     3d8:	64 c0       	rjmp	.+200    	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     3da:	c0 91 ae 06 	lds	r28, 0x06AE	; 0x8006ae <xStart>
     3de:	d0 91 af 06 	lds	r29, 0x06AF	; 0x8006af <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     3e2:	ee ea       	ldi	r30, 0xAE	; 174
     3e4:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     3e8:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     3ea:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     3ec:	8a 81       	ldd	r24, Y+2	; 0x02
     3ee:	9b 81       	ldd	r25, Y+3	; 0x03
     3f0:	80 17       	cp	r24, r16
     3f2:	91 07       	cpc	r25, r17
     3f4:	20 f4       	brcc	.+8      	; 0x3fe <pvPortMalloc+0x86>
     3f6:	88 81       	ld	r24, Y
     3f8:	99 81       	ldd	r25, Y+1	; 0x01
     3fa:	00 97       	sbiw	r24, 0x00	; 0
     3fc:	a9 f7       	brne	.-22     	; 0x3e8 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     3fe:	80 91 ac 06 	lds	r24, 0x06AC	; 0x8006ac <pxEnd>
     402:	90 91 ad 06 	lds	r25, 0x06AD	; 0x8006ad <pxEnd+0x1>
     406:	c8 17       	cp	r28, r24
     408:	d9 07       	cpc	r29, r25
     40a:	09 f4       	brne	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	4d c0       	rjmp	.+154    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     40e:	e0 80       	ld	r14, Z
     410:	f1 80       	ldd	r15, Z+1	; 0x01
     412:	84 e0       	ldi	r24, 0x04	; 4
     414:	e8 0e       	add	r14, r24
     416:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     418:	88 81       	ld	r24, Y
     41a:	99 81       	ldd	r25, Y+1	; 0x01
     41c:	91 83       	std	Z+1, r25	; 0x01
     41e:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     420:	2a 81       	ldd	r18, Y+2	; 0x02
     422:	3b 81       	ldd	r19, Y+3	; 0x03
     424:	20 1b       	sub	r18, r16
     426:	31 0b       	sbc	r19, r17
     428:	29 30       	cpi	r18, 0x09	; 9
     42a:	31 05       	cpc	r19, r1
     42c:	48 f0       	brcs	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     42e:	ce 01       	movw	r24, r28
     430:	80 0f       	add	r24, r16
     432:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     434:	fc 01       	movw	r30, r24
     436:	33 83       	std	Z+3, r19	; 0x03
     438:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     43a:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     43c:	0a 83       	std	Y+2, r16	; 0x02
     43e:	52 df       	rcall	.-348    	; 0x2e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     440:	2a 81       	ldd	r18, Y+2	; 0x02
     442:	3b 81       	ldd	r19, Y+3	; 0x03
     444:	80 91 aa 06 	lds	r24, 0x06AA	; 0x8006aa <xFreeBytesRemaining>
     448:	90 91 ab 06 	lds	r25, 0x06AB	; 0x8006ab <xFreeBytesRemaining+0x1>
     44c:	82 1b       	sub	r24, r18
     44e:	93 0b       	sbc	r25, r19
     450:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <xFreeBytesRemaining+0x1>
     454:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     458:	40 91 a8 06 	lds	r20, 0x06A8	; 0x8006a8 <xMinimumEverFreeBytesRemaining>
     45c:	50 91 a9 06 	lds	r21, 0x06A9	; 0x8006a9 <xMinimumEverFreeBytesRemaining+0x1>
     460:	84 17       	cp	r24, r20
     462:	95 07       	cpc	r25, r21
     464:	20 f4       	brcc	.+8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     466:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <xMinimumEverFreeBytesRemaining+0x1>
     46a:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     46e:	80 91 a2 06 	lds	r24, 0x06A2	; 0x8006a2 <__data_end>
     472:	90 91 a3 06 	lds	r25, 0x06A3	; 0x8006a3 <__data_end+0x1>
     476:	28 2b       	or	r18, r24
     478:	39 2b       	or	r19, r25
     47a:	3b 83       	std	Y+3, r19	; 0x03
     47c:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     47e:	19 82       	std	Y+1, r1	; 0x01
     480:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     482:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <xNumberOfSuccessfulAllocations>
     486:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <xNumberOfSuccessfulAllocations+0x1>
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <xNumberOfSuccessfulAllocations+0x1>
     490:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <xNumberOfSuccessfulAllocations>
     494:	0b c0       	rjmp	.+22     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     496:	e1 2c       	mov	r14, r1
     498:	f1 2c       	mov	r15, r1
     49a:	08 c0       	rjmp	.+16     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     49c:	e1 2c       	mov	r14, r1
     49e:	f1 2c       	mov	r15, r1
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a2:	e1 2c       	mov	r14, r1
     4a4:	f1 2c       	mov	r15, r1
     4a6:	02 c0       	rjmp	.+4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a8:	e1 2c       	mov	r14, r1
     4aa:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4ac:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     4b0:	e1 14       	cp	r14, r1
     4b2:	f1 04       	cpc	r15, r1
     4b4:	11 f4       	brne	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     4b6:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     4ba:	c7 01       	movw	r24, r14
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	1f 91       	pop	r17
     4c2:	0f 91       	pop	r16
     4c4:	ff 90       	pop	r15
     4c6:	ef 90       	pop	r14
     4c8:	08 95       	ret

000004ca <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     4d2:	00 97       	sbiw	r24, 0x00	; 0
     4d4:	91 f1       	breq	.+100    	; 0x53a <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     4d6:	ec 01       	movw	r28, r24
     4d8:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     4da:	4a 81       	ldd	r20, Y+2	; 0x02
     4dc:	5b 81       	ldd	r21, Y+3	; 0x03
     4de:	20 91 a2 06 	lds	r18, 0x06A2	; 0x8006a2 <__data_end>
     4e2:	30 91 a3 06 	lds	r19, 0x06A3	; 0x8006a3 <__data_end+0x1>
     4e6:	ba 01       	movw	r22, r20
     4e8:	62 23       	and	r22, r18
     4ea:	73 23       	and	r23, r19
     4ec:	67 2b       	or	r22, r23
     4ee:	29 f1       	breq	.+74     	; 0x53a <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     4f0:	68 81       	ld	r22, Y
     4f2:	79 81       	ldd	r23, Y+1	; 0x01
     4f4:	67 2b       	or	r22, r23
     4f6:	09 f5       	brne	.+66     	; 0x53a <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     4f8:	20 95       	com	r18
     4fa:	30 95       	com	r19
     4fc:	24 23       	and	r18, r20
     4fe:	35 23       	and	r19, r21
     500:	3b 83       	std	Y+3, r19	; 0x03
     502:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     504:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     508:	8a 81       	ldd	r24, Y+2	; 0x02
     50a:	9b 81       	ldd	r25, Y+3	; 0x03
     50c:	20 91 aa 06 	lds	r18, 0x06AA	; 0x8006aa <xFreeBytesRemaining>
     510:	30 91 ab 06 	lds	r19, 0x06AB	; 0x8006ab <xFreeBytesRemaining+0x1>
     514:	82 0f       	add	r24, r18
     516:	93 1f       	adc	r25, r19
     518:	90 93 ab 06 	sts	0x06AB, r25	; 0x8006ab <xFreeBytesRemaining+0x1>
     51c:	80 93 aa 06 	sts	0x06AA, r24	; 0x8006aa <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     520:	ce 01       	movw	r24, r28
     522:	e0 de       	rcall	.-576    	; 0x2e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     524:	80 91 a4 06 	lds	r24, 0x06A4	; 0x8006a4 <xNumberOfSuccessfulFrees>
     528:	90 91 a5 06 	lds	r25, 0x06A5	; 0x8006a5 <xNumberOfSuccessfulFrees+0x1>
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	90 93 a5 06 	sts	0x06A5, r25	; 0x8006a5 <xNumberOfSuccessfulFrees+0x1>
     532:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     536:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	1f 91       	pop	r17
     540:	0f 91       	pop	r16
     542:	08 95       	ret

00000544 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     544:	fc 01       	movw	r30, r24
     546:	03 96       	adiw	r24, 0x03	; 3
     548:	92 83       	std	Z+2, r25	; 0x02
     54a:	81 83       	std	Z+1, r24	; 0x01
     54c:	4f ef       	ldi	r20, 0xFF	; 255
     54e:	5f ef       	ldi	r21, 0xFF	; 255
     550:	ba 01       	movw	r22, r20
     552:	43 83       	std	Z+3, r20	; 0x03
     554:	54 83       	std	Z+4, r21	; 0x04
     556:	65 83       	std	Z+5, r22	; 0x05
     558:	76 83       	std	Z+6, r23	; 0x06
     55a:	90 87       	std	Z+8, r25	; 0x08
     55c:	87 83       	std	Z+7, r24	; 0x07
     55e:	92 87       	std	Z+10, r25	; 0x0a
     560:	81 87       	std	Z+9, r24	; 0x09
     562:	10 82       	st	Z, r1
     564:	08 95       	ret

00000566 <vListInitialiseItem>:
     566:	fc 01       	movw	r30, r24
     568:	13 86       	std	Z+11, r1	; 0x0b
     56a:	12 86       	std	Z+10, r1	; 0x0a
     56c:	08 95       	ret

0000056e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     578:	08 81       	ld	r16, Y
     57a:	19 81       	ldd	r17, Y+1	; 0x01
     57c:	2a 81       	ldd	r18, Y+2	; 0x02
     57e:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     580:	0f 3f       	cpi	r16, 0xFF	; 255
     582:	4f ef       	ldi	r20, 0xFF	; 255
     584:	14 07       	cpc	r17, r20
     586:	24 07       	cpc	r18, r20
     588:	34 07       	cpc	r19, r20
     58a:	21 f4       	brne	.+8      	; 0x594 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     58c:	fc 01       	movw	r30, r24
     58e:	a1 85       	ldd	r26, Z+9	; 0x09
     590:	b2 85       	ldd	r27, Z+10	; 0x0a
     592:	11 c0       	rjmp	.+34     	; 0x5b6 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     594:	dc 01       	movw	r26, r24
     596:	13 96       	adiw	r26, 0x03	; 3
     598:	01 c0       	rjmp	.+2      	; 0x59c <vListInsert+0x2e>
     59a:	df 01       	movw	r26, r30
     59c:	14 96       	adiw	r26, 0x04	; 4
     59e:	ed 91       	ld	r30, X+
     5a0:	fc 91       	ld	r31, X
     5a2:	15 97       	sbiw	r26, 0x05	; 5
     5a4:	40 81       	ld	r20, Z
     5a6:	51 81       	ldd	r21, Z+1	; 0x01
     5a8:	62 81       	ldd	r22, Z+2	; 0x02
     5aa:	73 81       	ldd	r23, Z+3	; 0x03
     5ac:	04 17       	cp	r16, r20
     5ae:	15 07       	cpc	r17, r21
     5b0:	26 07       	cpc	r18, r22
     5b2:	37 07       	cpc	r19, r23
     5b4:	90 f7       	brcc	.-28     	; 0x59a <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5b6:	14 96       	adiw	r26, 0x04	; 4
     5b8:	ed 91       	ld	r30, X+
     5ba:	fc 91       	ld	r31, X
     5bc:	15 97       	sbiw	r26, 0x05	; 5
     5be:	fd 83       	std	Y+5, r31	; 0x05
     5c0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5c2:	d7 83       	std	Z+7, r29	; 0x07
     5c4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     5c6:	bf 83       	std	Y+7, r27	; 0x07
     5c8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     5ca:	15 96       	adiw	r26, 0x05	; 5
     5cc:	dc 93       	st	X, r29
     5ce:	ce 93       	st	-X, r28
     5d0:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5d2:	9b 87       	std	Y+11, r25	; 0x0b
     5d4:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     5d6:	fc 01       	movw	r30, r24
     5d8:	20 81       	ld	r18, Z
     5da:	2f 5f       	subi	r18, 0xFF	; 255
     5dc:	20 83       	st	Z, r18
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret

000005e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     5ee:	a2 85       	ldd	r26, Z+10	; 0x0a
     5f0:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5f2:	c4 81       	ldd	r28, Z+4	; 0x04
     5f4:	d5 81       	ldd	r29, Z+5	; 0x05
     5f6:	86 81       	ldd	r24, Z+6	; 0x06
     5f8:	97 81       	ldd	r25, Z+7	; 0x07
     5fa:	9f 83       	std	Y+7, r25	; 0x07
     5fc:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5fe:	c6 81       	ldd	r28, Z+6	; 0x06
     600:	d7 81       	ldd	r29, Z+7	; 0x07
     602:	84 81       	ldd	r24, Z+4	; 0x04
     604:	95 81       	ldd	r25, Z+5	; 0x05
     606:	9d 83       	std	Y+5, r25	; 0x05
     608:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     60a:	11 96       	adiw	r26, 0x01	; 1
     60c:	8d 91       	ld	r24, X+
     60e:	9c 91       	ld	r25, X
     610:	12 97       	sbiw	r26, 0x02	; 2
     612:	e8 17       	cp	r30, r24
     614:	f9 07       	cpc	r31, r25
     616:	31 f4       	brne	.+12     	; 0x624 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     618:	86 81       	ldd	r24, Z+6	; 0x06
     61a:	97 81       	ldd	r25, Z+7	; 0x07
     61c:	12 96       	adiw	r26, 0x02	; 2
     61e:	9c 93       	st	X, r25
     620:	8e 93       	st	-X, r24
     622:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     624:	13 86       	std	Z+11, r1	; 0x0b
     626:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     628:	8c 91       	ld	r24, X
     62a:	81 50       	subi	r24, 0x01	; 1
     62c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     62e:	8c 91       	ld	r24, X
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     636:	a8 95       	wdr
     638:	90 ec       	ldi	r25, 0xC0	; 192
     63a:	88 e1       	ldi	r24, 0x18	; 24
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	a8 95       	wdr
     642:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     646:	0f be       	out	0x3f, r0	; 63
     648:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     64c:	08 95       	ret

0000064e <pxPortInitialiseStack>:
     64e:	fc 01       	movw	r30, r24
     650:	60 83       	st	Z, r22
     652:	31 97       	sbiw	r30, 0x01	; 1
     654:	70 83       	st	Z, r23
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	10 82       	st	Z, r1
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	10 82       	st	Z, r1
     65e:	31 97       	sbiw	r30, 0x01	; 1
     660:	20 e8       	ldi	r18, 0x80	; 128
     662:	20 83       	st	Z, r18
     664:	31 97       	sbiw	r30, 0x01	; 1
     666:	10 82       	st	Z, r1
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	10 82       	st	Z, r1
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	10 82       	st	Z, r1
     670:	77 97       	sbiw	r30, 0x17	; 23
     672:	40 83       	st	Z, r20
     674:	31 97       	sbiw	r30, 0x01	; 1
     676:	50 83       	st	Z, r21
     678:	86 97       	sbiw	r24, 0x26	; 38
     67a:	08 95       	ret

0000067c <xPortStartScheduler>:
     67c:	dc df       	rcall	.-72     	; 0x636 <prvSetupTimerInterrupt>
     67e:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     682:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     686:	cd 91       	ld	r28, X+
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	dd 91       	ld	r29, X+
     68c:	de bf       	out	0x3e, r29	; 62
     68e:	ff 91       	pop	r31
     690:	ef 91       	pop	r30
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	cf 90       	pop	r12
     6b6:	bf 90       	pop	r11
     6b8:	af 90       	pop	r10
     6ba:	9f 90       	pop	r9
     6bc:	8f 90       	pop	r8
     6be:	7f 90       	pop	r7
     6c0:	6f 90       	pop	r6
     6c2:	5f 90       	pop	r5
     6c4:	4f 90       	pop	r4
     6c6:	3f 90       	pop	r3
     6c8:	2f 90       	pop	r2
     6ca:	1f 90       	pop	r1
     6cc:	0f 90       	pop	r0
     6ce:	0c be       	out	0x3c, r0	; 60
     6d0:	0f 90       	pop	r0
     6d2:	0b be       	out	0x3b, r0	; 59
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	08 95       	ret
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	08 95       	ret

000006e0 <vPortYield>:
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	0f 92       	push	r0
     6e8:	0b b6       	in	r0, 0x3b	; 59
     6ea:	0f 92       	push	r0
     6ec:	0c b6       	in	r0, 0x3c	; 60
     6ee:	0f 92       	push	r0
     6f0:	1f 92       	push	r1
     6f2:	11 24       	eor	r1, r1
     6f4:	2f 92       	push	r2
     6f6:	3f 92       	push	r3
     6f8:	4f 92       	push	r4
     6fa:	5f 92       	push	r5
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	2f 93       	push	r18
     716:	3f 93       	push	r19
     718:	4f 93       	push	r20
     71a:	5f 93       	push	r21
     71c:	6f 93       	push	r22
     71e:	7f 93       	push	r23
     720:	8f 93       	push	r24
     722:	9f 93       	push	r25
     724:	af 93       	push	r26
     726:	bf 93       	push	r27
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ef 93       	push	r30
     72e:	ff 93       	push	r31
     730:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     734:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     738:	0d b6       	in	r0, 0x3d	; 61
     73a:	0d 92       	st	X+, r0
     73c:	0e b6       	in	r0, 0x3e	; 62
     73e:	0d 92       	st	X+, r0
     740:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTaskSwitchContext>
     744:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     748:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     74c:	cd 91       	ld	r28, X+
     74e:	cd bf       	out	0x3d, r28	; 61
     750:	dd 91       	ld	r29, X+
     752:	de bf       	out	0x3e, r29	; 62
     754:	ff 91       	pop	r31
     756:	ef 91       	pop	r30
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	7f 91       	pop	r23
     766:	6f 91       	pop	r22
     768:	5f 91       	pop	r21
     76a:	4f 91       	pop	r20
     76c:	3f 91       	pop	r19
     76e:	2f 91       	pop	r18
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	df 90       	pop	r13
     77a:	cf 90       	pop	r12
     77c:	bf 90       	pop	r11
     77e:	af 90       	pop	r10
     780:	9f 90       	pop	r9
     782:	8f 90       	pop	r8
     784:	7f 90       	pop	r7
     786:	6f 90       	pop	r6
     788:	5f 90       	pop	r5
     78a:	4f 90       	pop	r4
     78c:	3f 90       	pop	r3
     78e:	2f 90       	pop	r2
     790:	1f 90       	pop	r1
     792:	0f 90       	pop	r0
     794:	0c be       	out	0x3c, r0	; 60
     796:	0f 90       	pop	r0
     798:	0b be       	out	0x3b, r0	; 59
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	08 95       	ret

000007a2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     7a2:	0f 92       	push	r0
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	0f 92       	push	r0
     7aa:	0b b6       	in	r0, 0x3b	; 59
     7ac:	0f 92       	push	r0
     7ae:	0c b6       	in	r0, 0x3c	; 60
     7b0:	0f 92       	push	r0
     7b2:	1f 92       	push	r1
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 92       	push	r2
     7b8:	3f 92       	push	r3
     7ba:	4f 92       	push	r4
     7bc:	5f 92       	push	r5
     7be:	6f 92       	push	r6
     7c0:	7f 92       	push	r7
     7c2:	8f 92       	push	r8
     7c4:	9f 92       	push	r9
     7c6:	af 92       	push	r10
     7c8:	bf 92       	push	r11
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
     7ee:	ef 93       	push	r30
     7f0:	ff 93       	push	r31
     7f2:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     7f6:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     7fa:	0d b6       	in	r0, 0x3d	; 61
     7fc:	0d 92       	st	X+, r0
     7fe:	0e b6       	in	r0, 0x3e	; 62
     800:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     802:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     804:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <xTaskIncrementTick>
     808:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     80a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     80e:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
     812:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
     816:	cd 91       	ld	r28, X+
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	dd 91       	ld	r29, X+
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	ff 91       	pop	r31
     820:	ef 91       	pop	r30
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	bf 91       	pop	r27
     828:	af 91       	pop	r26
     82a:	9f 91       	pop	r25
     82c:	8f 91       	pop	r24
     82e:	7f 91       	pop	r23
     830:	6f 91       	pop	r22
     832:	5f 91       	pop	r21
     834:	4f 91       	pop	r20
     836:	3f 91       	pop	r19
     838:	2f 91       	pop	r18
     83a:	1f 91       	pop	r17
     83c:	0f 91       	pop	r16
     83e:	ff 90       	pop	r15
     840:	ef 90       	pop	r14
     842:	df 90       	pop	r13
     844:	cf 90       	pop	r12
     846:	bf 90       	pop	r11
     848:	af 90       	pop	r10
     84a:	9f 90       	pop	r9
     84c:	8f 90       	pop	r8
     84e:	7f 90       	pop	r7
     850:	6f 90       	pop	r6
     852:	5f 90       	pop	r5
     854:	4f 90       	pop	r4
     856:	3f 90       	pop	r3
     858:	2f 90       	pop	r2
     85a:	1f 90       	pop	r1
     85c:	0f 90       	pop	r0
     85e:	0c be       	out	0x3c, r0	; 60
     860:	0f 90       	pop	r0
     862:	0b be       	out	0x3b, r0	; 59
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     86a:	08 95       	ret

0000086c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     86c:	9a df       	rcall	.-204    	; 0x7a2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     86e:	18 95       	reti

00000870 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	f8 94       	cli
     874:	0f 92       	push	r0
     876:	fc 01       	movw	r30, r24
     878:	86 8d       	ldd	r24, Z+30	; 0x1e
     87a:	81 11       	cpse	r24, r1
     87c:	02 c0       	rjmp	.+4      	; 0x882 <prvIsQueueEmpty+0x12>
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	01 c0       	rjmp	.+2      	; 0x884 <prvIsQueueEmpty+0x14>
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	08 95       	ret

0000088a <prvIsQueueFull>:
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	0f 92       	push	r0
     890:	fc 01       	movw	r30, r24
     892:	26 8d       	ldd	r18, Z+30	; 0x1e
     894:	87 8d       	ldd	r24, Z+31	; 0x1f
     896:	28 13       	cpse	r18, r24
     898:	02 c0       	rjmp	.+4      	; 0x89e <prvIsQueueFull+0x14>
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	01 c0       	rjmp	.+2      	; 0x8a0 <prvIsQueueFull+0x16>
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	08 95       	ret

000008a6 <prvCopyDataToQueue>:
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	ec 01       	movw	r28, r24
     8b0:	04 2f       	mov	r16, r20
     8b2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8b4:	48 a1       	ldd	r20, Y+32	; 0x20
     8b6:	41 11       	cpse	r20, r1
     8b8:	0c c0       	rjmp	.+24     	; 0x8d2 <prvCopyDataToQueue+0x2c>
     8ba:	88 81       	ld	r24, Y
     8bc:	99 81       	ldd	r25, Y+1	; 0x01
     8be:	89 2b       	or	r24, r25
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <prvCopyDataToQueue+0x1e>
     8c2:	42 c0       	rjmp	.+132    	; 0x948 <prvCopyDataToQueue+0xa2>
     8c4:	8c 81       	ldd	r24, Y+4	; 0x04
     8c6:	9d 81       	ldd	r25, Y+5	; 0x05
     8c8:	0e 94 82 11 	call	0x2304	; 0x2304 <xTaskPriorityDisinherit>
     8cc:	1d 82       	std	Y+5, r1	; 0x05
     8ce:	1c 82       	std	Y+4, r1	; 0x04
     8d0:	42 c0       	rjmp	.+132    	; 0x956 <prvCopyDataToQueue+0xb0>
     8d2:	01 11       	cpse	r16, r1
     8d4:	17 c0       	rjmp	.+46     	; 0x904 <prvCopyDataToQueue+0x5e>
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	8a 81       	ldd	r24, Y+2	; 0x02
     8da:	9b 81       	ldd	r25, Y+3	; 0x03
     8dc:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <memcpy>
     8e0:	28 a1       	ldd	r18, Y+32	; 0x20
     8e2:	8a 81       	ldd	r24, Y+2	; 0x02
     8e4:	9b 81       	ldd	r25, Y+3	; 0x03
     8e6:	82 0f       	add	r24, r18
     8e8:	91 1d       	adc	r25, r1
     8ea:	9b 83       	std	Y+3, r25	; 0x03
     8ec:	8a 83       	std	Y+2, r24	; 0x02
     8ee:	2c 81       	ldd	r18, Y+4	; 0x04
     8f0:	3d 81       	ldd	r19, Y+5	; 0x05
     8f2:	82 17       	cp	r24, r18
     8f4:	93 07       	cpc	r25, r19
     8f6:	50 f1       	brcs	.+84     	; 0x94c <prvCopyDataToQueue+0xa6>
     8f8:	88 81       	ld	r24, Y
     8fa:	99 81       	ldd	r25, Y+1	; 0x01
     8fc:	9b 83       	std	Y+3, r25	; 0x03
     8fe:	8a 83       	std	Y+2, r24	; 0x02
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	29 c0       	rjmp	.+82     	; 0x956 <prvCopyDataToQueue+0xb0>
     904:	50 e0       	ldi	r21, 0x00	; 0
     906:	8e 81       	ldd	r24, Y+6	; 0x06
     908:	9f 81       	ldd	r25, Y+7	; 0x07
     90a:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <memcpy>
     90e:	88 a1       	ldd	r24, Y+32	; 0x20
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	91 95       	neg	r25
     914:	81 95       	neg	r24
     916:	91 09       	sbc	r25, r1
     918:	2e 81       	ldd	r18, Y+6	; 0x06
     91a:	3f 81       	ldd	r19, Y+7	; 0x07
     91c:	28 0f       	add	r18, r24
     91e:	39 1f       	adc	r19, r25
     920:	3f 83       	std	Y+7, r19	; 0x07
     922:	2e 83       	std	Y+6, r18	; 0x06
     924:	48 81       	ld	r20, Y
     926:	59 81       	ldd	r21, Y+1	; 0x01
     928:	24 17       	cp	r18, r20
     92a:	35 07       	cpc	r19, r21
     92c:	30 f4       	brcc	.+12     	; 0x93a <prvCopyDataToQueue+0x94>
     92e:	2c 81       	ldd	r18, Y+4	; 0x04
     930:	3d 81       	ldd	r19, Y+5	; 0x05
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	9f 83       	std	Y+7, r25	; 0x07
     938:	8e 83       	std	Y+6, r24	; 0x06
     93a:	02 30       	cpi	r16, 0x02	; 2
     93c:	49 f4       	brne	.+18     	; 0x950 <prvCopyDataToQueue+0xaa>
     93e:	11 23       	and	r17, r17
     940:	49 f0       	breq	.+18     	; 0x954 <prvCopyDataToQueue+0xae>
     942:	11 50       	subi	r17, 0x01	; 1
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	07 c0       	rjmp	.+14     	; 0x956 <prvCopyDataToQueue+0xb0>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	05 c0       	rjmp	.+10     	; 0x956 <prvCopyDataToQueue+0xb0>
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	03 c0       	rjmp	.+6      	; 0x956 <prvCopyDataToQueue+0xb0>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	01 c0       	rjmp	.+2      	; 0x956 <prvCopyDataToQueue+0xb0>
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	1f 5f       	subi	r17, 0xFF	; 255
     958:	1e 8f       	std	Y+30, r17	; 0x1e
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <prvCopyDataFromQueue>:
     964:	fc 01       	movw	r30, r24
     966:	40 a1       	ldd	r20, Z+32	; 0x20
     968:	44 23       	and	r20, r20
     96a:	a9 f0       	breq	.+42     	; 0x996 <prvCopyDataFromQueue+0x32>
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	26 81       	ldd	r18, Z+6	; 0x06
     970:	37 81       	ldd	r19, Z+7	; 0x07
     972:	24 0f       	add	r18, r20
     974:	35 1f       	adc	r19, r21
     976:	37 83       	std	Z+7, r19	; 0x07
     978:	26 83       	std	Z+6, r18	; 0x06
     97a:	84 81       	ldd	r24, Z+4	; 0x04
     97c:	95 81       	ldd	r25, Z+5	; 0x05
     97e:	28 17       	cp	r18, r24
     980:	39 07       	cpc	r19, r25
     982:	20 f0       	brcs	.+8      	; 0x98c <prvCopyDataFromQueue+0x28>
     984:	80 81       	ld	r24, Z
     986:	91 81       	ldd	r25, Z+1	; 0x01
     988:	97 83       	std	Z+7, r25	; 0x07
     98a:	86 83       	std	Z+6, r24	; 0x06
     98c:	cb 01       	movw	r24, r22
     98e:	66 81       	ldd	r22, Z+6	; 0x06
     990:	77 81       	ldd	r23, Z+7	; 0x07
     992:	0c 94 e1 2e 	jmp	0x5dc2	; 0x5dc2 <memcpy>
     996:	08 95       	ret

00000998 <prvUnlockQueue>:
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
     99c:	df 93       	push	r29
     99e:	ec 01       	movw	r28, r24
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	0f 92       	push	r0
     9a6:	1a a1       	ldd	r17, Y+34	; 0x22
     9a8:	0b c0       	rjmp	.+22     	; 0x9c0 <prvUnlockQueue+0x28>
     9aa:	8b 89       	ldd	r24, Y+19	; 0x13
     9ac:	88 23       	and	r24, r24
     9ae:	51 f0       	breq	.+20     	; 0x9c4 <prvUnlockQueue+0x2c>
     9b0:	ce 01       	movw	r24, r28
     9b2:	43 96       	adiw	r24, 0x13	; 19
     9b4:	0e 94 2f 10 	call	0x205e	; 0x205e <xTaskRemoveFromEventList>
     9b8:	81 11       	cpse	r24, r1
     9ba:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <vTaskMissedYield>
     9be:	11 50       	subi	r17, 0x01	; 1
     9c0:	11 16       	cp	r1, r17
     9c2:	9c f3       	brlt	.-26     	; 0x9aa <prvUnlockQueue+0x12>
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	8a a3       	std	Y+34, r24	; 0x22
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	0f 92       	push	r0
     9d2:	19 a1       	ldd	r17, Y+33	; 0x21
     9d4:	0b c0       	rjmp	.+22     	; 0x9ec <prvUnlockQueue+0x54>
     9d6:	88 85       	ldd	r24, Y+8	; 0x08
     9d8:	88 23       	and	r24, r24
     9da:	51 f0       	breq	.+20     	; 0x9f0 <prvUnlockQueue+0x58>
     9dc:	ce 01       	movw	r24, r28
     9de:	08 96       	adiw	r24, 0x08	; 8
     9e0:	0e 94 2f 10 	call	0x205e	; 0x205e <xTaskRemoveFromEventList>
     9e4:	81 11       	cpse	r24, r1
     9e6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <vTaskMissedYield>
     9ea:	11 50       	subi	r17, 0x01	; 1
     9ec:	11 16       	cp	r1, r17
     9ee:	9c f3       	brlt	.-26     	; 0x9d6 <prvUnlockQueue+0x3e>
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	89 a3       	std	Y+33, r24	; 0x21
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	08 95       	ret

00000a00 <xQueueGenericReset>:
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	ec 01       	movw	r28, r24
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	0f 92       	push	r0
     a0c:	e8 81       	ld	r30, Y
     a0e:	f9 81       	ldd	r31, Y+1	; 0x01
     a10:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a12:	28 a1       	ldd	r18, Y+32	; 0x20
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	82 9f       	mul	r24, r18
     a1a:	a0 01       	movw	r20, r0
     a1c:	83 9f       	mul	r24, r19
     a1e:	50 0d       	add	r21, r0
     a20:	92 9f       	mul	r25, r18
     a22:	50 0d       	add	r21, r0
     a24:	11 24       	eor	r1, r1
     a26:	4e 0f       	add	r20, r30
     a28:	5f 1f       	adc	r21, r31
     a2a:	5d 83       	std	Y+5, r21	; 0x05
     a2c:	4c 83       	std	Y+4, r20	; 0x04
     a2e:	1e 8e       	std	Y+30, r1	; 0x1e
     a30:	fb 83       	std	Y+3, r31	; 0x03
     a32:	ea 83       	std	Y+2, r30	; 0x02
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	28 9f       	mul	r18, r24
     a38:	a0 01       	movw	r20, r0
     a3a:	29 9f       	mul	r18, r25
     a3c:	50 0d       	add	r21, r0
     a3e:	38 9f       	mul	r19, r24
     a40:	50 0d       	add	r21, r0
     a42:	11 24       	eor	r1, r1
     a44:	cf 01       	movw	r24, r30
     a46:	84 0f       	add	r24, r20
     a48:	95 1f       	adc	r25, r21
     a4a:	9f 83       	std	Y+7, r25	; 0x07
     a4c:	8e 83       	std	Y+6, r24	; 0x06
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	89 a3       	std	Y+33, r24	; 0x21
     a52:	8a a3       	std	Y+34, r24	; 0x22
     a54:	61 11       	cpse	r22, r1
     a56:	0b c0       	rjmp	.+22     	; 0xa6e <xQueueGenericReset+0x6e>
     a58:	88 85       	ldd	r24, Y+8	; 0x08
     a5a:	88 23       	and	r24, r24
     a5c:	71 f0       	breq	.+28     	; 0xa7a <xQueueGenericReset+0x7a>
     a5e:	ce 01       	movw	r24, r28
     a60:	08 96       	adiw	r24, 0x08	; 8
     a62:	0e 94 2f 10 	call	0x205e	; 0x205e <xTaskRemoveFromEventList>
     a66:	88 23       	and	r24, r24
     a68:	41 f0       	breq	.+16     	; 0xa7a <xQueueGenericReset+0x7a>
     a6a:	3a de       	rcall	.-908    	; 0x6e0 <vPortYield>
     a6c:	06 c0       	rjmp	.+12     	; 0xa7a <xQueueGenericReset+0x7a>
     a6e:	ce 01       	movw	r24, r28
     a70:	08 96       	adiw	r24, 0x08	; 8
     a72:	68 dd       	rcall	.-1328   	; 0x544 <vListInitialise>
     a74:	ce 01       	movw	r24, r28
     a76:	43 96       	adiw	r24, 0x13	; 19
     a78:	65 dd       	rcall	.-1334   	; 0x544 <vListInitialise>
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	08 95       	ret

00000a86 <prvInitialiseNewQueue>:
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	f8 01       	movw	r30, r16
     a8c:	61 11       	cpse	r22, r1
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <prvInitialiseNewQueue+0x10>
     a90:	11 83       	std	Z+1, r17	; 0x01
     a92:	00 83       	st	Z, r16
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <prvInitialiseNewQueue+0x14>
     a96:	51 83       	std	Z+1, r21	; 0x01
     a98:	40 83       	st	Z, r20
     a9a:	87 8f       	std	Z+31, r24	; 0x1f
     a9c:	60 a3       	std	Z+32, r22	; 0x20
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	cf 01       	movw	r24, r30
     aa2:	ae df       	rcall	.-164    	; 0xa00 <xQueueGenericReset>
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	08 95       	ret

00000aaa <xQueueGenericCreate>:
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	f8 2e       	mov	r15, r24
     aba:	e6 2e       	mov	r14, r22
     abc:	d4 2e       	mov	r13, r20
     abe:	86 9f       	mul	r24, r22
     ac0:	c0 01       	movw	r24, r0
     ac2:	11 24       	eor	r1, r1
     ac4:	83 96       	adiw	r24, 0x23	; 35
     ac6:	58 dc       	rcall	.-1872   	; 0x378 <pvPortMalloc>
     ac8:	ec 01       	movw	r28, r24
     aca:	00 97       	sbiw	r24, 0x00	; 0
     acc:	41 f0       	breq	.+16     	; 0xade <xQueueGenericCreate+0x34>
     ace:	8c 01       	movw	r16, r24
     ad0:	2d 2d       	mov	r18, r13
     ad2:	ac 01       	movw	r20, r24
     ad4:	4d 5d       	subi	r20, 0xDD	; 221
     ad6:	5f 4f       	sbci	r21, 0xFF	; 255
     ad8:	6e 2d       	mov	r22, r14
     ada:	8f 2d       	mov	r24, r15
     adc:	d4 df       	rcall	.-88     	; 0xa86 <prvInitialiseNewQueue>
     ade:	ce 01       	movw	r24, r28
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	ef 90       	pop	r14
     aec:	df 90       	pop	r13
     aee:	08 95       	ret

00000af0 <xQueueGenericSend>:
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	29 97       	sbiw	r28, 0x09	; 9
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	7c 01       	movw	r14, r24
     b12:	6b 01       	movw	r12, r22
     b14:	2e 83       	std	Y+6, r18	; 0x06
     b16:	3f 83       	std	Y+7, r19	; 0x07
     b18:	48 87       	std	Y+8, r20	; 0x08
     b1a:	59 87       	std	Y+9, r21	; 0x09
     b1c:	10 e0       	ldi	r17, 0x00	; 0
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	0f 92       	push	r0
     b24:	f7 01       	movw	r30, r14
     b26:	96 8d       	ldd	r25, Z+30	; 0x1e
     b28:	87 8d       	ldd	r24, Z+31	; 0x1f
     b2a:	98 17       	cp	r25, r24
     b2c:	10 f0       	brcs	.+4      	; 0xb32 <xQueueGenericSend+0x42>
     b2e:	02 30       	cpi	r16, 0x02	; 2
     b30:	b1 f4       	brne	.+44     	; 0xb5e <xQueueGenericSend+0x6e>
     b32:	40 2f       	mov	r20, r16
     b34:	b6 01       	movw	r22, r12
     b36:	c7 01       	movw	r24, r14
     b38:	b6 de       	rcall	.-660    	; 0x8a6 <prvCopyDataToQueue>
     b3a:	f7 01       	movw	r30, r14
     b3c:	93 89       	ldd	r25, Z+19	; 0x13
     b3e:	99 23       	and	r25, r25
     b40:	41 f0       	breq	.+16     	; 0xb52 <xQueueGenericSend+0x62>
     b42:	c7 01       	movw	r24, r14
     b44:	43 96       	adiw	r24, 0x13	; 19
     b46:	0e 94 2f 10 	call	0x205e	; 0x205e <xTaskRemoveFromEventList>
     b4a:	88 23       	and	r24, r24
     b4c:	21 f0       	breq	.+8      	; 0xb56 <xQueueGenericSend+0x66>
     b4e:	c8 dd       	rcall	.-1136   	; 0x6e0 <vPortYield>
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <xQueueGenericSend+0x66>
     b52:	81 11       	cpse	r24, r1
     b54:	c5 dd       	rcall	.-1142   	; 0x6e0 <vPortYield>
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	4c c0       	rjmp	.+152    	; 0xbf6 <xQueueGenericSend+0x106>
     b5e:	8e 81       	ldd	r24, Y+6	; 0x06
     b60:	9f 81       	ldd	r25, Y+7	; 0x07
     b62:	a8 85       	ldd	r26, Y+8	; 0x08
     b64:	b9 85       	ldd	r27, Y+9	; 0x09
     b66:	89 2b       	or	r24, r25
     b68:	8a 2b       	or	r24, r26
     b6a:	8b 2b       	or	r24, r27
     b6c:	21 f4       	brne	.+8      	; 0xb76 <xQueueGenericSend+0x86>
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	40 c0       	rjmp	.+128    	; 0xbf6 <xQueueGenericSend+0x106>
     b76:	11 11       	cpse	r17, r1
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <xQueueGenericSend+0x94>
     b7a:	ce 01       	movw	r24, r28
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <vTaskInternalSetTimeOutState>
     b82:	11 e0       	ldi	r17, 0x01	; 1
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	10 d7       	rcall	.+3616   	; 0x19aa <vTaskSuspendAll>
     b8a:	0f b6       	in	r0, 0x3f	; 63
     b8c:	f8 94       	cli
     b8e:	0f 92       	push	r0
     b90:	f7 01       	movw	r30, r14
     b92:	81 a1       	ldd	r24, Z+33	; 0x21
     b94:	8f 3f       	cpi	r24, 0xFF	; 255
     b96:	09 f4       	brne	.+2      	; 0xb9a <xQueueGenericSend+0xaa>
     b98:	11 a2       	std	Z+33, r1	; 0x21
     b9a:	f7 01       	movw	r30, r14
     b9c:	82 a1       	ldd	r24, Z+34	; 0x22
     b9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ba0:	09 f4       	brne	.+2      	; 0xba4 <xQueueGenericSend+0xb4>
     ba2:	12 a2       	std	Z+34, r1	; 0x22
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	be 01       	movw	r22, r28
     baa:	6a 5f       	subi	r22, 0xFA	; 250
     bac:	7f 4f       	sbci	r23, 0xFF	; 255
     bae:	ce 01       	movw	r24, r28
     bb0:	01 96       	adiw	r24, 0x01	; 1
     bb2:	0e 94 05 11 	call	0x220a	; 0x220a <xTaskCheckForTimeOut>
     bb6:	81 11       	cpse	r24, r1
     bb8:	19 c0       	rjmp	.+50     	; 0xbec <xQueueGenericSend+0xfc>
     bba:	c7 01       	movw	r24, r14
     bbc:	66 de       	rcall	.-820    	; 0x88a <prvIsQueueFull>
     bbe:	88 23       	and	r24, r24
     bc0:	81 f0       	breq	.+32     	; 0xbe2 <xQueueGenericSend+0xf2>
     bc2:	4e 81       	ldd	r20, Y+6	; 0x06
     bc4:	5f 81       	ldd	r21, Y+7	; 0x07
     bc6:	68 85       	ldd	r22, Y+8	; 0x08
     bc8:	79 85       	ldd	r23, Y+9	; 0x09
     bca:	c7 01       	movw	r24, r14
     bcc:	08 96       	adiw	r24, 0x08	; 8
     bce:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <vTaskPlaceOnEventList>
     bd2:	c7 01       	movw	r24, r14
     bd4:	e1 de       	rcall	.-574    	; 0x998 <prvUnlockQueue>
     bd6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     bda:	81 11       	cpse	r24, r1
     bdc:	a0 cf       	rjmp	.-192    	; 0xb1e <xQueueGenericSend+0x2e>
     bde:	80 dd       	rcall	.-1280   	; 0x6e0 <vPortYield>
     be0:	9e cf       	rjmp	.-196    	; 0xb1e <xQueueGenericSend+0x2e>
     be2:	c7 01       	movw	r24, r14
     be4:	d9 de       	rcall	.-590    	; 0x998 <prvUnlockQueue>
     be6:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     bea:	99 cf       	rjmp	.-206    	; 0xb1e <xQueueGenericSend+0x2e>
     bec:	c7 01       	movw	r24, r14
     bee:	d4 de       	rcall	.-600    	; 0x998 <prvUnlockQueue>
     bf0:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	29 96       	adiw	r28, 0x09	; 9
     bf8:	0f b6       	in	r0, 0x3f	; 63
     bfa:	f8 94       	cli
     bfc:	de bf       	out	0x3e, r29	; 62
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	cd bf       	out	0x3d, r28	; 61
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	df 90       	pop	r13
     c10:	cf 90       	pop	r12
     c12:	08 95       	ret

00000c14 <prvInitialiseMutex>:
     c14:	0f 93       	push	r16
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	69 f0       	breq	.+26     	; 0xc34 <prvInitialiseMutex+0x20>
     c1a:	fc 01       	movw	r30, r24
     c1c:	15 82       	std	Z+5, r1	; 0x05
     c1e:	14 82       	std	Z+4, r1	; 0x04
     c20:	11 82       	std	Z+1, r1	; 0x01
     c22:	10 82       	st	Z, r1
     c24:	16 82       	std	Z+6, r1	; 0x06
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	a9 01       	movw	r20, r18
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	5e df       	rcall	.-324    	; 0xaf0 <xQueueGenericSend>
     c34:	0f 91       	pop	r16
     c36:	08 95       	ret

00000c38 <xQueueCreateMutex>:
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	48 2f       	mov	r20, r24
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	33 df       	rcall	.-410    	; 0xaaa <xQueueGenericCreate>
     c44:	ec 01       	movw	r28, r24
     c46:	e6 df       	rcall	.-52     	; 0xc14 <prvInitialiseMutex>
     c48:	ce 01       	movw	r24, r28
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <xQueueGenericSendFromISR>:
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	1f 93       	push	r17
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	8a 01       	movw	r16, r20
     c5e:	fc 01       	movw	r30, r24
     c60:	56 8d       	ldd	r21, Z+30	; 0x1e
     c62:	37 8d       	ldd	r19, Z+31	; 0x1f
     c64:	53 17       	cp	r21, r19
     c66:	10 f0       	brcs	.+4      	; 0xc6c <xQueueGenericSendFromISR+0x1c>
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	f9 f4       	brne	.+62     	; 0xcaa <xQueueGenericSendFromISR+0x5a>
     c6c:	42 2f       	mov	r20, r18
     c6e:	78 01       	movw	r14, r16
     c70:	ec 01       	movw	r28, r24
     c72:	1a a1       	ldd	r17, Y+34	; 0x22
     c74:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c76:	ce 01       	movw	r24, r28
     c78:	16 de       	rcall	.-980    	; 0x8a6 <prvCopyDataToQueue>
     c7a:	1f 3f       	cpi	r17, 0xFF	; 255
     c7c:	81 f4       	brne	.+32     	; 0xc9e <xQueueGenericSendFromISR+0x4e>
     c7e:	8b 89       	ldd	r24, Y+19	; 0x13
     c80:	88 23       	and	r24, r24
     c82:	a9 f0       	breq	.+42     	; 0xcae <xQueueGenericSendFromISR+0x5e>
     c84:	ce 01       	movw	r24, r28
     c86:	43 96       	adiw	r24, 0x13	; 19
     c88:	0e 94 2f 10 	call	0x205e	; 0x205e <xTaskRemoveFromEventList>
     c8c:	88 23       	and	r24, r24
     c8e:	89 f0       	breq	.+34     	; 0xcb2 <xQueueGenericSendFromISR+0x62>
     c90:	e1 14       	cp	r14, r1
     c92:	f1 04       	cpc	r15, r1
     c94:	81 f0       	breq	.+32     	; 0xcb6 <xQueueGenericSendFromISR+0x66>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	f7 01       	movw	r30, r14
     c9a:	80 83       	st	Z, r24
     c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <xQueueGenericSendFromISR+0x68>
     c9e:	ff 24       	eor	r15, r15
     ca0:	f3 94       	inc	r15
     ca2:	f1 0e       	add	r15, r17
     ca4:	fa a2       	std	Y+34, r15	; 0x22
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	07 c0       	rjmp	.+14     	; 0xcb8 <xQueueGenericSendFromISR+0x68>
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	05 c0       	rjmp	.+10     	; 0xcb8 <xQueueGenericSendFromISR+0x68>
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	03 c0       	rjmp	.+6      	; 0xcb8 <xQueueGenericSendFromISR+0x68>
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	01 c0       	rjmp	.+2      	; 0xcb8 <xQueueGenericSendFromISR+0x68>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	08 95       	ret

00000cc6 <xQueueReceive>:
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	29 97       	sbiw	r28, 0x09	; 9
     cdc:	0f b6       	in	r0, 0x3f	; 63
     cde:	f8 94       	cli
     ce0:	de bf       	out	0x3e, r29	; 62
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	cd bf       	out	0x3d, r28	; 61
     ce6:	8c 01       	movw	r16, r24
     ce8:	6b 01       	movw	r12, r22
     cea:	2e 83       	std	Y+6, r18	; 0x06
     cec:	3f 83       	std	Y+7, r19	; 0x07
     cee:	48 87       	std	Y+8, r20	; 0x08
     cf0:	59 87       	std	Y+9, r21	; 0x09
     cf2:	e1 2c       	mov	r14, r1
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	0f 92       	push	r0
     cfa:	f8 01       	movw	r30, r16
     cfc:	f6 8c       	ldd	r15, Z+30	; 0x1e
     cfe:	ff 20       	and	r15, r15
     d00:	99 f0       	breq	.+38     	; 0xd28 <xQueueReceive+0x62>
     d02:	b6 01       	movw	r22, r12
     d04:	c8 01       	movw	r24, r16
     d06:	2e de       	rcall	.-932    	; 0x964 <prvCopyDataFromQueue>
     d08:	fa 94       	dec	r15
     d0a:	f8 01       	movw	r30, r16
     d0c:	f6 8e       	std	Z+30, r15	; 0x1e
     d0e:	80 85       	ldd	r24, Z+8	; 0x08
     d10:	88 23       	and	r24, r24
     d12:	31 f0       	breq	.+12     	; 0xd20 <xQueueReceive+0x5a>
     d14:	c8 01       	movw	r24, r16
     d16:	08 96       	adiw	r24, 0x08	; 8
     d18:	0e 94 2f 10 	call	0x205e	; 0x205e <xTaskRemoveFromEventList>
     d1c:	81 11       	cpse	r24, r1
     d1e:	e0 dc       	rcall	.-1600   	; 0x6e0 <vPortYield>
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	4f c0       	rjmp	.+158    	; 0xdc6 <xQueueReceive+0x100>
     d28:	8e 81       	ldd	r24, Y+6	; 0x06
     d2a:	9f 81       	ldd	r25, Y+7	; 0x07
     d2c:	a8 85       	ldd	r26, Y+8	; 0x08
     d2e:	b9 85       	ldd	r27, Y+9	; 0x09
     d30:	89 2b       	or	r24, r25
     d32:	8a 2b       	or	r24, r26
     d34:	8b 2b       	or	r24, r27
     d36:	21 f4       	brne	.+8      	; 0xd40 <xQueueReceive+0x7a>
     d38:	0f 90       	pop	r0
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	43 c0       	rjmp	.+134    	; 0xdc6 <xQueueReceive+0x100>
     d40:	e1 10       	cpse	r14, r1
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <xQueueReceive+0x8a>
     d44:	ce 01       	movw	r24, r28
     d46:	01 96       	adiw	r24, 0x01	; 1
     d48:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <vTaskInternalSetTimeOutState>
     d4c:	ee 24       	eor	r14, r14
     d4e:	e3 94       	inc	r14
     d50:	0f 90       	pop	r0
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	2a d6       	rcall	.+3156   	; 0x19aa <vTaskSuspendAll>
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	0f 92       	push	r0
     d5c:	f8 01       	movw	r30, r16
     d5e:	81 a1       	ldd	r24, Z+33	; 0x21
     d60:	8f 3f       	cpi	r24, 0xFF	; 255
     d62:	09 f4       	brne	.+2      	; 0xd66 <xQueueReceive+0xa0>
     d64:	11 a2       	std	Z+33, r1	; 0x21
     d66:	f8 01       	movw	r30, r16
     d68:	82 a1       	ldd	r24, Z+34	; 0x22
     d6a:	8f 3f       	cpi	r24, 0xFF	; 255
     d6c:	09 f4       	brne	.+2      	; 0xd70 <xQueueReceive+0xaa>
     d6e:	12 a2       	std	Z+34, r1	; 0x22
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	be 01       	movw	r22, r28
     d76:	6a 5f       	subi	r22, 0xFA	; 250
     d78:	7f 4f       	sbci	r23, 0xFF	; 255
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	0e 94 05 11 	call	0x220a	; 0x220a <xTaskCheckForTimeOut>
     d82:	81 11       	cpse	r24, r1
     d84:	17 c0       	rjmp	.+46     	; 0xdb4 <xQueueReceive+0xee>
     d86:	c8 01       	movw	r24, r16
     d88:	73 dd       	rcall	.-1306   	; 0x870 <prvIsQueueEmpty>
     d8a:	88 23       	and	r24, r24
     d8c:	79 f0       	breq	.+30     	; 0xdac <xQueueReceive+0xe6>
     d8e:	4e 81       	ldd	r20, Y+6	; 0x06
     d90:	5f 81       	ldd	r21, Y+7	; 0x07
     d92:	68 85       	ldd	r22, Y+8	; 0x08
     d94:	79 85       	ldd	r23, Y+9	; 0x09
     d96:	c8 01       	movw	r24, r16
     d98:	43 96       	adiw	r24, 0x13	; 19
     d9a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <vTaskPlaceOnEventList>
     d9e:	c8 01       	movw	r24, r16
     da0:	fb dd       	rcall	.-1034   	; 0x998 <prvUnlockQueue>
     da2:	43 d7       	rcall	.+3718   	; 0x1c2a <xTaskResumeAll>
     da4:	81 11       	cpse	r24, r1
     da6:	a6 cf       	rjmp	.-180    	; 0xcf4 <xQueueReceive+0x2e>
     da8:	9b dc       	rcall	.-1738   	; 0x6e0 <vPortYield>
     daa:	a4 cf       	rjmp	.-184    	; 0xcf4 <xQueueReceive+0x2e>
     dac:	c8 01       	movw	r24, r16
     dae:	f4 dd       	rcall	.-1048   	; 0x998 <prvUnlockQueue>
     db0:	3c d7       	rcall	.+3704   	; 0x1c2a <xTaskResumeAll>
     db2:	a0 cf       	rjmp	.-192    	; 0xcf4 <xQueueReceive+0x2e>
     db4:	c8 01       	movw	r24, r16
     db6:	f0 dd       	rcall	.-1056   	; 0x998 <prvUnlockQueue>
     db8:	38 d7       	rcall	.+3696   	; 0x1c2a <xTaskResumeAll>
     dba:	c8 01       	movw	r24, r16
     dbc:	59 dd       	rcall	.-1358   	; 0x870 <prvIsQueueEmpty>
     dbe:	88 23       	and	r24, r24
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <xQueueReceive+0xfe>
     dc2:	98 cf       	rjmp	.-208    	; 0xcf4 <xQueueReceive+0x2e>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	29 96       	adiw	r28, 0x09	; 9
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	1f 91       	pop	r17
     dd8:	0f 91       	pop	r16
     dda:	ff 90       	pop	r15
     ddc:	ef 90       	pop	r14
     dde:	df 90       	pop	r13
     de0:	cf 90       	pop	r12
     de2:	08 95       	ret

00000de4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	0f 92       	push	r0
     df0:	89 a1       	ldd	r24, Y+33	; 0x21
     df2:	8f 3f       	cpi	r24, 0xFF	; 255
     df4:	09 f4       	brne	.+2      	; 0xdf8 <vQueueWaitForMessageRestricted+0x14>
     df6:	19 a2       	std	Y+33, r1	; 0x21
     df8:	8a a1       	ldd	r24, Y+34	; 0x22
     dfa:	8f 3f       	cpi	r24, 0xFF	; 255
     dfc:	09 f4       	brne	.+2      	; 0xe00 <vQueueWaitForMessageRestricted+0x1c>
     dfe:	1a a2       	std	Y+34, r1	; 0x22
     e00:	0f 90       	pop	r0
     e02:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     e04:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e06:	81 11       	cpse	r24, r1
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     e0a:	ce 01       	movw	r24, r28
     e0c:	43 96       	adiw	r24, 0x13	; 19
     e0e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     e12:	ce 01       	movw	r24, r28
     e14:	c1 dd       	rcall	.-1150   	; 0x998 <prvUnlockQueue>
    }
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     e1c:	fc 01       	movw	r30, r24
     e1e:	44 81       	ldd	r20, Z+4	; 0x04
     e20:	55 81       	ldd	r21, Z+5	; 0x05
     e22:	22 81       	ldd	r18, Z+2	; 0x02
     e24:	33 81       	ldd	r19, Z+3	; 0x03
     e26:	24 0f       	add	r18, r20
     e28:	35 1f       	adc	r19, r21
     e2a:	80 81       	ld	r24, Z
     e2c:	91 81       	ldd	r25, Z+1	; 0x01
     e2e:	b9 01       	movw	r22, r18
     e30:	68 1b       	sub	r22, r24
     e32:	79 0b       	sbc	r23, r25
     e34:	cb 01       	movw	r24, r22
     e36:	64 17       	cp	r22, r20
     e38:	75 07       	cpc	r23, r21
     e3a:	10 f0       	brcs	.+4      	; 0xe40 <prvBytesInBuffer+0x24>
     e3c:	84 1b       	sub	r24, r20
     e3e:	95 0b       	sbc	r25, r21
     e40:	08 95       	ret

00000e42 <prvInitialiseNewStreamBuffer>:
     e42:	0f 93       	push	r16
     e44:	fc 01       	movw	r30, r24
     e46:	8f e0       	ldi	r24, 0x0F	; 15
     e48:	df 01       	movw	r26, r30
     e4a:	1d 92       	st	X+, r1
     e4c:	8a 95       	dec	r24
     e4e:	e9 f7       	brne	.-6      	; 0xe4a <prvInitialiseNewStreamBuffer+0x8>
     e50:	75 87       	std	Z+13, r23	; 0x0d
     e52:	64 87       	std	Z+12, r22	; 0x0c
     e54:	55 83       	std	Z+5, r21	; 0x05
     e56:	44 83       	std	Z+4, r20	; 0x04
     e58:	37 83       	std	Z+7, r19	; 0x07
     e5a:	26 83       	std	Z+6, r18	; 0x06
     e5c:	06 87       	std	Z+14, r16	; 0x0e
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <prvWriteBytesToBuffer>:
     e62:	af 92       	push	r10
     e64:	bf 92       	push	r11
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ef 92       	push	r14
     e6c:	ff 92       	push	r15
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
     e76:	6c 01       	movw	r12, r24
     e78:	5b 01       	movw	r10, r22
     e7a:	7a 01       	movw	r14, r20
     e7c:	fc 01       	movw	r30, r24
     e7e:	c2 81       	ldd	r28, Z+2	; 0x02
     e80:	d3 81       	ldd	r29, Z+3	; 0x03
     e82:	04 81       	ldd	r16, Z+4	; 0x04
     e84:	15 81       	ldd	r17, Z+5	; 0x05
     e86:	0c 1b       	sub	r16, r28
     e88:	1d 0b       	sbc	r17, r29
     e8a:	40 17       	cp	r20, r16
     e8c:	51 07       	cpc	r21, r17
     e8e:	08 f4       	brcc	.+2      	; 0xe92 <prvWriteBytesToBuffer+0x30>
     e90:	8a 01       	movw	r16, r20
     e92:	f6 01       	movw	r30, r12
     e94:	84 85       	ldd	r24, Z+12	; 0x0c
     e96:	95 85       	ldd	r25, Z+13	; 0x0d
     e98:	a8 01       	movw	r20, r16
     e9a:	b5 01       	movw	r22, r10
     e9c:	8c 0f       	add	r24, r28
     e9e:	9d 1f       	adc	r25, r29
     ea0:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <memcpy>
     ea4:	0e 15       	cp	r16, r14
     ea6:	1f 05       	cpc	r17, r15
     ea8:	58 f4       	brcc	.+22     	; 0xec0 <prvWriteBytesToBuffer+0x5e>
     eaa:	a7 01       	movw	r20, r14
     eac:	40 1b       	sub	r20, r16
     eae:	51 0b       	sbc	r21, r17
     eb0:	b5 01       	movw	r22, r10
     eb2:	60 0f       	add	r22, r16
     eb4:	71 1f       	adc	r23, r17
     eb6:	f6 01       	movw	r30, r12
     eb8:	84 85       	ldd	r24, Z+12	; 0x0c
     eba:	95 85       	ldd	r25, Z+13	; 0x0d
     ebc:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <memcpy>
     ec0:	ce 01       	movw	r24, r28
     ec2:	8e 0d       	add	r24, r14
     ec4:	9f 1d       	adc	r25, r15
     ec6:	f6 01       	movw	r30, r12
     ec8:	24 81       	ldd	r18, Z+4	; 0x04
     eca:	35 81       	ldd	r19, Z+5	; 0x05
     ecc:	82 17       	cp	r24, r18
     ece:	93 07       	cpc	r25, r19
     ed0:	10 f0       	brcs	.+4      	; 0xed6 <prvWriteBytesToBuffer+0x74>
     ed2:	82 1b       	sub	r24, r18
     ed4:	93 0b       	sbc	r25, r19
     ed6:	f6 01       	movw	r30, r12
     ed8:	93 83       	std	Z+3, r25	; 0x03
     eda:	82 83       	std	Z+2, r24	; 0x02
     edc:	c7 01       	movw	r24, r14
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	1f 91       	pop	r17
     ee4:	0f 91       	pop	r16
     ee6:	ff 90       	pop	r15
     ee8:	ef 90       	pop	r14
     eea:	df 90       	pop	r13
     eec:	cf 90       	pop	r12
     eee:	bf 90       	pop	r11
     ef0:	af 90       	pop	r10
     ef2:	08 95       	ret

00000ef4 <prvWriteMessageToBuffer>:
     ef4:	cf 92       	push	r12
     ef6:	df 92       	push	r13
     ef8:	ef 92       	push	r14
     efa:	ff 92       	push	r15
     efc:	0f 93       	push	r16
     efe:	1f 93       	push	r17
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	1f 92       	push	r1
     f06:	1f 92       	push	r1
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	7c 01       	movw	r14, r24
     f0e:	6b 01       	movw	r12, r22
     f10:	5a 83       	std	Y+2, r21	; 0x02
     f12:	49 83       	std	Y+1, r20	; 0x01
     f14:	21 15       	cp	r18, r1
     f16:	31 05       	cpc	r19, r1
     f18:	c1 f0       	breq	.+48     	; 0xf4a <prvWriteMessageToBuffer+0x56>
     f1a:	fc 01       	movw	r30, r24
     f1c:	86 85       	ldd	r24, Z+14	; 0x0e
     f1e:	80 fd       	sbrc	r24, 0
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <prvWriteMessageToBuffer+0x3e>
     f22:	42 17       	cp	r20, r18
     f24:	53 07       	cpc	r21, r19
     f26:	08 f4       	brcc	.+2      	; 0xf2a <prvWriteMessageToBuffer+0x36>
     f28:	9a 01       	movw	r18, r20
     f2a:	3a 83       	std	Y+2, r19	; 0x02
     f2c:	29 83       	std	Y+1, r18	; 0x01
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0f c0       	rjmp	.+30     	; 0xf50 <prvWriteMessageToBuffer+0x5c>
     f32:	20 17       	cp	r18, r16
     f34:	31 07       	cpc	r19, r17
     f36:	58 f0       	brcs	.+22     	; 0xf4e <prvWriteMessageToBuffer+0x5a>
     f38:	42 e0       	ldi	r20, 0x02	; 2
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	be 01       	movw	r22, r28
     f3e:	6f 5f       	subi	r22, 0xFF	; 255
     f40:	7f 4f       	sbci	r23, 0xFF	; 255
     f42:	c7 01       	movw	r24, r14
     f44:	8e df       	rcall	.-228    	; 0xe62 <prvWriteBytesToBuffer>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <prvWriteMessageToBuffer+0x5c>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <prvWriteMessageToBuffer+0x5c>
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	88 23       	and	r24, r24
     f52:	31 f0       	breq	.+12     	; 0xf60 <prvWriteMessageToBuffer+0x6c>
     f54:	49 81       	ldd	r20, Y+1	; 0x01
     f56:	5a 81       	ldd	r21, Y+2	; 0x02
     f58:	b6 01       	movw	r22, r12
     f5a:	c7 01       	movw	r24, r14
     f5c:	82 df       	rcall	.-252    	; 0xe62 <prvWriteBytesToBuffer>
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <prvWriteMessageToBuffer+0x70>
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	08 95       	ret

00000f7a <prvReadBytesFromBuffer>:
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	7c 01       	movw	r14, r24
     f90:	5b 01       	movw	r10, r22
     f92:	e9 01       	movw	r28, r18
     f94:	42 17       	cp	r20, r18
     f96:	53 07       	cpc	r21, r19
     f98:	08 f4       	brcc	.+2      	; 0xf9c <prvReadBytesFromBuffer+0x22>
     f9a:	ea 01       	movw	r28, r20
     f9c:	20 97       	sbiw	r28, 0x00	; 0
     f9e:	81 f1       	breq	.+96     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fa0:	f7 01       	movw	r30, r14
     fa2:	00 81       	ld	r16, Z
     fa4:	11 81       	ldd	r17, Z+1	; 0x01
     fa6:	84 81       	ldd	r24, Z+4	; 0x04
     fa8:	95 81       	ldd	r25, Z+5	; 0x05
     faa:	80 1b       	sub	r24, r16
     fac:	91 0b       	sbc	r25, r17
     fae:	6e 01       	movw	r12, r28
     fb0:	8c 17       	cp	r24, r28
     fb2:	9d 07       	cpc	r25, r29
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <prvReadBytesFromBuffer+0x3e>
     fb6:	6c 01       	movw	r12, r24
     fb8:	f7 01       	movw	r30, r14
     fba:	64 85       	ldd	r22, Z+12	; 0x0c
     fbc:	75 85       	ldd	r23, Z+13	; 0x0d
     fbe:	60 0f       	add	r22, r16
     fc0:	71 1f       	adc	r23, r17
     fc2:	a6 01       	movw	r20, r12
     fc4:	c5 01       	movw	r24, r10
     fc6:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <memcpy>
     fca:	cc 16       	cp	r12, r28
     fcc:	dd 06       	cpc	r13, r29
     fce:	58 f4       	brcc	.+22     	; 0xfe6 <prvReadBytesFromBuffer+0x6c>
     fd0:	ae 01       	movw	r20, r28
     fd2:	4c 19       	sub	r20, r12
     fd4:	5d 09       	sbc	r21, r13
     fd6:	f7 01       	movw	r30, r14
     fd8:	64 85       	ldd	r22, Z+12	; 0x0c
     fda:	75 85       	ldd	r23, Z+13	; 0x0d
     fdc:	c5 01       	movw	r24, r10
     fde:	8c 0d       	add	r24, r12
     fe0:	9d 1d       	adc	r25, r13
     fe2:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <memcpy>
     fe6:	0c 0f       	add	r16, r28
     fe8:	1d 1f       	adc	r17, r29
     fea:	f7 01       	movw	r30, r14
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	95 81       	ldd	r25, Z+5	; 0x05
     ff0:	08 17       	cp	r16, r24
     ff2:	19 07       	cpc	r17, r25
     ff4:	10 f0       	brcs	.+4      	; 0xffa <prvReadBytesFromBuffer+0x80>
     ff6:	08 1b       	sub	r16, r24
     ff8:	19 0b       	sbc	r17, r25
     ffa:	f7 01       	movw	r30, r14
     ffc:	11 83       	std	Z+1, r17	; 0x01
     ffe:	00 83       	st	Z, r16
    1000:	ce 01       	movw	r24, r28
    1002:	df 91       	pop	r29
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	08 95       	ret

00001018 <prvReadMessageFromBuffer>:
    1018:	6f 92       	push	r6
    101a:	7f 92       	push	r7
    101c:	8f 92       	push	r8
    101e:	9f 92       	push	r9
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1f 92       	push	r1
    1036:	1f 92       	push	r1
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	6c 01       	movw	r12, r24
    103e:	4b 01       	movw	r8, r22
    1040:	5a 01       	movw	r10, r20
    1042:	79 01       	movw	r14, r18
    1044:	01 15       	cp	r16, r1
    1046:	11 05       	cpc	r17, r1
    1048:	b1 f0       	breq	.+44     	; 0x1076 <prvReadMessageFromBuffer+0x5e>
    104a:	fc 01       	movw	r30, r24
    104c:	60 80       	ld	r6, Z
    104e:	71 80       	ldd	r7, Z+1	; 0x01
    1050:	a8 01       	movw	r20, r16
    1052:	be 01       	movw	r22, r28
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	90 df       	rcall	.-224    	; 0xf7a <prvReadBytesFromBuffer>
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	e0 1a       	sub	r14, r16
    1060:	f1 0a       	sbc	r15, r17
    1062:	a8 16       	cp	r10, r24
    1064:	b9 06       	cpc	r11, r25
    1066:	30 f4       	brcc	.+12     	; 0x1074 <prvReadMessageFromBuffer+0x5c>
    1068:	f6 01       	movw	r30, r12
    106a:	71 82       	std	Z+1, r7	; 0x01
    106c:	60 82       	st	Z, r6
    106e:	a1 2c       	mov	r10, r1
    1070:	b1 2c       	mov	r11, r1
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <prvReadMessageFromBuffer+0x5e>
    1074:	5c 01       	movw	r10, r24
    1076:	97 01       	movw	r18, r14
    1078:	a5 01       	movw	r20, r10
    107a:	b4 01       	movw	r22, r8
    107c:	c6 01       	movw	r24, r12
    107e:	7d df       	rcall	.-262    	; 0xf7a <prvReadBytesFromBuffer>
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	bf 90       	pop	r11
    1096:	af 90       	pop	r10
    1098:	9f 90       	pop	r9
    109a:	8f 90       	pop	r8
    109c:	7f 90       	pop	r7
    109e:	6f 90       	pop	r6
    10a0:	08 95       	ret

000010a2 <xStreamBufferGenericCreate>:
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	6b 01       	movw	r12, r22
    10b4:	41 30       	cpi	r20, 0x01	; 1
    10b6:	11 f4       	brne	.+4      	; 0x10bc <xStreamBufferGenericCreate+0x1a>
    10b8:	01 e0       	ldi	r16, 0x01	; 1
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <xStreamBufferGenericCreate+0x1c>
    10bc:	00 e0       	ldi	r16, 0x00	; 0
    10be:	c1 14       	cp	r12, r1
    10c0:	d1 04       	cpc	r13, r1
    10c2:	19 f4       	brne	.+6      	; 0x10ca <xStreamBufferGenericCreate+0x28>
    10c4:	cc 24       	eor	r12, r12
    10c6:	c3 94       	inc	r12
    10c8:	d1 2c       	mov	r13, r1
    10ca:	ce 01       	movw	r24, r28
    10cc:	40 96       	adiw	r24, 0x10	; 16
    10ce:	c8 17       	cp	r28, r24
    10d0:	d9 07       	cpc	r29, r25
    10d2:	20 f4       	brcc	.+8      	; 0x10dc <xStreamBufferGenericCreate+0x3a>
    10d4:	21 96       	adiw	r28, 0x01	; 1
    10d6:	50 d9       	rcall	.-3424   	; 0x378 <pvPortMalloc>
    10d8:	7c 01       	movw	r14, r24
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <xStreamBufferGenericCreate+0x3e>
    10dc:	e1 2c       	mov	r14, r1
    10de:	f1 2c       	mov	r15, r1
    10e0:	e1 14       	cp	r14, r1
    10e2:	f1 04       	cpc	r15, r1
    10e4:	39 f0       	breq	.+14     	; 0x10f4 <xStreamBufferGenericCreate+0x52>
    10e6:	96 01       	movw	r18, r12
    10e8:	ae 01       	movw	r20, r28
    10ea:	b7 01       	movw	r22, r14
    10ec:	61 5f       	subi	r22, 0xF1	; 241
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	c7 01       	movw	r24, r14
    10f2:	a7 de       	rcall	.-690    	; 0xe42 <prvInitialiseNewStreamBuffer>
    10f4:	c7 01       	movw	r24, r14
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	df 90       	pop	r13
    1102:	cf 90       	pop	r12
    1104:	08 95       	ret

00001106 <xStreamBufferReset>:
    1106:	0f 93       	push	r16
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	0f 92       	push	r0
    110e:	fc 01       	movw	r30, r24
    1110:	20 85       	ldd	r18, Z+8	; 0x08
    1112:	31 85       	ldd	r19, Z+9	; 0x09
    1114:	23 2b       	or	r18, r19
    1116:	71 f4       	brne	.+28     	; 0x1134 <xStreamBufferReset+0x2e>
    1118:	22 85       	ldd	r18, Z+10	; 0x0a
    111a:	33 85       	ldd	r19, Z+11	; 0x0b
    111c:	23 2b       	or	r18, r19
    111e:	61 f4       	brne	.+24     	; 0x1138 <xStreamBufferReset+0x32>
    1120:	26 81       	ldd	r18, Z+6	; 0x06
    1122:	37 81       	ldd	r19, Z+7	; 0x07
    1124:	44 81       	ldd	r20, Z+4	; 0x04
    1126:	55 81       	ldd	r21, Z+5	; 0x05
    1128:	64 85       	ldd	r22, Z+12	; 0x0c
    112a:	75 85       	ldd	r23, Z+13	; 0x0d
    112c:	06 85       	ldd	r16, Z+14	; 0x0e
    112e:	89 de       	rcall	.-750    	; 0xe42 <prvInitialiseNewStreamBuffer>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	03 c0       	rjmp	.+6      	; 0x113a <xStreamBufferReset+0x34>
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	01 c0       	rjmp	.+2      	; 0x113a <xStreamBufferReset+0x34>
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	0f 90       	pop	r0
    113c:	0f be       	out	0x3f, r0	; 63
    113e:	0f 91       	pop	r16
    1140:	08 95       	ret

00001142 <xStreamBufferSpacesAvailable>:
    1142:	fc 01       	movw	r30, r24
    1144:	24 81       	ldd	r18, Z+4	; 0x04
    1146:	35 81       	ldd	r19, Z+5	; 0x05
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	42 81       	ldd	r20, Z+2	; 0x02
    1152:	53 81       	ldd	r21, Z+3	; 0x03
    1154:	84 1b       	sub	r24, r20
    1156:	95 0b       	sbc	r25, r21
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	82 17       	cp	r24, r18
    115c:	93 07       	cpc	r25, r19
    115e:	10 f0       	brcs	.+4      	; 0x1164 <xStreamBufferSpacesAvailable+0x22>
    1160:	82 1b       	sub	r24, r18
    1162:	93 0b       	sbc	r25, r19
    1164:	08 95       	ret

00001166 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1166:	2f 92       	push	r2
    1168:	3f 92       	push	r3
    116a:	4f 92       	push	r4
    116c:	5f 92       	push	r5
    116e:	6f 92       	push	r6
    1170:	7f 92       	push	r7
    1172:	8f 92       	push	r8
    1174:	9f 92       	push	r9
    1176:	af 92       	push	r10
    1178:	bf 92       	push	r11
    117a:	cf 92       	push	r12
    117c:	df 92       	push	r13
    117e:	ef 92       	push	r14
    1180:	ff 92       	push	r15
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	2b 97       	sbiw	r28, 0x0b	; 11
    1190:	0f b6       	in	r0, 0x3f	; 63
    1192:	f8 94       	cli
    1194:	de bf       	out	0x3e, r29	; 62
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	cd bf       	out	0x3d, r28	; 61
    119a:	4c 01       	movw	r8, r24
    119c:	7b 87       	std	Y+11, r23	; 0x0b
    119e:	6a 87       	std	Y+10, r22	; 0x0a
    11a0:	1a 01       	movw	r2, r20
    11a2:	0e 83       	std	Y+6, r16	; 0x06
    11a4:	1f 83       	std	Y+7, r17	; 0x07
    11a6:	28 87       	std	Y+8, r18	; 0x08
    11a8:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    11aa:	fc 01       	movw	r30, r24
    11ac:	84 81       	ldd	r24, Z+4	; 0x04
    11ae:	95 81       	ldd	r25, Z+5	; 0x05
    11b0:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    11b2:	26 85       	ldd	r18, Z+14	; 0x0e
    11b4:	20 ff       	sbrs	r18, 0
    11b6:	0c c0       	rjmp	.+24     	; 0x11d0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    11b8:	2a 01       	movw	r4, r20
    11ba:	f2 e0       	ldi	r31, 0x02	; 2
    11bc:	4f 0e       	add	r4, r31
    11be:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    11c0:	84 15       	cp	r24, r4
    11c2:	95 05       	cpc	r25, r5
    11c4:	58 f4       	brcc	.+22     	; 0x11dc <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    11c6:	1e 82       	std	Y+6, r1	; 0x06
    11c8:	1f 82       	std	Y+7, r1	; 0x07
    11ca:	18 86       	std	Y+8, r1	; 0x08
    11cc:	19 86       	std	Y+9, r1	; 0x09
    11ce:	06 c0       	rjmp	.+12     	; 0x11dc <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    11d0:	84 17       	cp	r24, r20
    11d2:	95 07       	cpc	r25, r21
    11d4:	10 f0       	brcs	.+4      	; 0x11da <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    11d6:	2a 01       	movw	r4, r20
    11d8:	01 c0       	rjmp	.+2      	; 0x11dc <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    11da:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    11dc:	8e 81       	ldd	r24, Y+6	; 0x06
    11de:	9f 81       	ldd	r25, Y+7	; 0x07
    11e0:	a8 85       	ldd	r26, Y+8	; 0x08
    11e2:	b9 85       	ldd	r27, Y+9	; 0x09
    11e4:	89 2b       	or	r24, r25
    11e6:	8a 2b       	or	r24, r26
    11e8:	8b 2b       	or	r24, r27
    11ea:	09 f4       	brne	.+2      	; 0x11ee <xStreamBufferSend+0x88>
    11ec:	36 c0       	rjmp	.+108    	; 0x125a <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	e4 d7       	rcall	.+4040   	; 0x21bc <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    11fa:	c4 01       	movw	r24, r8
    11fc:	a2 df       	rcall	.-188    	; 0x1142 <xStreamBufferSpacesAvailable>
    11fe:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1200:	84 15       	cp	r24, r4
    1202:	95 05       	cpc	r25, r5
    1204:	38 f5       	brcc	.+78     	; 0x1254 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 9d 14 	call	0x293a	; 0x293a <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1210:	0e 94 6f 11 	call	0x22de	; 0x22de <xTaskGetCurrentTaskHandle>
    1214:	f4 01       	movw	r30, r8
    1216:	93 87       	std	Z+11, r25	; 0x0b
    1218:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    121a:	0f 90       	pop	r0
    121c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    121e:	ae 80       	ldd	r10, Y+6	; 0x06
    1220:	bf 80       	ldd	r11, Y+7	; 0x07
    1222:	c8 84       	ldd	r12, Y+8	; 0x08
    1224:	d9 84       	ldd	r13, Y+9	; 0x09
    1226:	e1 2c       	mov	r14, r1
    1228:	f1 2c       	mov	r15, r1
    122a:	00 e0       	ldi	r16, 0x00	; 0
    122c:	10 e0       	ldi	r17, 0x00	; 0
    122e:	98 01       	movw	r18, r16
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	ba 01       	movw	r22, r20
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 dd 11 	call	0x23ba	; 0x23ba <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    123c:	f4 01       	movw	r30, r8
    123e:	13 86       	std	Z+11, r1	; 0x0b
    1240:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1242:	be 01       	movw	r22, r28
    1244:	6a 5f       	subi	r22, 0xFA	; 250
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	de d7       	rcall	.+4028   	; 0x220a <xTaskCheckForTimeOut>
    124e:	88 23       	and	r24, r24
    1250:	89 f2       	breq	.-94     	; 0x11f4 <xStreamBufferSend+0x8e>
    1252:	05 c0       	rjmp	.+10     	; 0x125e <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
                    break;
    1258:	02 c0       	rjmp	.+4      	; 0x125e <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    125a:	61 2c       	mov	r6, r1
    125c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    125e:	61 14       	cp	r6, r1
    1260:	71 04       	cpc	r7, r1
    1262:	19 f4       	brne	.+6      	; 0x126a <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1264:	c4 01       	movw	r24, r8
    1266:	6d df       	rcall	.-294    	; 0x1142 <xStreamBufferSpacesAvailable>
    1268:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    126a:	82 01       	movw	r16, r4
    126c:	93 01       	movw	r18, r6
    126e:	a1 01       	movw	r20, r2
    1270:	6a 85       	ldd	r22, Y+10	; 0x0a
    1272:	7b 85       	ldd	r23, Y+11	; 0x0b
    1274:	c4 01       	movw	r24, r8
    1276:	3e de       	rcall	.-900    	; 0xef4 <prvWriteMessageToBuffer>
    1278:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    127a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    127c:	e9 f0       	breq	.+58     	; 0x12b8 <xStreamBufferSend+0x152>
    127e:	c4 01       	movw	r24, r8
    1280:	cd dd       	rcall	.-1126   	; 0xe1c <prvBytesInBuffer>
    1282:	f4 01       	movw	r30, r8
    1284:	26 81       	ldd	r18, Z+6	; 0x06
    1286:	37 81       	ldd	r19, Z+7	; 0x07
    1288:	82 17       	cp	r24, r18
    128a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    128c:	a8 f0       	brcs	.+42     	; 0x12b8 <xStreamBufferSend+0x152>
    128e:	8d d3       	rcall	.+1818   	; 0x19aa <vTaskSuspendAll>
    1290:	f4 01       	movw	r30, r8
    1292:	80 85       	ldd	r24, Z+8	; 0x08
    1294:	91 85       	ldd	r25, Z+9	; 0x09
    1296:	89 2b       	or	r24, r25
    1298:	71 f0       	breq	.+28     	; 0x12b6 <xStreamBufferSend+0x150>
    129a:	80 85       	ldd	r24, Z+8	; 0x08
    129c:	91 85       	ldd	r25, Z+9	; 0x09
    129e:	e1 2c       	mov	r14, r1
    12a0:	f1 2c       	mov	r15, r1
    12a2:	00 e0       	ldi	r16, 0x00	; 0
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	a9 01       	movw	r20, r18
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 84 12 	call	0x2508	; 0x2508 <xTaskGenericNotify>
    12b0:	f4 01       	movw	r30, r8
    12b2:	11 86       	std	Z+9, r1	; 0x09
    12b4:	10 86       	std	Z+8, r1	; 0x08
    12b6:	b9 d4       	rcall	.+2418   	; 0x1c2a <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    12b8:	c6 01       	movw	r24, r12
    12ba:	2b 96       	adiw	r28, 0x0b	; 11
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	df 91       	pop	r29
    12c8:	cf 91       	pop	r28
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	df 90       	pop	r13
    12d4:	cf 90       	pop	r12
    12d6:	bf 90       	pop	r11
    12d8:	af 90       	pop	r10
    12da:	9f 90       	pop	r9
    12dc:	8f 90       	pop	r8
    12de:	7f 90       	pop	r7
    12e0:	6f 90       	pop	r6
    12e2:	5f 90       	pop	r5
    12e4:	4f 90       	pop	r4
    12e6:	3f 90       	pop	r3
    12e8:	2f 90       	pop	r2
    12ea:	08 95       	ret

000012ec <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    12ec:	af 92       	push	r10
    12ee:	bf 92       	push	r11
    12f0:	cf 92       	push	r12
    12f2:	df 92       	push	r13
    12f4:	ef 92       	push	r14
    12f6:	ff 92       	push	r15
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ec 01       	movw	r28, r24
    1302:	7b 01       	movw	r14, r22
    1304:	5a 01       	movw	r10, r20
    1306:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1308:	8e 85       	ldd	r24, Y+14	; 0x0e
    130a:	80 ff       	sbrs	r24, 0
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    130e:	8a 01       	movw	r16, r20
    1310:	0e 5f       	subi	r16, 0xFE	; 254
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1316:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1318:	ce 01       	movw	r24, r28
    131a:	13 df       	rcall	.-474    	; 0x1142 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    131c:	9c 01       	movw	r18, r24
    131e:	a5 01       	movw	r20, r10
    1320:	b7 01       	movw	r22, r14
    1322:	ce 01       	movw	r24, r28
    1324:	e7 dd       	rcall	.-1074   	; 0xef4 <prvWriteMessageToBuffer>
    1326:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1328:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    132a:	c1 f0       	breq	.+48     	; 0x135c <xStreamBufferSendFromISR+0x70>
    132c:	ce 01       	movw	r24, r28
    132e:	76 dd       	rcall	.-1300   	; 0xe1c <prvBytesInBuffer>
    1330:	2e 81       	ldd	r18, Y+6	; 0x06
    1332:	3f 81       	ldd	r19, Y+7	; 0x07
    1334:	82 17       	cp	r24, r18
    1336:	93 07       	cpc	r25, r19
    1338:	88 f0       	brcs	.+34     	; 0x135c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    133a:	88 85       	ldd	r24, Y+8	; 0x08
    133c:	99 85       	ldd	r25, Y+9	; 0x09
    133e:	89 2b       	or	r24, r25
    1340:	69 f0       	breq	.+26     	; 0x135c <xStreamBufferSendFromISR+0x70>
    1342:	88 85       	ldd	r24, Y+8	; 0x08
    1344:	99 85       	ldd	r25, Y+9	; 0x09
    1346:	e1 2c       	mov	r14, r1
    1348:	f1 2c       	mov	r15, r1
    134a:	00 e0       	ldi	r16, 0x00	; 0
    134c:	20 e0       	ldi	r18, 0x00	; 0
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <xTaskGenericNotifyFromISR>
    1358:	19 86       	std	Y+9, r1	; 0x09
    135a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    135c:	c5 01       	movw	r24, r10
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	ff 90       	pop	r15
    1368:	ef 90       	pop	r14
    136a:	df 90       	pop	r13
    136c:	cf 90       	pop	r12
    136e:	bf 90       	pop	r11
    1370:	af 90       	pop	r10
    1372:	08 95       	ret

00001374 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1374:	4f 92       	push	r4
    1376:	5f 92       	push	r5
    1378:	6f 92       	push	r6
    137a:	7f 92       	push	r7
    137c:	8f 92       	push	r8
    137e:	9f 92       	push	r9
    1380:	af 92       	push	r10
    1382:	bf 92       	push	r11
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	ec 01       	movw	r28, r24
    1396:	2b 01       	movw	r4, r22
    1398:	3a 01       	movw	r6, r20
    139a:	58 01       	movw	r10, r16
    139c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    139e:	8e 85       	ldd	r24, Y+14	; 0x0e
    13a0:	80 ff       	sbrs	r24, 0
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    13a4:	68 94       	set
    13a6:	88 24       	eor	r8, r8
    13a8:	81 f8       	bld	r8, 1
    13aa:	91 2c       	mov	r9, r1
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    13ae:	81 2c       	mov	r8, r1
    13b0:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13b2:	a1 14       	cp	r10, r1
    13b4:	b1 04       	cpc	r11, r1
    13b6:	c1 04       	cpc	r12, r1
    13b8:	d1 04       	cpc	r13, r1
    13ba:	31 f1       	breq	.+76     	; 0x1408 <xStreamBufferReceive+0x94>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13c2:	ce 01       	movw	r24, r28
    13c4:	2b dd       	rcall	.-1450   	; 0xe1c <prvBytesInBuffer>
    13c6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    13c8:	88 16       	cp	r8, r24
    13ca:	99 06       	cpc	r9, r25
    13cc:	40 f0       	brcs	.+16     	; 0x13de <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 9d 14 	call	0x293a	; 0x293a <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    13d8:	82 d7       	rcall	.+3844   	; 0x22de <xTaskGetCurrentTaskHandle>
    13da:	99 87       	std	Y+9, r25	; 0x09
    13dc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    13e2:	8e 14       	cp	r8, r14
    13e4:	9f 04       	cpc	r9, r15
    13e6:	98 f0       	brcs	.+38     	; 0x140e <xStreamBufferReceive+0x9a>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13e8:	e1 2c       	mov	r14, r1
    13ea:	f1 2c       	mov	r15, r1
    13ec:	00 e0       	ldi	r16, 0x00	; 0
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	98 01       	movw	r18, r16
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	50 e0       	ldi	r21, 0x00	; 0
    13f6:	ba 01       	movw	r22, r20
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	df d7       	rcall	.+4030   	; 0x23ba <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13fc:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13fe:	18 86       	std	Y+8, r1	; 0x08
    1400:	ce 01       	movw	r24, r28
    1402:	0c dd       	rcall	.-1512   	; 0xe1c <prvBytesInBuffer>
    1404:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1406:	03 c0       	rjmp	.+6      	; 0x140e <xStreamBufferReceive+0x9a>
    1408:	ce 01       	movw	r24, r28
    140a:	08 dd       	rcall	.-1520   	; 0xe1c <prvBytesInBuffer>
    140c:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    140e:	8e 14       	cp	r8, r14
    1410:	9f 04       	cpc	r9, r15
    1412:	e8 f4       	brcc	.+58     	; 0x144e <xStreamBufferReceive+0xda>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1414:	84 01       	movw	r16, r8
    1416:	97 01       	movw	r18, r14
    1418:	a3 01       	movw	r20, r6
    141a:	b2 01       	movw	r22, r4
    141c:	ce 01       	movw	r24, r28
    141e:	fc dd       	rcall	.-1032   	; 0x1018 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1420:	6c 01       	movw	r12, r24
    1422:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1424:	b1 f0       	breq	.+44     	; 0x1452 <xStreamBufferReceive+0xde>
    1426:	c1 d2       	rcall	.+1410   	; 0x19aa <vTaskSuspendAll>
    1428:	8a 85       	ldd	r24, Y+10	; 0x0a
    142a:	9b 85       	ldd	r25, Y+11	; 0x0b
    142c:	89 2b       	or	r24, r25
    142e:	69 f0       	breq	.+26     	; 0x144a <xStreamBufferReceive+0xd6>
    1430:	8a 85       	ldd	r24, Y+10	; 0x0a
    1432:	9b 85       	ldd	r25, Y+11	; 0x0b
    1434:	e1 2c       	mov	r14, r1
    1436:	f1 2c       	mov	r15, r1
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	a9 01       	movw	r20, r18
    1440:	60 e0       	ldi	r22, 0x00	; 0
    1442:	0e 94 84 12 	call	0x2508	; 0x2508 <xTaskGenericNotify>
    1446:	1b 86       	std	Y+11, r1	; 0x0b
    1448:	1a 86       	std	Y+10, r1	; 0x0a
    144a:	ef d3       	rcall	.+2014   	; 0x1c2a <xTaskResumeAll>
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <xStreamBufferReceive+0xde>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    144e:	c1 2c       	mov	r12, r1
    1450:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1452:	c6 01       	movw	r24, r12
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	9f 90       	pop	r9
    146a:	8f 90       	pop	r8
    146c:	7f 90       	pop	r7
    146e:	6f 90       	pop	r6
    1470:	5f 90       	pop	r5
    1472:	4f 90       	pop	r4
    1474:	08 95       	ret

00001476 <prvResetNextTaskUnblockTime>:
    1476:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    147a:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    147e:	80 81       	ld	r24, Z
    1480:	81 11       	cpse	r24, r1
    1482:	0c c0       	rjmp	.+24     	; 0x149c <prvResetNextTaskUnblockTime+0x26>
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	9f ef       	ldi	r25, 0xFF	; 255
    1488:	dc 01       	movw	r26, r24
    148a:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <xNextTaskUnblockTime>
    148e:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <xNextTaskUnblockTime+0x1>
    1492:	a0 93 63 14 	sts	0x1463, r26	; 0x801463 <xNextTaskUnblockTime+0x2>
    1496:	b0 93 64 14 	sts	0x1464, r27	; 0x801464 <xNextTaskUnblockTime+0x3>
    149a:	08 95       	ret
    149c:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    14a0:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    14a4:	07 80       	ldd	r0, Z+7	; 0x07
    14a6:	f0 85       	ldd	r31, Z+8	; 0x08
    14a8:	e0 2d       	mov	r30, r0
    14aa:	80 81       	ld	r24, Z
    14ac:	91 81       	ldd	r25, Z+1	; 0x01
    14ae:	a2 81       	ldd	r26, Z+2	; 0x02
    14b0:	b3 81       	ldd	r27, Z+3	; 0x03
    14b2:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <xNextTaskUnblockTime>
    14b6:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <xNextTaskUnblockTime+0x1>
    14ba:	a0 93 63 14 	sts	0x1463, r26	; 0x801463 <xNextTaskUnblockTime+0x2>
    14be:	b0 93 64 14 	sts	0x1464, r27	; 0x801464 <xNextTaskUnblockTime+0x3>
    14c2:	08 95       	ret

000014c4 <prvDeleteTCB>:
    14c4:	cf 93       	push	r28
    14c6:	df 93       	push	r29
    14c8:	ec 01       	movw	r28, r24
    14ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14ce:	0e 94 65 02 	call	0x4ca	; 0x4ca <vPortFree>
    14d2:	ce 01       	movw	r24, r28
    14d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <vPortFree>
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	08 95       	ret

000014de <prvInitialiseNewTask>:
    14de:	4f 92       	push	r4
    14e0:	5f 92       	push	r5
    14e2:	6f 92       	push	r6
    14e4:	7f 92       	push	r7
    14e6:	8f 92       	push	r8
    14e8:	9f 92       	push	r9
    14ea:	af 92       	push	r10
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	2c 01       	movw	r4, r24
    14fe:	5b 01       	movw	r10, r22
    1500:	4a 01       	movw	r8, r20
    1502:	39 01       	movw	r6, r18
    1504:	e6 01       	movw	r28, r12
    1506:	65 ea       	ldi	r22, 0xA5	; 165
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    150c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    150e:	0e 94 ea 2e 	call	0x5dd4	; 0x5dd4 <memset>
    1512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1516:	21 e0       	ldi	r18, 0x01	; 1
    1518:	82 1a       	sub	r8, r18
    151a:	91 08       	sbc	r9, r1
    151c:	88 0e       	add	r8, r24
    151e:	99 1e       	adc	r9, r25
    1520:	a1 14       	cp	r10, r1
    1522:	b1 04       	cpc	r11, r1
    1524:	89 f4       	brne	.+34     	; 0x1548 <prvInitialiseNewTask+0x6a>
    1526:	15 c0       	rjmp	.+42     	; 0x1552 <prvInitialiseNewTask+0x74>
    1528:	82 2f       	mov	r24, r18
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	f5 01       	movw	r30, r10
    152e:	e8 0f       	add	r30, r24
    1530:	f9 1f       	adc	r31, r25
    1532:	30 81       	ld	r19, Z
    1534:	de 01       	movw	r26, r28
    1536:	a8 0f       	add	r26, r24
    1538:	b9 1f       	adc	r27, r25
    153a:	5d 96       	adiw	r26, 0x1d	; 29
    153c:	3c 93       	st	X, r19
    153e:	80 81       	ld	r24, Z
    1540:	88 23       	and	r24, r24
    1542:	29 f0       	breq	.+10     	; 0x154e <prvInitialiseNewTask+0x70>
    1544:	2f 5f       	subi	r18, 0xFF	; 255
    1546:	01 c0       	rjmp	.+2      	; 0x154a <prvInitialiseNewTask+0x6c>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	20 31       	cpi	r18, 0x10	; 16
    154c:	68 f3       	brcs	.-38     	; 0x1528 <prvInitialiseNewTask+0x4a>
    154e:	1c a6       	std	Y+44, r1	; 0x2c
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <prvInitialiseNewTask+0x76>
    1552:	1d 8e       	std	Y+29, r1	; 0x1d
    1554:	0a 30       	cpi	r16, 0x0A	; 10
    1556:	08 f0       	brcs	.+2      	; 0x155a <prvInitialiseNewTask+0x7c>
    1558:	09 e0       	ldi	r16, 0x09	; 9
    155a:	0a 8f       	std	Y+26, r16	; 0x1a
    155c:	0d a7       	std	Y+45, r16	; 0x2d
    155e:	1e a6       	std	Y+46, r1	; 0x2e
    1560:	ce 01       	movw	r24, r28
    1562:	02 96       	adiw	r24, 0x02	; 2
    1564:	00 d8       	rcall	.-4096   	; 0x566 <vListInitialiseItem>
    1566:	ce 01       	movw	r24, r28
    1568:	0e 96       	adiw	r24, 0x0e	; 14
    156a:	0e 94 b3 02 	call	0x566	; 0x566 <vListInitialiseItem>
    156e:	db 87       	std	Y+11, r29	; 0x0b
    1570:	ca 87       	std	Y+10, r28	; 0x0a
    1572:	8a e0       	ldi	r24, 0x0A	; 10
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	a0 e0       	ldi	r26, 0x00	; 0
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	80 1b       	sub	r24, r16
    157c:	91 09       	sbc	r25, r1
    157e:	a1 09       	sbc	r26, r1
    1580:	b1 09       	sbc	r27, r1
    1582:	8e 87       	std	Y+14, r24	; 0x0e
    1584:	9f 87       	std	Y+15, r25	; 0x0f
    1586:	a8 8b       	std	Y+16, r26	; 0x10
    1588:	b9 8b       	std	Y+17, r27	; 0x11
    158a:	df 8b       	std	Y+23, r29	; 0x17
    158c:	ce 8b       	std	Y+22, r28	; 0x16
    158e:	84 e0       	ldi	r24, 0x04	; 4
    1590:	fe 01       	movw	r30, r28
    1592:	bf 96       	adiw	r30, 0x2f	; 47
    1594:	df 01       	movw	r26, r30
    1596:	1d 92       	st	X+, r1
    1598:	8a 95       	dec	r24
    159a:	e9 f7       	brne	.-6      	; 0x1596 <prvInitialiseNewTask+0xb8>
    159c:	1b aa       	std	Y+51, r1	; 0x33
    159e:	a3 01       	movw	r20, r6
    15a0:	b2 01       	movw	r22, r4
    15a2:	c4 01       	movw	r24, r8
    15a4:	54 d8       	rcall	.-3928   	; 0x64e <pxPortInitialiseStack>
    15a6:	99 83       	std	Y+1, r25	; 0x01
    15a8:	88 83       	st	Y, r24
    15aa:	e1 14       	cp	r14, r1
    15ac:	f1 04       	cpc	r15, r1
    15ae:	19 f0       	breq	.+6      	; 0x15b6 <prvInitialiseNewTask+0xd8>
    15b0:	f7 01       	movw	r30, r14
    15b2:	d1 83       	std	Z+1, r29	; 0x01
    15b4:	c0 83       	st	Z, r28
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	cf 90       	pop	r12
    15c4:	bf 90       	pop	r11
    15c6:	af 90       	pop	r10
    15c8:	9f 90       	pop	r9
    15ca:	8f 90       	pop	r8
    15cc:	7f 90       	pop	r7
    15ce:	6f 90       	pop	r6
    15d0:	5f 90       	pop	r5
    15d2:	4f 90       	pop	r4
    15d4:	08 95       	ret

000015d6 <prvInitialiseTaskLists>:
    15d6:	cf 93       	push	r28
    15d8:	c0 e0       	ldi	r28, 0x00	; 0
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <prvInitialiseTaskLists+0x18>
    15dc:	2b e0       	ldi	r18, 0x0B	; 11
    15de:	c2 9f       	mul	r28, r18
    15e0:	c0 01       	movw	r24, r0
    15e2:	11 24       	eor	r1, r1
    15e4:	81 55       	subi	r24, 0x51	; 81
    15e6:	9b 4e       	sbci	r25, 0xEB	; 235
    15e8:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    15ec:	cf 5f       	subi	r28, 0xFF	; 255
    15ee:	ca 30       	cpi	r28, 0x0A	; 10
    15f0:	a8 f3       	brcs	.-22     	; 0x15dc <prvInitialiseTaskLists+0x6>
    15f2:	84 ea       	ldi	r24, 0xA4	; 164
    15f4:	94 e1       	ldi	r25, 0x14	; 20
    15f6:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    15fa:	89 e9       	ldi	r24, 0x99	; 153
    15fc:	94 e1       	ldi	r25, 0x14	; 20
    15fe:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    1602:	8a e8       	ldi	r24, 0x8A	; 138
    1604:	94 e1       	ldi	r25, 0x14	; 20
    1606:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    160a:	8f e7       	ldi	r24, 0x7F	; 127
    160c:	94 e1       	ldi	r25, 0x14	; 20
    160e:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    1612:	83 e7       	ldi	r24, 0x73	; 115
    1614:	94 e1       	ldi	r25, 0x14	; 20
    1616:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    161a:	84 ea       	ldi	r24, 0xA4	; 164
    161c:	94 e1       	ldi	r25, 0x14	; 20
    161e:	90 93 98 14 	sts	0x1498, r25	; 0x801498 <pxDelayedTaskList+0x1>
    1622:	80 93 97 14 	sts	0x1497, r24	; 0x801497 <pxDelayedTaskList>
    1626:	89 e9       	ldi	r24, 0x99	; 153
    1628:	94 e1       	ldi	r25, 0x14	; 20
    162a:	90 93 96 14 	sts	0x1496, r25	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    162e:	80 93 95 14 	sts	0x1495, r24	; 0x801495 <pxOverflowDelayedTaskList>
    1632:	cf 91       	pop	r28
    1634:	08 95       	ret

00001636 <prvAddNewTaskToReadyList>:
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	ec 01       	movw	r28, r24
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	0f 92       	push	r0
    1642:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <uxCurrentNumberOfTasks>
    164c:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    1650:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1654:	89 2b       	or	r24, r25
    1656:	51 f4       	brne	.+20     	; 0x166c <prvAddNewTaskToReadyList+0x36>
    1658:	d0 93 1e 15 	sts	0x151E, r29	; 0x80151e <pxCurrentTCB+0x1>
    165c:	c0 93 1d 15 	sts	0x151D, r28	; 0x80151d <pxCurrentTCB>
    1660:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 f4       	brne	.+36     	; 0x168c <prvAddNewTaskToReadyList+0x56>
    1668:	b6 df       	rcall	.-148    	; 0x15d6 <prvInitialiseTaskLists>
    166a:	10 c0       	rjmp	.+32     	; 0x168c <prvAddNewTaskToReadyList+0x56>
    166c:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <xSchedulerRunning>
    1670:	81 11       	cpse	r24, r1
    1672:	0c c0       	rjmp	.+24     	; 0x168c <prvAddNewTaskToReadyList+0x56>
    1674:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1678:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    167c:	92 8d       	ldd	r25, Z+26	; 0x1a
    167e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1680:	89 17       	cp	r24, r25
    1682:	20 f0       	brcs	.+8      	; 0x168c <prvAddNewTaskToReadyList+0x56>
    1684:	d0 93 1e 15 	sts	0x151E, r29	; 0x80151e <pxCurrentTCB+0x1>
    1688:	c0 93 1d 15 	sts	0x151D, r28	; 0x80151d <pxCurrentTCB>
    168c:	80 91 65 14 	lds	r24, 0x1465	; 0x801465 <uxTaskNumber>
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	80 93 65 14 	sts	0x1465, r24	; 0x801465 <uxTaskNumber>
    1696:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1698:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    169c:	8e 17       	cp	r24, r30
    169e:	10 f4       	brcc	.+4      	; 0x16a4 <prvAddNewTaskToReadyList+0x6e>
    16a0:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    16a4:	8b e0       	ldi	r24, 0x0B	; 11
    16a6:	8e 9f       	mul	r24, r30
    16a8:	f0 01       	movw	r30, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	e1 55       	subi	r30, 0x51	; 81
    16ae:	fb 4e       	sbci	r31, 0xEB	; 235
    16b0:	01 80       	ldd	r0, Z+1	; 0x01
    16b2:	f2 81       	ldd	r31, Z+2	; 0x02
    16b4:	e0 2d       	mov	r30, r0
    16b6:	ff 83       	std	Y+7, r31	; 0x07
    16b8:	ee 83       	std	Y+6, r30	; 0x06
    16ba:	26 81       	ldd	r18, Z+6	; 0x06
    16bc:	37 81       	ldd	r19, Z+7	; 0x07
    16be:	39 87       	std	Y+9, r19	; 0x09
    16c0:	28 87       	std	Y+8, r18	; 0x08
    16c2:	a6 81       	ldd	r26, Z+6	; 0x06
    16c4:	b7 81       	ldd	r27, Z+7	; 0x07
    16c6:	9e 01       	movw	r18, r28
    16c8:	2e 5f       	subi	r18, 0xFE	; 254
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	15 96       	adiw	r26, 0x05	; 5
    16ce:	3c 93       	st	X, r19
    16d0:	2e 93       	st	-X, r18
    16d2:	14 97       	sbiw	r26, 0x04	; 4
    16d4:	37 83       	std	Z+7, r19	; 0x07
    16d6:	26 83       	std	Z+6, r18	; 0x06
    16d8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    16da:	8e 9f       	mul	r24, r30
    16dc:	f0 01       	movw	r30, r0
    16de:	11 24       	eor	r1, r1
    16e0:	e1 55       	subi	r30, 0x51	; 81
    16e2:	fb 4e       	sbci	r31, 0xEB	; 235
    16e4:	fd 87       	std	Y+13, r31	; 0x0d
    16e6:	ec 87       	std	Y+12, r30	; 0x0c
    16e8:	80 81       	ld	r24, Z
    16ea:	8f 5f       	subi	r24, 0xFF	; 255
    16ec:	80 83       	st	Z, r24
    16ee:	0f 90       	pop	r0
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <xSchedulerRunning>
    16f6:	88 23       	and	r24, r24
    16f8:	51 f0       	breq	.+20     	; 0x170e <prvAddNewTaskToReadyList+0xd8>
    16fa:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    16fe:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1702:	92 8d       	ldd	r25, Z+26	; 0x1a
    1704:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1706:	98 17       	cp	r25, r24
    1708:	10 f4       	brcc	.+4      	; 0x170e <prvAddNewTaskToReadyList+0xd8>
    170a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    170e:	df 91       	pop	r29
    1710:	cf 91       	pop	r28
    1712:	08 95       	ret

00001714 <prvCheckTasksWaitingTermination>:
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	1b c0       	rjmp	.+54     	; 0x1750 <prvCheckTasksWaitingTermination+0x3c>
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	0f 92       	push	r0
    1720:	e0 91 86 14 	lds	r30, 0x1486	; 0x801486 <xTasksWaitingTermination+0x7>
    1724:	f0 91 87 14 	lds	r31, 0x1487	; 0x801487 <xTasksWaitingTermination+0x8>
    1728:	c0 85       	ldd	r28, Z+8	; 0x08
    172a:	d1 85       	ldd	r29, Z+9	; 0x09
    172c:	ce 01       	movw	r24, r28
    172e:	02 96       	adiw	r24, 0x02	; 2
    1730:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uxListRemove>
    1734:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    1738:	81 50       	subi	r24, 0x01	; 1
    173a:	80 93 72 14 	sts	0x1472, r24	; 0x801472 <uxCurrentNumberOfTasks>
    173e:	80 91 7e 14 	lds	r24, 0x147E	; 0x80147e <uxDeletedTasksWaitingCleanUp>
    1742:	81 50       	subi	r24, 0x01	; 1
    1744:	80 93 7e 14 	sts	0x147E, r24	; 0x80147e <uxDeletedTasksWaitingCleanUp>
    1748:	0f 90       	pop	r0
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	ce 01       	movw	r24, r28
    174e:	ba de       	rcall	.-652    	; 0x14c4 <prvDeleteTCB>
    1750:	80 91 7e 14 	lds	r24, 0x147E	; 0x80147e <uxDeletedTasksWaitingCleanUp>
    1754:	81 11       	cpse	r24, r1
    1756:	e1 cf       	rjmp	.-62     	; 0x171a <prvCheckTasksWaitingTermination+0x6>
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	08 95       	ret

0000175e <prvAddCurrentTaskToDelayedList>:
    175e:	8f 92       	push	r8
    1760:	9f 92       	push	r9
    1762:	af 92       	push	r10
    1764:	bf 92       	push	r11
    1766:	cf 92       	push	r12
    1768:	df 92       	push	r13
    176a:	ef 92       	push	r14
    176c:	ff 92       	push	r15
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	6b 01       	movw	r12, r22
    1774:	7c 01       	movw	r14, r24
    1776:	c4 2f       	mov	r28, r20
    1778:	80 90 6e 14 	lds	r8, 0x146E	; 0x80146e <xTickCount>
    177c:	90 90 6f 14 	lds	r9, 0x146F	; 0x80146f <xTickCount+0x1>
    1780:	a0 90 70 14 	lds	r10, 0x1470	; 0x801470 <xTickCount+0x2>
    1784:	b0 90 71 14 	lds	r11, 0x1471	; 0x801471 <xTickCount+0x3>
    1788:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    178c:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1790:	02 96       	adiw	r24, 0x02	; 2
    1792:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uxListRemove>
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	c8 16       	cp	r12, r24
    179a:	d8 06       	cpc	r13, r24
    179c:	e8 06       	cpc	r14, r24
    179e:	f8 06       	cpc	r15, r24
    17a0:	b1 f5       	brne	.+108    	; 0x180e <prvAddCurrentTaskToDelayedList+0xb0>
    17a2:	cc 23       	and	r28, r28
    17a4:	a1 f1       	breq	.+104    	; 0x180e <prvAddCurrentTaskToDelayedList+0xb0>
    17a6:	e3 e7       	ldi	r30, 0x73	; 115
    17a8:	f4 e1       	ldi	r31, 0x14	; 20
    17aa:	a1 81       	ldd	r26, Z+1	; 0x01
    17ac:	b2 81       	ldd	r27, Z+2	; 0x02
    17ae:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    17b2:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17b6:	bf 83       	std	Y+7, r27	; 0x07
    17b8:	ae 83       	std	Y+6, r26	; 0x06
    17ba:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    17be:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17c2:	16 96       	adiw	r26, 0x06	; 6
    17c4:	8d 91       	ld	r24, X+
    17c6:	9c 91       	ld	r25, X
    17c8:	17 97       	sbiw	r26, 0x07	; 7
    17ca:	99 87       	std	Y+9, r25	; 0x09
    17cc:	88 87       	std	Y+8, r24	; 0x08
    17ce:	16 96       	adiw	r26, 0x06	; 6
    17d0:	cd 91       	ld	r28, X+
    17d2:	dc 91       	ld	r29, X
    17d4:	17 97       	sbiw	r26, 0x07	; 7
    17d6:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    17da:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17de:	02 96       	adiw	r24, 0x02	; 2
    17e0:	9d 83       	std	Y+5, r25	; 0x05
    17e2:	8c 83       	std	Y+4, r24	; 0x04
    17e4:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    17e8:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17ec:	02 96       	adiw	r24, 0x02	; 2
    17ee:	17 96       	adiw	r26, 0x07	; 7
    17f0:	9c 93       	st	X, r25
    17f2:	8e 93       	st	-X, r24
    17f4:	16 97       	sbiw	r26, 0x06	; 6
    17f6:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
    17fa:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    17fe:	1d 96       	adiw	r26, 0x0d	; 13
    1800:	fc 93       	st	X, r31
    1802:	ee 93       	st	-X, r30
    1804:	1c 97       	sbiw	r26, 0x0c	; 12
    1806:	80 81       	ld	r24, Z
    1808:	8f 5f       	subi	r24, 0xFF	; 255
    180a:	80 83       	st	Z, r24
    180c:	3f c0       	rjmp	.+126    	; 0x188c <prvAddCurrentTaskToDelayedList+0x12e>
    180e:	c8 0c       	add	r12, r8
    1810:	d9 1c       	adc	r13, r9
    1812:	ea 1c       	adc	r14, r10
    1814:	fb 1c       	adc	r15, r11
    1816:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    181a:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    181e:	c2 82       	std	Z+2, r12	; 0x02
    1820:	d3 82       	std	Z+3, r13	; 0x03
    1822:	e4 82       	std	Z+4, r14	; 0x04
    1824:	f5 82       	std	Z+5, r15	; 0x05
    1826:	c8 14       	cp	r12, r8
    1828:	d9 04       	cpc	r13, r9
    182a:	ea 04       	cpc	r14, r10
    182c:	fb 04       	cpc	r15, r11
    182e:	68 f4       	brcc	.+26     	; 0x184a <prvAddCurrentTaskToDelayedList+0xec>
    1830:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    1834:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1838:	80 91 95 14 	lds	r24, 0x1495	; 0x801495 <pxOverflowDelayedTaskList>
    183c:	90 91 96 14 	lds	r25, 0x1496	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    1840:	6e 5f       	subi	r22, 0xFE	; 254
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	0e 94 b7 02 	call	0x56e	; 0x56e <vListInsert>
    1848:	21 c0       	rjmp	.+66     	; 0x188c <prvAddCurrentTaskToDelayedList+0x12e>
    184a:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    184e:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1852:	80 91 97 14 	lds	r24, 0x1497	; 0x801497 <pxDelayedTaskList>
    1856:	90 91 98 14 	lds	r25, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    185a:	6e 5f       	subi	r22, 0xFE	; 254
    185c:	7f 4f       	sbci	r23, 0xFF	; 255
    185e:	0e 94 b7 02 	call	0x56e	; 0x56e <vListInsert>
    1862:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <xNextTaskUnblockTime>
    1866:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <xNextTaskUnblockTime+0x1>
    186a:	a0 91 63 14 	lds	r26, 0x1463	; 0x801463 <xNextTaskUnblockTime+0x2>
    186e:	b0 91 64 14 	lds	r27, 0x1464	; 0x801464 <xNextTaskUnblockTime+0x3>
    1872:	c8 16       	cp	r12, r24
    1874:	d9 06       	cpc	r13, r25
    1876:	ea 06       	cpc	r14, r26
    1878:	fb 06       	cpc	r15, r27
    187a:	40 f4       	brcc	.+16     	; 0x188c <prvAddCurrentTaskToDelayedList+0x12e>
    187c:	c0 92 61 14 	sts	0x1461, r12	; 0x801461 <xNextTaskUnblockTime>
    1880:	d0 92 62 14 	sts	0x1462, r13	; 0x801462 <xNextTaskUnblockTime+0x1>
    1884:	e0 92 63 14 	sts	0x1463, r14	; 0x801463 <xNextTaskUnblockTime+0x2>
    1888:	f0 92 64 14 	sts	0x1464, r15	; 0x801464 <xNextTaskUnblockTime+0x3>
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	9f 90       	pop	r9
    189e:	8f 90       	pop	r8
    18a0:	08 95       	ret

000018a2 <xTaskCreate>:
    18a2:	2f 92       	push	r2
    18a4:	3f 92       	push	r3
    18a6:	4f 92       	push	r4
    18a8:	5f 92       	push	r5
    18aa:	6f 92       	push	r6
    18ac:	7f 92       	push	r7
    18ae:	8f 92       	push	r8
    18b0:	9f 92       	push	r9
    18b2:	af 92       	push	r10
    18b4:	bf 92       	push	r11
    18b6:	cf 92       	push	r12
    18b8:	df 92       	push	r13
    18ba:	ef 92       	push	r14
    18bc:	ff 92       	push	r15
    18be:	0f 93       	push	r16
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	3c 01       	movw	r6, r24
    18c6:	1b 01       	movw	r2, r22
    18c8:	4a 01       	movw	r8, r20
    18ca:	29 01       	movw	r4, r18
    18cc:	ca 01       	movw	r24, r20
    18ce:	0e 94 bc 01 	call	0x378	; 0x378 <pvPortMalloc>
    18d2:	6c 01       	movw	r12, r24
    18d4:	89 2b       	or	r24, r25
    18d6:	71 f0       	breq	.+28     	; 0x18f4 <xTaskCreate+0x52>
    18d8:	84 e3       	ldi	r24, 0x34	; 52
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 bc 01 	call	0x378	; 0x378 <pvPortMalloc>
    18e0:	ec 01       	movw	r28, r24
    18e2:	89 2b       	or	r24, r25
    18e4:	19 f0       	breq	.+6      	; 0x18ec <xTaskCreate+0x4a>
    18e6:	dc 8e       	std	Y+28, r13	; 0x1c
    18e8:	cb 8e       	std	Y+27, r12	; 0x1b
    18ea:	06 c0       	rjmp	.+12     	; 0x18f8 <xTaskCreate+0x56>
    18ec:	c6 01       	movw	r24, r12
    18ee:	0e 94 65 02 	call	0x4ca	; 0x4ca <vPortFree>
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <xTaskCreate+0x56>
    18f4:	c0 e0       	ldi	r28, 0x00	; 0
    18f6:	d0 e0       	ldi	r29, 0x00	; 0
    18f8:	20 97       	sbiw	r28, 0x00	; 0
    18fa:	61 f0       	breq	.+24     	; 0x1914 <xTaskCreate+0x72>
    18fc:	a1 2c       	mov	r10, r1
    18fe:	b1 2c       	mov	r11, r1
    1900:	6e 01       	movw	r12, r28
    1902:	92 01       	movw	r18, r4
    1904:	a4 01       	movw	r20, r8
    1906:	b1 01       	movw	r22, r2
    1908:	c3 01       	movw	r24, r6
    190a:	e9 dd       	rcall	.-1070   	; 0x14de <prvInitialiseNewTask>
    190c:	ce 01       	movw	r24, r28
    190e:	93 de       	rcall	.-730    	; 0x1636 <prvAddNewTaskToReadyList>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <xTaskCreate+0x74>
    1914:	8f ef       	ldi	r24, 0xFF	; 255
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	7f 90       	pop	r7
    192e:	6f 90       	pop	r6
    1930:	5f 90       	pop	r5
    1932:	4f 90       	pop	r4
    1934:	3f 90       	pop	r3
    1936:	2f 90       	pop	r2
    1938:	08 95       	ret

0000193a <vTaskStartScheduler>:
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	0f 93       	push	r16
    1940:	0f 2e       	mov	r0, r31
    1942:	ff e5       	ldi	r31, 0x5F	; 95
    1944:	ef 2e       	mov	r14, r31
    1946:	f4 e1       	ldi	r31, 0x14	; 20
    1948:	ff 2e       	mov	r15, r31
    194a:	f0 2d       	mov	r31, r0
    194c:	00 e0       	ldi	r16, 0x00	; 0
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 ec       	ldi	r20, 0xC0	; 192
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	62 e4       	ldi	r22, 0x42	; 66
    1958:	72 e0       	ldi	r23, 0x02	; 2
    195a:	8e e0       	ldi	r24, 0x0E	; 14
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	a1 df       	rcall	.-190    	; 0x18a2 <xTaskCreate>
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	11 f4       	brne	.+4      	; 0x1968 <vTaskStartScheduler+0x2e>
    1964:	0e 94 41 15 	call	0x2a82	; 0x2a82 <xTimerCreateTimerTask>
    1968:	81 30       	cpi	r24, 0x01	; 1
    196a:	c9 f4       	brne	.+50     	; 0x199e <vTaskStartScheduler+0x64>
    196c:	f8 94       	cli
    196e:	8f ef       	ldi	r24, 0xFF	; 255
    1970:	9f ef       	ldi	r25, 0xFF	; 255
    1972:	dc 01       	movw	r26, r24
    1974:	80 93 61 14 	sts	0x1461, r24	; 0x801461 <xNextTaskUnblockTime>
    1978:	90 93 62 14 	sts	0x1462, r25	; 0x801462 <xNextTaskUnblockTime+0x1>
    197c:	a0 93 63 14 	sts	0x1463, r26	; 0x801463 <xNextTaskUnblockTime+0x2>
    1980:	b0 93 64 14 	sts	0x1464, r27	; 0x801464 <xNextTaskUnblockTime+0x3>
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 6c 14 	sts	0x146C, r24	; 0x80146c <xSchedulerRunning>
    198a:	10 92 6e 14 	sts	0x146E, r1	; 0x80146e <xTickCount>
    198e:	10 92 6f 14 	sts	0x146F, r1	; 0x80146f <xTickCount+0x1>
    1992:	10 92 70 14 	sts	0x1470, r1	; 0x801470 <xTickCount+0x2>
    1996:	10 92 71 14 	sts	0x1471, r1	; 0x801471 <xTickCount+0x3>
    199a:	0e 94 3e 03 	call	0x67c	; 0x67c <xPortStartScheduler>
    199e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    19a2:	0f 91       	pop	r16
    19a4:	ff 90       	pop	r15
    19a6:	ef 90       	pop	r14
    19a8:	08 95       	ret

000019aa <vTaskSuspendAll>:
    19aa:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	80 93 5e 14 	sts	0x145E, r24	; 0x80145e <uxSchedulerSuspended>
    19b4:	08 95       	ret

000019b6 <xTaskGetTickCount>:
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	0f 92       	push	r0
    19bc:	60 91 6e 14 	lds	r22, 0x146E	; 0x80146e <xTickCount>
    19c0:	70 91 6f 14 	lds	r23, 0x146F	; 0x80146f <xTickCount+0x1>
    19c4:	80 91 70 14 	lds	r24, 0x1470	; 0x801470 <xTickCount+0x2>
    19c8:	90 91 71 14 	lds	r25, 0x1471	; 0x801471 <xTickCount+0x3>
    19cc:	0f 90       	pop	r0
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	08 95       	ret

000019d2 <xTaskIncrementTick>:
    19d2:	cf 92       	push	r12
    19d4:	df 92       	push	r13
    19d6:	ef 92       	push	r14
    19d8:	ff 92       	push	r15
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    19e2:	81 11       	cpse	r24, r1
    19e4:	05 c1       	rjmp	.+522    	; 0x1bf0 <xTaskIncrementTick+0x21e>
    19e6:	c0 90 6e 14 	lds	r12, 0x146E	; 0x80146e <xTickCount>
    19ea:	d0 90 6f 14 	lds	r13, 0x146F	; 0x80146f <xTickCount+0x1>
    19ee:	e0 90 70 14 	lds	r14, 0x1470	; 0x801470 <xTickCount+0x2>
    19f2:	f0 90 71 14 	lds	r15, 0x1471	; 0x801471 <xTickCount+0x3>
    19f6:	8f ef       	ldi	r24, 0xFF	; 255
    19f8:	c8 1a       	sub	r12, r24
    19fa:	d8 0a       	sbc	r13, r24
    19fc:	e8 0a       	sbc	r14, r24
    19fe:	f8 0a       	sbc	r15, r24
    1a00:	c0 92 6e 14 	sts	0x146E, r12	; 0x80146e <xTickCount>
    1a04:	d0 92 6f 14 	sts	0x146F, r13	; 0x80146f <xTickCount+0x1>
    1a08:	e0 92 70 14 	sts	0x1470, r14	; 0x801470 <xTickCount+0x2>
    1a0c:	f0 92 71 14 	sts	0x1471, r15	; 0x801471 <xTickCount+0x3>
    1a10:	c1 14       	cp	r12, r1
    1a12:	d1 04       	cpc	r13, r1
    1a14:	e1 04       	cpc	r14, r1
    1a16:	f1 04       	cpc	r15, r1
    1a18:	b1 f4       	brne	.+44     	; 0x1a46 <xTaskIncrementTick+0x74>
    1a1a:	80 91 97 14 	lds	r24, 0x1497	; 0x801497 <pxDelayedTaskList>
    1a1e:	90 91 98 14 	lds	r25, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    1a22:	20 91 95 14 	lds	r18, 0x1495	; 0x801495 <pxOverflowDelayedTaskList>
    1a26:	30 91 96 14 	lds	r19, 0x1496	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    1a2a:	30 93 98 14 	sts	0x1498, r19	; 0x801498 <pxDelayedTaskList+0x1>
    1a2e:	20 93 97 14 	sts	0x1497, r18	; 0x801497 <pxDelayedTaskList>
    1a32:	90 93 96 14 	sts	0x1496, r25	; 0x801496 <pxOverflowDelayedTaskList+0x1>
    1a36:	80 93 95 14 	sts	0x1495, r24	; 0x801495 <pxOverflowDelayedTaskList>
    1a3a:	80 91 66 14 	lds	r24, 0x1466	; 0x801466 <xNumOfOverflows>
    1a3e:	8f 5f       	subi	r24, 0xFF	; 255
    1a40:	80 93 66 14 	sts	0x1466, r24	; 0x801466 <xNumOfOverflows>
    1a44:	18 dd       	rcall	.-1488   	; 0x1476 <prvResetNextTaskUnblockTime>
    1a46:	80 91 61 14 	lds	r24, 0x1461	; 0x801461 <xNextTaskUnblockTime>
    1a4a:	90 91 62 14 	lds	r25, 0x1462	; 0x801462 <xNextTaskUnblockTime+0x1>
    1a4e:	a0 91 63 14 	lds	r26, 0x1463	; 0x801463 <xNextTaskUnblockTime+0x2>
    1a52:	b0 91 64 14 	lds	r27, 0x1464	; 0x801464 <xNextTaskUnblockTime+0x3>
    1a56:	c8 16       	cp	r12, r24
    1a58:	d9 06       	cpc	r13, r25
    1a5a:	ea 06       	cpc	r14, r26
    1a5c:	fb 06       	cpc	r15, r27
    1a5e:	20 f4       	brcc	.+8      	; 0x1a68 <xTaskIncrementTick+0x96>
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	b2 c0       	rjmp	.+356    	; 0x1bc8 <xTaskIncrementTick+0x1f6>
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	01 c0       	rjmp	.+2      	; 0x1a6a <xTaskIncrementTick+0x98>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    1a6e:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    1a72:	90 81       	ld	r25, Z
    1a74:	91 11       	cpse	r25, r1
    1a76:	0c c0       	rjmp	.+24     	; 0x1a90 <xTaskIncrementTick+0xbe>
    1a78:	4f ef       	ldi	r20, 0xFF	; 255
    1a7a:	5f ef       	ldi	r21, 0xFF	; 255
    1a7c:	ba 01       	movw	r22, r20
    1a7e:	40 93 61 14 	sts	0x1461, r20	; 0x801461 <xNextTaskUnblockTime>
    1a82:	50 93 62 14 	sts	0x1462, r21	; 0x801462 <xNextTaskUnblockTime+0x1>
    1a86:	60 93 63 14 	sts	0x1463, r22	; 0x801463 <xNextTaskUnblockTime+0x2>
    1a8a:	70 93 64 14 	sts	0x1464, r23	; 0x801464 <xNextTaskUnblockTime+0x3>
    1a8e:	9c c0       	rjmp	.+312    	; 0x1bc8 <xTaskIncrementTick+0x1f6>
    1a90:	e0 91 97 14 	lds	r30, 0x1497	; 0x801497 <pxDelayedTaskList>
    1a94:	f0 91 98 14 	lds	r31, 0x1498	; 0x801498 <pxDelayedTaskList+0x1>
    1a98:	07 80       	ldd	r0, Z+7	; 0x07
    1a9a:	f0 85       	ldd	r31, Z+8	; 0x08
    1a9c:	e0 2d       	mov	r30, r0
    1a9e:	00 84       	ldd	r0, Z+8	; 0x08
    1aa0:	f1 85       	ldd	r31, Z+9	; 0x09
    1aa2:	e0 2d       	mov	r30, r0
    1aa4:	42 81       	ldd	r20, Z+2	; 0x02
    1aa6:	53 81       	ldd	r21, Z+3	; 0x03
    1aa8:	64 81       	ldd	r22, Z+4	; 0x04
    1aaa:	75 81       	ldd	r23, Z+5	; 0x05
    1aac:	c4 16       	cp	r12, r20
    1aae:	d5 06       	cpc	r13, r21
    1ab0:	e6 06       	cpc	r14, r22
    1ab2:	f7 06       	cpc	r15, r23
    1ab4:	48 f4       	brcc	.+18     	; 0x1ac8 <xTaskIncrementTick+0xf6>
    1ab6:	40 93 61 14 	sts	0x1461, r20	; 0x801461 <xNextTaskUnblockTime>
    1aba:	50 93 62 14 	sts	0x1462, r21	; 0x801462 <xNextTaskUnblockTime+0x1>
    1abe:	60 93 63 14 	sts	0x1463, r22	; 0x801463 <xNextTaskUnblockTime+0x2>
    1ac2:	70 93 64 14 	sts	0x1464, r23	; 0x801464 <xNextTaskUnblockTime+0x3>
    1ac6:	80 c0       	rjmp	.+256    	; 0x1bc8 <xTaskIncrementTick+0x1f6>
    1ac8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1aca:	b5 85       	ldd	r27, Z+13	; 0x0d
    1acc:	c6 81       	ldd	r28, Z+6	; 0x06
    1ace:	d7 81       	ldd	r29, Z+7	; 0x07
    1ad0:	20 85       	ldd	r18, Z+8	; 0x08
    1ad2:	31 85       	ldd	r19, Z+9	; 0x09
    1ad4:	3f 83       	std	Y+7, r19	; 0x07
    1ad6:	2e 83       	std	Y+6, r18	; 0x06
    1ad8:	c0 85       	ldd	r28, Z+8	; 0x08
    1ada:	d1 85       	ldd	r29, Z+9	; 0x09
    1adc:	26 81       	ldd	r18, Z+6	; 0x06
    1ade:	37 81       	ldd	r19, Z+7	; 0x07
    1ae0:	3d 83       	std	Y+5, r19	; 0x05
    1ae2:	2c 83       	std	Y+4, r18	; 0x04
    1ae4:	11 96       	adiw	r26, 0x01	; 1
    1ae6:	4d 91       	ld	r20, X+
    1ae8:	5c 91       	ld	r21, X
    1aea:	12 97       	sbiw	r26, 0x02	; 2
    1aec:	9f 01       	movw	r18, r30
    1aee:	2e 5f       	subi	r18, 0xFE	; 254
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	42 17       	cp	r20, r18
    1af4:	53 07       	cpc	r21, r19
    1af6:	31 f4       	brne	.+12     	; 0x1b04 <xTaskIncrementTick+0x132>
    1af8:	40 85       	ldd	r20, Z+8	; 0x08
    1afa:	51 85       	ldd	r21, Z+9	; 0x09
    1afc:	12 96       	adiw	r26, 0x02	; 2
    1afe:	5c 93       	st	X, r21
    1b00:	4e 93       	st	-X, r20
    1b02:	11 97       	sbiw	r26, 0x01	; 1
    1b04:	15 86       	std	Z+13, r1	; 0x0d
    1b06:	14 86       	std	Z+12, r1	; 0x0c
    1b08:	9c 91       	ld	r25, X
    1b0a:	91 50       	subi	r25, 0x01	; 1
    1b0c:	9c 93       	st	X, r25
    1b0e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b10:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b12:	10 97       	sbiw	r26, 0x00	; 0
    1b14:	09 f1       	breq	.+66     	; 0x1b58 <xTaskIncrementTick+0x186>
    1b16:	c2 89       	ldd	r28, Z+18	; 0x12
    1b18:	d3 89       	ldd	r29, Z+19	; 0x13
    1b1a:	44 89       	ldd	r20, Z+20	; 0x14
    1b1c:	55 89       	ldd	r21, Z+21	; 0x15
    1b1e:	5f 83       	std	Y+7, r21	; 0x07
    1b20:	4e 83       	std	Y+6, r20	; 0x06
    1b22:	c4 89       	ldd	r28, Z+20	; 0x14
    1b24:	d5 89       	ldd	r29, Z+21	; 0x15
    1b26:	42 89       	ldd	r20, Z+18	; 0x12
    1b28:	53 89       	ldd	r21, Z+19	; 0x13
    1b2a:	5d 83       	std	Y+5, r21	; 0x05
    1b2c:	4c 83       	std	Y+4, r20	; 0x04
    1b2e:	11 96       	adiw	r26, 0x01	; 1
    1b30:	6d 91       	ld	r22, X+
    1b32:	7c 91       	ld	r23, X
    1b34:	12 97       	sbiw	r26, 0x02	; 2
    1b36:	af 01       	movw	r20, r30
    1b38:	42 5f       	subi	r20, 0xF2	; 242
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3c:	64 17       	cp	r22, r20
    1b3e:	75 07       	cpc	r23, r21
    1b40:	31 f4       	brne	.+12     	; 0x1b4e <xTaskIncrementTick+0x17c>
    1b42:	44 89       	ldd	r20, Z+20	; 0x14
    1b44:	55 89       	ldd	r21, Z+21	; 0x15
    1b46:	12 96       	adiw	r26, 0x02	; 2
    1b48:	5c 93       	st	X, r21
    1b4a:	4e 93       	st	-X, r20
    1b4c:	11 97       	sbiw	r26, 0x01	; 1
    1b4e:	11 8e       	std	Z+25, r1	; 0x19
    1b50:	10 8e       	std	Z+24, r1	; 0x18
    1b52:	9c 91       	ld	r25, X
    1b54:	91 50       	subi	r25, 0x01	; 1
    1b56:	9c 93       	st	X, r25
    1b58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b5a:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <uxTopReadyPriority>
    1b5e:	9a 17       	cp	r25, r26
    1b60:	10 f4       	brcc	.+4      	; 0x1b66 <xTaskIncrementTick+0x194>
    1b62:	a0 93 6d 14 	sts	0x146D, r26	; 0x80146d <uxTopReadyPriority>
    1b66:	9b e0       	ldi	r25, 0x0B	; 11
    1b68:	9a 9f       	mul	r25, r26
    1b6a:	d0 01       	movw	r26, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	a1 55       	subi	r26, 0x51	; 81
    1b70:	bb 4e       	sbci	r27, 0xEB	; 235
    1b72:	11 96       	adiw	r26, 0x01	; 1
    1b74:	0d 90       	ld	r0, X+
    1b76:	bc 91       	ld	r27, X
    1b78:	a0 2d       	mov	r26, r0
    1b7a:	b7 83       	std	Z+7, r27	; 0x07
    1b7c:	a6 83       	std	Z+6, r26	; 0x06
    1b7e:	16 96       	adiw	r26, 0x06	; 6
    1b80:	4d 91       	ld	r20, X+
    1b82:	5c 91       	ld	r21, X
    1b84:	17 97       	sbiw	r26, 0x07	; 7
    1b86:	51 87       	std	Z+9, r21	; 0x09
    1b88:	40 87       	std	Z+8, r20	; 0x08
    1b8a:	16 96       	adiw	r26, 0x06	; 6
    1b8c:	cd 91       	ld	r28, X+
    1b8e:	dc 91       	ld	r29, X
    1b90:	17 97       	sbiw	r26, 0x07	; 7
    1b92:	3d 83       	std	Y+5, r19	; 0x05
    1b94:	2c 83       	std	Y+4, r18	; 0x04
    1b96:	17 96       	adiw	r26, 0x07	; 7
    1b98:	3c 93       	st	X, r19
    1b9a:	2e 93       	st	-X, r18
    1b9c:	16 97       	sbiw	r26, 0x06	; 6
    1b9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ba0:	9a 9f       	mul	r25, r26
    1ba2:	d0 01       	movw	r26, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	a1 55       	subi	r26, 0x51	; 81
    1ba8:	bb 4e       	sbci	r27, 0xEB	; 235
    1baa:	b5 87       	std	Z+13, r27	; 0x0d
    1bac:	a4 87       	std	Z+12, r26	; 0x0c
    1bae:	9c 91       	ld	r25, X
    1bb0:	9f 5f       	subi	r25, 0xFF	; 255
    1bb2:	9c 93       	st	X, r25
    1bb4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1bb6:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1bba:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1bbe:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bc0:	29 17       	cp	r18, r25
    1bc2:	08 f0       	brcs	.+2      	; 0x1bc6 <xTaskIncrementTick+0x1f4>
    1bc4:	4f cf       	rjmp	.-354    	; 0x1a64 <xTaskIncrementTick+0x92>
    1bc6:	51 cf       	rjmp	.-350    	; 0x1a6a <xTaskIncrementTick+0x98>
    1bc8:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1bcc:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1bd0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1bd2:	9b e0       	ldi	r25, 0x0B	; 11
    1bd4:	e9 9f       	mul	r30, r25
    1bd6:	f0 01       	movw	r30, r0
    1bd8:	11 24       	eor	r1, r1
    1bda:	e1 55       	subi	r30, 0x51	; 81
    1bdc:	fb 4e       	sbci	r31, 0xEB	; 235
    1bde:	90 81       	ld	r25, Z
    1be0:	92 30       	cpi	r25, 0x02	; 2
    1be2:	08 f0       	brcs	.+2      	; 0x1be6 <xTaskIncrementTick+0x214>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	90 91 67 14 	lds	r25, 0x1467	; 0x801467 <xYieldPending>
    1bea:	91 11       	cpse	r25, r1
    1bec:	16 c0       	rjmp	.+44     	; 0x1c1a <xTaskIncrementTick+0x248>
    1bee:	16 c0       	rjmp	.+44     	; 0x1c1c <xTaskIncrementTick+0x24a>
    1bf0:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <xPendedTicks>
    1bf4:	90 91 69 14 	lds	r25, 0x1469	; 0x801469 <xPendedTicks+0x1>
    1bf8:	a0 91 6a 14 	lds	r26, 0x146A	; 0x80146a <xPendedTicks+0x2>
    1bfc:	b0 91 6b 14 	lds	r27, 0x146B	; 0x80146b <xPendedTicks+0x3>
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	a1 1d       	adc	r26, r1
    1c04:	b1 1d       	adc	r27, r1
    1c06:	80 93 68 14 	sts	0x1468, r24	; 0x801468 <xPendedTicks>
    1c0a:	90 93 69 14 	sts	0x1469, r25	; 0x801469 <xPendedTicks+0x1>
    1c0e:	a0 93 6a 14 	sts	0x146A, r26	; 0x80146a <xPendedTicks+0x2>
    1c12:	b0 93 6b 14 	sts	0x146B, r27	; 0x80146b <xPendedTicks+0x3>
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	01 c0       	rjmp	.+2      	; 0x1c1c <xTaskIncrementTick+0x24a>
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	df 91       	pop	r29
    1c1e:	cf 91       	pop	r28
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	df 90       	pop	r13
    1c26:	cf 90       	pop	r12
    1c28:	08 95       	ret

00001c2a <xTaskResumeAll>:
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	0f 92       	push	r0
    1c3c:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1c40:	81 50       	subi	r24, 0x01	; 1
    1c42:	80 93 5e 14 	sts	0x145E, r24	; 0x80145e <uxSchedulerSuspended>
    1c46:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	be c0       	rjmp	.+380    	; 0x1dca <xTaskResumeAll+0x1a0>
    1c4e:	80 91 72 14 	lds	r24, 0x1472	; 0x801472 <uxCurrentNumberOfTasks>
    1c52:	81 11       	cpse	r24, r1
    1c54:	88 c0       	rjmp	.+272    	; 0x1d66 <xTaskResumeAll+0x13c>
    1c56:	bc c0       	rjmp	.+376    	; 0x1dd0 <xTaskResumeAll+0x1a6>
    1c58:	e0 91 91 14 	lds	r30, 0x1491	; 0x801491 <xPendingReadyList+0x7>
    1c5c:	f0 91 92 14 	lds	r31, 0x1492	; 0x801492 <xPendingReadyList+0x8>
    1c60:	00 84       	ldd	r0, Z+8	; 0x08
    1c62:	f1 85       	ldd	r31, Z+9	; 0x09
    1c64:	e0 2d       	mov	r30, r0
    1c66:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c68:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c6a:	c2 89       	ldd	r28, Z+18	; 0x12
    1c6c:	d3 89       	ldd	r29, Z+19	; 0x13
    1c6e:	84 89       	ldd	r24, Z+20	; 0x14
    1c70:	95 89       	ldd	r25, Z+21	; 0x15
    1c72:	9f 83       	std	Y+7, r25	; 0x07
    1c74:	8e 83       	std	Y+6, r24	; 0x06
    1c76:	c4 89       	ldd	r28, Z+20	; 0x14
    1c78:	d5 89       	ldd	r29, Z+21	; 0x15
    1c7a:	82 89       	ldd	r24, Z+18	; 0x12
    1c7c:	93 89       	ldd	r25, Z+19	; 0x13
    1c7e:	9d 83       	std	Y+5, r25	; 0x05
    1c80:	8c 83       	std	Y+4, r24	; 0x04
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	2d 91       	ld	r18, X+
    1c86:	3c 91       	ld	r19, X
    1c88:	12 97       	sbiw	r26, 0x02	; 2
    1c8a:	cf 01       	movw	r24, r30
    1c8c:	0e 96       	adiw	r24, 0x0e	; 14
    1c8e:	28 17       	cp	r18, r24
    1c90:	39 07       	cpc	r19, r25
    1c92:	31 f4       	brne	.+12     	; 0x1ca0 <xTaskResumeAll+0x76>
    1c94:	84 89       	ldd	r24, Z+20	; 0x14
    1c96:	95 89       	ldd	r25, Z+21	; 0x15
    1c98:	12 96       	adiw	r26, 0x02	; 2
    1c9a:	9c 93       	st	X, r25
    1c9c:	8e 93       	st	-X, r24
    1c9e:	11 97       	sbiw	r26, 0x01	; 1
    1ca0:	11 8e       	std	Z+25, r1	; 0x19
    1ca2:	10 8e       	std	Z+24, r1	; 0x18
    1ca4:	8c 91       	ld	r24, X
    1ca6:	81 50       	subi	r24, 0x01	; 1
    1ca8:	8c 93       	st	X, r24
    1caa:	a4 85       	ldd	r26, Z+12	; 0x0c
    1cac:	b5 85       	ldd	r27, Z+13	; 0x0d
    1cae:	c6 81       	ldd	r28, Z+6	; 0x06
    1cb0:	d7 81       	ldd	r29, Z+7	; 0x07
    1cb2:	80 85       	ldd	r24, Z+8	; 0x08
    1cb4:	91 85       	ldd	r25, Z+9	; 0x09
    1cb6:	9f 83       	std	Y+7, r25	; 0x07
    1cb8:	8e 83       	std	Y+6, r24	; 0x06
    1cba:	c0 85       	ldd	r28, Z+8	; 0x08
    1cbc:	d1 85       	ldd	r29, Z+9	; 0x09
    1cbe:	86 81       	ldd	r24, Z+6	; 0x06
    1cc0:	97 81       	ldd	r25, Z+7	; 0x07
    1cc2:	9d 83       	std	Y+5, r25	; 0x05
    1cc4:	8c 83       	std	Y+4, r24	; 0x04
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	8d 91       	ld	r24, X+
    1cca:	9c 91       	ld	r25, X
    1ccc:	12 97       	sbiw	r26, 0x02	; 2
    1cce:	9f 01       	movw	r18, r30
    1cd0:	2e 5f       	subi	r18, 0xFE	; 254
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd4:	82 17       	cp	r24, r18
    1cd6:	93 07       	cpc	r25, r19
    1cd8:	31 f4       	brne	.+12     	; 0x1ce6 <xTaskResumeAll+0xbc>
    1cda:	80 85       	ldd	r24, Z+8	; 0x08
    1cdc:	91 85       	ldd	r25, Z+9	; 0x09
    1cde:	12 96       	adiw	r26, 0x02	; 2
    1ce0:	9c 93       	st	X, r25
    1ce2:	8e 93       	st	-X, r24
    1ce4:	11 97       	sbiw	r26, 0x01	; 1
    1ce6:	15 86       	std	Z+13, r1	; 0x0d
    1ce8:	14 86       	std	Z+12, r1	; 0x0c
    1cea:	8c 91       	ld	r24, X
    1cec:	81 50       	subi	r24, 0x01	; 1
    1cee:	8c 93       	st	X, r24
    1cf0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cf2:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    1cf6:	8a 17       	cp	r24, r26
    1cf8:	10 f4       	brcc	.+4      	; 0x1cfe <xTaskResumeAll+0xd4>
    1cfa:	a0 93 6d 14 	sts	0x146D, r26	; 0x80146d <uxTopReadyPriority>
    1cfe:	8b e0       	ldi	r24, 0x0B	; 11
    1d00:	8a 9f       	mul	r24, r26
    1d02:	d0 01       	movw	r26, r0
    1d04:	11 24       	eor	r1, r1
    1d06:	a1 55       	subi	r26, 0x51	; 81
    1d08:	bb 4e       	sbci	r27, 0xEB	; 235
    1d0a:	11 96       	adiw	r26, 0x01	; 1
    1d0c:	0d 90       	ld	r0, X+
    1d0e:	bc 91       	ld	r27, X
    1d10:	a0 2d       	mov	r26, r0
    1d12:	b7 83       	std	Z+7, r27	; 0x07
    1d14:	a6 83       	std	Z+6, r26	; 0x06
    1d16:	16 96       	adiw	r26, 0x06	; 6
    1d18:	4d 91       	ld	r20, X+
    1d1a:	5c 91       	ld	r21, X
    1d1c:	17 97       	sbiw	r26, 0x07	; 7
    1d1e:	51 87       	std	Z+9, r21	; 0x09
    1d20:	40 87       	std	Z+8, r20	; 0x08
    1d22:	16 96       	adiw	r26, 0x06	; 6
    1d24:	cd 91       	ld	r28, X+
    1d26:	dc 91       	ld	r29, X
    1d28:	17 97       	sbiw	r26, 0x07	; 7
    1d2a:	3d 83       	std	Y+5, r19	; 0x05
    1d2c:	2c 83       	std	Y+4, r18	; 0x04
    1d2e:	17 96       	adiw	r26, 0x07	; 7
    1d30:	3c 93       	st	X, r19
    1d32:	2e 93       	st	-X, r18
    1d34:	16 97       	sbiw	r26, 0x06	; 6
    1d36:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d38:	8a 9f       	mul	r24, r26
    1d3a:	d0 01       	movw	r26, r0
    1d3c:	11 24       	eor	r1, r1
    1d3e:	a1 55       	subi	r26, 0x51	; 81
    1d40:	bb 4e       	sbci	r27, 0xEB	; 235
    1d42:	b5 87       	std	Z+13, r27	; 0x0d
    1d44:	a4 87       	std	Z+12, r26	; 0x0c
    1d46:	8c 91       	ld	r24, X
    1d48:	8f 5f       	subi	r24, 0xFF	; 255
    1d4a:	8c 93       	st	X, r24
    1d4c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d4e:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
    1d52:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1d56:	5a 96       	adiw	r26, 0x1a	; 26
    1d58:	8c 91       	ld	r24, X
    1d5a:	98 17       	cp	r25, r24
    1d5c:	30 f0       	brcs	.+12     	; 0x1d6a <xTaskResumeAll+0x140>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <xTaskResumeAll+0x140>
    1d66:	e0 e0       	ldi	r30, 0x00	; 0
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 91 8a 14 	lds	r24, 0x148A	; 0x80148a <xPendingReadyList>
    1d6e:	81 11       	cpse	r24, r1
    1d70:	73 cf       	rjmp	.-282    	; 0x1c58 <xTaskResumeAll+0x2e>
    1d72:	ef 2b       	or	r30, r31
    1d74:	09 f0       	breq	.+2      	; 0x1d78 <xTaskResumeAll+0x14e>
    1d76:	7f db       	rcall	.-2306   	; 0x1476 <prvResetNextTaskUnblockTime>
    1d78:	c0 90 68 14 	lds	r12, 0x1468	; 0x801468 <xPendedTicks>
    1d7c:	d0 90 69 14 	lds	r13, 0x1469	; 0x801469 <xPendedTicks+0x1>
    1d80:	e0 90 6a 14 	lds	r14, 0x146A	; 0x80146a <xPendedTicks+0x2>
    1d84:	f0 90 6b 14 	lds	r15, 0x146B	; 0x80146b <xPendedTicks+0x3>
    1d88:	c1 14       	cp	r12, r1
    1d8a:	d1 04       	cpc	r13, r1
    1d8c:	e1 04       	cpc	r14, r1
    1d8e:	f1 04       	cpc	r15, r1
    1d90:	a1 f0       	breq	.+40     	; 0x1dba <xTaskResumeAll+0x190>
    1d92:	1f de       	rcall	.-962    	; 0x19d2 <xTaskIncrementTick>
    1d94:	88 23       	and	r24, r24
    1d96:	19 f0       	breq	.+6      	; 0x1d9e <xTaskResumeAll+0x174>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	c8 1a       	sub	r12, r24
    1da2:	d1 08       	sbc	r13, r1
    1da4:	e1 08       	sbc	r14, r1
    1da6:	f1 08       	sbc	r15, r1
    1da8:	a1 f7       	brne	.-24     	; 0x1d92 <xTaskResumeAll+0x168>
    1daa:	10 92 68 14 	sts	0x1468, r1	; 0x801468 <xPendedTicks>
    1dae:	10 92 69 14 	sts	0x1469, r1	; 0x801469 <xPendedTicks+0x1>
    1db2:	10 92 6a 14 	sts	0x146A, r1	; 0x80146a <xPendedTicks+0x2>
    1db6:	10 92 6b 14 	sts	0x146B, r1	; 0x80146b <xPendedTicks+0x3>
    1dba:	80 91 67 14 	lds	r24, 0x1467	; 0x801467 <xYieldPending>
    1dbe:	88 23       	and	r24, r24
    1dc0:	31 f0       	breq	.+12     	; 0x1dce <xTaskResumeAll+0x1a4>
    1dc2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	03 c0       	rjmp	.+6      	; 0x1dd0 <xTaskResumeAll+0x1a6>
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	01 c0       	rjmp	.+2      	; 0x1dd0 <xTaskResumeAll+0x1a6>
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	08 95       	ret

00001de2 <xTaskDelayUntil>:
    1de2:	8f 92       	push	r8
    1de4:	9f 92       	push	r9
    1de6:	af 92       	push	r10
    1de8:	bf 92       	push	r11
    1dea:	cf 92       	push	r12
    1dec:	df 92       	push	r13
    1dee:	ef 92       	push	r14
    1df0:	ff 92       	push	r15
    1df2:	1f 93       	push	r17
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	ec 01       	movw	r28, r24
    1dfa:	6a 01       	movw	r12, r20
    1dfc:	7b 01       	movw	r14, r22
    1dfe:	d5 dd       	rcall	.-1110   	; 0x19aa <vTaskSuspendAll>
    1e00:	80 90 6e 14 	lds	r8, 0x146E	; 0x80146e <xTickCount>
    1e04:	90 90 6f 14 	lds	r9, 0x146F	; 0x80146f <xTickCount+0x1>
    1e08:	a0 90 70 14 	lds	r10, 0x1470	; 0x801470 <xTickCount+0x2>
    1e0c:	b0 90 71 14 	lds	r11, 0x1471	; 0x801471 <xTickCount+0x3>
    1e10:	88 81       	ld	r24, Y
    1e12:	99 81       	ldd	r25, Y+1	; 0x01
    1e14:	aa 81       	ldd	r26, Y+2	; 0x02
    1e16:	bb 81       	ldd	r27, Y+3	; 0x03
    1e18:	ac 01       	movw	r20, r24
    1e1a:	bd 01       	movw	r22, r26
    1e1c:	4c 0d       	add	r20, r12
    1e1e:	5d 1d       	adc	r21, r13
    1e20:	6e 1d       	adc	r22, r14
    1e22:	7f 1d       	adc	r23, r15
    1e24:	88 16       	cp	r8, r24
    1e26:	99 06       	cpc	r9, r25
    1e28:	aa 06       	cpc	r10, r26
    1e2a:	bb 06       	cpc	r11, r27
    1e2c:	60 f4       	brcc	.+24     	; 0x1e46 <xTaskDelayUntil+0x64>
    1e2e:	48 17       	cp	r20, r24
    1e30:	59 07       	cpc	r21, r25
    1e32:	6a 07       	cpc	r22, r26
    1e34:	7b 07       	cpc	r23, r27
    1e36:	98 f4       	brcc	.+38     	; 0x1e5e <xTaskDelayUntil+0x7c>
    1e38:	84 16       	cp	r8, r20
    1e3a:	95 06       	cpc	r9, r21
    1e3c:	a6 06       	cpc	r10, r22
    1e3e:	b7 06       	cpc	r11, r23
    1e40:	80 f0       	brcs	.+32     	; 0x1e62 <xTaskDelayUntil+0x80>
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	13 c0       	rjmp	.+38     	; 0x1e6c <xTaskDelayUntil+0x8a>
    1e46:	48 17       	cp	r20, r24
    1e48:	59 07       	cpc	r21, r25
    1e4a:	6a 07       	cpc	r22, r26
    1e4c:	7b 07       	cpc	r23, r27
    1e4e:	58 f0       	brcs	.+22     	; 0x1e66 <xTaskDelayUntil+0x84>
    1e50:	84 16       	cp	r8, r20
    1e52:	95 06       	cpc	r9, r21
    1e54:	a6 06       	cpc	r10, r22
    1e56:	b7 06       	cpc	r11, r23
    1e58:	40 f0       	brcs	.+16     	; 0x1e6a <xTaskDelayUntil+0x88>
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <xTaskDelayUntil+0x8a>
    1e5e:	10 e0       	ldi	r17, 0x00	; 0
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <xTaskDelayUntil+0x8a>
    1e62:	11 e0       	ldi	r17, 0x01	; 1
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <xTaskDelayUntil+0x8a>
    1e66:	11 e0       	ldi	r17, 0x01	; 1
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <xTaskDelayUntil+0x8a>
    1e6a:	11 e0       	ldi	r17, 0x01	; 1
    1e6c:	48 83       	st	Y, r20
    1e6e:	59 83       	std	Y+1, r21	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02
    1e72:	7b 83       	std	Y+3, r23	; 0x03
    1e74:	11 23       	and	r17, r17
    1e76:	41 f0       	breq	.+16     	; 0x1e88 <xTaskDelayUntil+0xa6>
    1e78:	cb 01       	movw	r24, r22
    1e7a:	ba 01       	movw	r22, r20
    1e7c:	68 19       	sub	r22, r8
    1e7e:	79 09       	sbc	r23, r9
    1e80:	8a 09       	sbc	r24, r10
    1e82:	9b 09       	sbc	r25, r11
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	6b dc       	rcall	.-1834   	; 0x175e <prvAddCurrentTaskToDelayedList>
    1e88:	d0 de       	rcall	.-608    	; 0x1c2a <xTaskResumeAll>
    1e8a:	81 11       	cpse	r24, r1
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <xTaskDelayUntil+0xb0>
    1e8e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    1e92:	81 2f       	mov	r24, r17
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	1f 91       	pop	r17
    1e9a:	ff 90       	pop	r15
    1e9c:	ef 90       	pop	r14
    1e9e:	df 90       	pop	r13
    1ea0:	cf 90       	pop	r12
    1ea2:	bf 90       	pop	r11
    1ea4:	af 90       	pop	r10
    1ea6:	9f 90       	pop	r9
    1ea8:	8f 90       	pop	r8
    1eaa:	08 95       	ret

00001eac <vTaskDelay>:
    1eac:	cf 92       	push	r12
    1eae:	df 92       	push	r13
    1eb0:	ef 92       	push	r14
    1eb2:	ff 92       	push	r15
    1eb4:	6b 01       	movw	r12, r22
    1eb6:	7c 01       	movw	r14, r24
    1eb8:	67 2b       	or	r22, r23
    1eba:	68 2b       	or	r22, r24
    1ebc:	69 2b       	or	r22, r25
    1ebe:	39 f0       	breq	.+14     	; 0x1ece <vTaskDelay+0x22>
    1ec0:	74 dd       	rcall	.-1304   	; 0x19aa <vTaskSuspendAll>
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	c7 01       	movw	r24, r14
    1ec6:	b6 01       	movw	r22, r12
    1ec8:	4a dc       	rcall	.-1900   	; 0x175e <prvAddCurrentTaskToDelayedList>
    1eca:	af de       	rcall	.-674    	; 0x1c2a <xTaskResumeAll>
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <vTaskDelay+0x24>
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vTaskDelay+0x2c>
    1ed4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	08 95       	ret

00001ee2 <vTaskSwitchContext>:
    1ee2:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    1ee6:	88 23       	and	r24, r24
    1ee8:	21 f0       	breq	.+8      	; 0x1ef2 <vTaskSwitchContext+0x10>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    1ef0:	08 95       	ret
    1ef2:	10 92 67 14 	sts	0x1467, r1	; 0x801467 <xYieldPending>
    1ef6:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1efa:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1efe:	20 81       	ld	r18, Z
    1f00:	31 81       	ldd	r19, Z+1	; 0x01
    1f02:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    1f06:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f0a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f0c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1f0e:	82 17       	cp	r24, r18
    1f10:	93 07       	cpc	r25, r19
    1f12:	60 f0       	brcs	.+24     	; 0x1f2c <vTaskSwitchContext+0x4a>
    1f14:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    1f18:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f1c:	63 5e       	subi	r22, 0xE3	; 227
    1f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f20:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    1f24:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1f28:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <vApplicationStackOverflowHook>
    1f2c:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    1f30:	01 c0       	rjmp	.+2      	; 0x1f34 <vTaskSwitchContext+0x52>
    1f32:	81 50       	subi	r24, 0x01	; 1
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	9b e0       	ldi	r25, 0x0B	; 11
    1f3a:	92 9f       	mul	r25, r18
    1f3c:	f0 01       	movw	r30, r0
    1f3e:	93 9f       	mul	r25, r19
    1f40:	f0 0d       	add	r31, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	e1 55       	subi	r30, 0x51	; 81
    1f46:	fb 4e       	sbci	r31, 0xEB	; 235
    1f48:	90 81       	ld	r25, Z
    1f4a:	99 23       	and	r25, r25
    1f4c:	91 f3       	breq	.-28     	; 0x1f32 <vTaskSwitchContext+0x50>
    1f4e:	9b e0       	ldi	r25, 0x0B	; 11
    1f50:	92 9f       	mul	r25, r18
    1f52:	a0 01       	movw	r20, r0
    1f54:	93 9f       	mul	r25, r19
    1f56:	50 0d       	add	r21, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	df 01       	movw	r26, r30
    1f5c:	01 80       	ldd	r0, Z+1	; 0x01
    1f5e:	f2 81       	ldd	r31, Z+2	; 0x02
    1f60:	e0 2d       	mov	r30, r0
    1f62:	04 80       	ldd	r0, Z+4	; 0x04
    1f64:	f5 81       	ldd	r31, Z+5	; 0x05
    1f66:	e0 2d       	mov	r30, r0
    1f68:	12 96       	adiw	r26, 0x02	; 2
    1f6a:	fc 93       	st	X, r31
    1f6c:	ee 93       	st	-X, r30
    1f6e:	11 97       	sbiw	r26, 0x01	; 1
    1f70:	4e 54       	subi	r20, 0x4E	; 78
    1f72:	5b 4e       	sbci	r21, 0xEB	; 235
    1f74:	e4 17       	cp	r30, r20
    1f76:	f5 07       	cpc	r31, r21
    1f78:	29 f4       	brne	.+10     	; 0x1f84 <vTaskSwitchContext+0xa2>
    1f7a:	44 81       	ldd	r20, Z+4	; 0x04
    1f7c:	55 81       	ldd	r21, Z+5	; 0x05
    1f7e:	fd 01       	movw	r30, r26
    1f80:	52 83       	std	Z+2, r21	; 0x02
    1f82:	41 83       	std	Z+1, r20	; 0x01
    1f84:	9b e0       	ldi	r25, 0x0B	; 11
    1f86:	92 9f       	mul	r25, r18
    1f88:	f0 01       	movw	r30, r0
    1f8a:	93 9f       	mul	r25, r19
    1f8c:	f0 0d       	add	r31, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	e1 55       	subi	r30, 0x51	; 81
    1f92:	fb 4e       	sbci	r31, 0xEB	; 235
    1f94:	01 80       	ldd	r0, Z+1	; 0x01
    1f96:	f2 81       	ldd	r31, Z+2	; 0x02
    1f98:	e0 2d       	mov	r30, r0
    1f9a:	20 85       	ldd	r18, Z+8	; 0x08
    1f9c:	31 85       	ldd	r19, Z+9	; 0x09
    1f9e:	30 93 1e 15 	sts	0x151E, r19	; 0x80151e <pxCurrentTCB+0x1>
    1fa2:	20 93 1d 15 	sts	0x151D, r18	; 0x80151d <pxCurrentTCB>
    1fa6:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <uxTopReadyPriority>
    1faa:	08 95       	ret

00001fac <vTaskPlaceOnEventList>:
    1fac:	cf 92       	push	r12
    1fae:	df 92       	push	r13
    1fb0:	ef 92       	push	r14
    1fb2:	ff 92       	push	r15
    1fb4:	6a 01       	movw	r12, r20
    1fb6:	7b 01       	movw	r14, r22
    1fb8:	60 91 1d 15 	lds	r22, 0x151D	; 0x80151d <pxCurrentTCB>
    1fbc:	70 91 1e 15 	lds	r23, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1fc0:	62 5f       	subi	r22, 0xF2	; 242
    1fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc4:	0e 94 b7 02 	call	0x56e	; 0x56e <vListInsert>
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b6 01       	movw	r22, r12
    1fce:	c7 db       	rcall	.-2162   	; 0x175e <prvAddCurrentTaskToDelayedList>
    1fd0:	ff 90       	pop	r15
    1fd2:	ef 90       	pop	r14
    1fd4:	df 90       	pop	r13
    1fd6:	cf 90       	pop	r12
    1fd8:	08 95       	ret

00001fda <vTaskPlaceOnEventListRestricted>:
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
    1fde:	fc 01       	movw	r30, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	ba 01       	movw	r22, r20
    1fe4:	a1 81       	ldd	r26, Z+1	; 0x01
    1fe6:	b2 81       	ldd	r27, Z+2	; 0x02
    1fe8:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    1fec:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1ff0:	bb 8b       	std	Y+19, r27	; 0x13
    1ff2:	aa 8b       	std	Y+18, r26	; 0x12
    1ff4:	c0 91 1d 15 	lds	r28, 0x151D	; 0x80151d <pxCurrentTCB>
    1ff8:	d0 91 1e 15 	lds	r29, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    1ffc:	16 96       	adiw	r26, 0x06	; 6
    1ffe:	4d 91       	ld	r20, X+
    2000:	5c 91       	ld	r21, X
    2002:	17 97       	sbiw	r26, 0x07	; 7
    2004:	5d 8b       	std	Y+21, r21	; 0x15
    2006:	4c 8b       	std	Y+20, r20	; 0x14
    2008:	16 96       	adiw	r26, 0x06	; 6
    200a:	cd 91       	ld	r28, X+
    200c:	dc 91       	ld	r29, X
    200e:	17 97       	sbiw	r26, 0x07	; 7
    2010:	40 91 1d 15 	lds	r20, 0x151D	; 0x80151d <pxCurrentTCB>
    2014:	50 91 1e 15 	lds	r21, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2018:	42 5f       	subi	r20, 0xF2	; 242
    201a:	5f 4f       	sbci	r21, 0xFF	; 255
    201c:	5d 83       	std	Y+5, r21	; 0x05
    201e:	4c 83       	std	Y+4, r20	; 0x04
    2020:	40 91 1d 15 	lds	r20, 0x151D	; 0x80151d <pxCurrentTCB>
    2024:	50 91 1e 15 	lds	r21, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2028:	42 5f       	subi	r20, 0xF2	; 242
    202a:	5f 4f       	sbci	r21, 0xFF	; 255
    202c:	17 96       	adiw	r26, 0x07	; 7
    202e:	5c 93       	st	X, r21
    2030:	4e 93       	st	-X, r20
    2032:	16 97       	sbiw	r26, 0x06	; 6
    2034:	a0 91 1d 15 	lds	r26, 0x151D	; 0x80151d <pxCurrentTCB>
    2038:	b0 91 1e 15 	lds	r27, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    203c:	59 96       	adiw	r26, 0x19	; 25
    203e:	fc 93       	st	X, r31
    2040:	ee 93       	st	-X, r30
    2042:	58 97       	sbiw	r26, 0x18	; 24
    2044:	30 81       	ld	r19, Z
    2046:	3f 5f       	subi	r19, 0xFF	; 255
    2048:	30 83       	st	Z, r19
    204a:	22 23       	and	r18, r18
    204c:	19 f0       	breq	.+6      	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    204e:	6f ef       	ldi	r22, 0xFF	; 255
    2050:	7f ef       	ldi	r23, 0xFF	; 255
    2052:	cb 01       	movw	r24, r22
    2054:	42 2f       	mov	r20, r18
    2056:	83 db       	rcall	.-2298   	; 0x175e <prvAddCurrentTaskToDelayedList>
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <xTaskRemoveFromEventList>:
    205e:	cf 93       	push	r28
    2060:	df 93       	push	r29
    2062:	dc 01       	movw	r26, r24
    2064:	17 96       	adiw	r26, 0x07	; 7
    2066:	ed 91       	ld	r30, X+
    2068:	fc 91       	ld	r31, X
    206a:	18 97       	sbiw	r26, 0x08	; 8
    206c:	00 84       	ldd	r0, Z+8	; 0x08
    206e:	f1 85       	ldd	r31, Z+9	; 0x09
    2070:	e0 2d       	mov	r30, r0
    2072:	a0 8d       	ldd	r26, Z+24	; 0x18
    2074:	b1 8d       	ldd	r27, Z+25	; 0x19
    2076:	c2 89       	ldd	r28, Z+18	; 0x12
    2078:	d3 89       	ldd	r29, Z+19	; 0x13
    207a:	84 89       	ldd	r24, Z+20	; 0x14
    207c:	95 89       	ldd	r25, Z+21	; 0x15
    207e:	9f 83       	std	Y+7, r25	; 0x07
    2080:	8e 83       	std	Y+6, r24	; 0x06
    2082:	c4 89       	ldd	r28, Z+20	; 0x14
    2084:	d5 89       	ldd	r29, Z+21	; 0x15
    2086:	82 89       	ldd	r24, Z+18	; 0x12
    2088:	93 89       	ldd	r25, Z+19	; 0x13
    208a:	9d 83       	std	Y+5, r25	; 0x05
    208c:	8c 83       	std	Y+4, r24	; 0x04
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	8d 91       	ld	r24, X+
    2092:	9c 91       	ld	r25, X
    2094:	12 97       	sbiw	r26, 0x02	; 2
    2096:	9f 01       	movw	r18, r30
    2098:	22 5f       	subi	r18, 0xF2	; 242
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
    209c:	82 17       	cp	r24, r18
    209e:	93 07       	cpc	r25, r19
    20a0:	31 f4       	brne	.+12     	; 0x20ae <xTaskRemoveFromEventList+0x50>
    20a2:	84 89       	ldd	r24, Z+20	; 0x14
    20a4:	95 89       	ldd	r25, Z+21	; 0x15
    20a6:	12 96       	adiw	r26, 0x02	; 2
    20a8:	9c 93       	st	X, r25
    20aa:	8e 93       	st	-X, r24
    20ac:	11 97       	sbiw	r26, 0x01	; 1
    20ae:	11 8e       	std	Z+25, r1	; 0x19
    20b0:	10 8e       	std	Z+24, r1	; 0x18
    20b2:	8c 91       	ld	r24, X
    20b4:	81 50       	subi	r24, 0x01	; 1
    20b6:	8c 93       	st	X, r24
    20b8:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    20bc:	81 11       	cpse	r24, r1
    20be:	52 c0       	rjmp	.+164    	; 0x2164 <xTaskRemoveFromEventList+0x106>
    20c0:	a4 85       	ldd	r26, Z+12	; 0x0c
    20c2:	b5 85       	ldd	r27, Z+13	; 0x0d
    20c4:	c6 81       	ldd	r28, Z+6	; 0x06
    20c6:	d7 81       	ldd	r29, Z+7	; 0x07
    20c8:	80 85       	ldd	r24, Z+8	; 0x08
    20ca:	91 85       	ldd	r25, Z+9	; 0x09
    20cc:	9f 83       	std	Y+7, r25	; 0x07
    20ce:	8e 83       	std	Y+6, r24	; 0x06
    20d0:	c0 85       	ldd	r28, Z+8	; 0x08
    20d2:	d1 85       	ldd	r29, Z+9	; 0x09
    20d4:	86 81       	ldd	r24, Z+6	; 0x06
    20d6:	97 81       	ldd	r25, Z+7	; 0x07
    20d8:	9d 83       	std	Y+5, r25	; 0x05
    20da:	8c 83       	std	Y+4, r24	; 0x04
    20dc:	11 96       	adiw	r26, 0x01	; 1
    20de:	8d 91       	ld	r24, X+
    20e0:	9c 91       	ld	r25, X
    20e2:	12 97       	sbiw	r26, 0x02	; 2
    20e4:	9f 01       	movw	r18, r30
    20e6:	2e 5f       	subi	r18, 0xFE	; 254
    20e8:	3f 4f       	sbci	r19, 0xFF	; 255
    20ea:	82 17       	cp	r24, r18
    20ec:	93 07       	cpc	r25, r19
    20ee:	31 f4       	brne	.+12     	; 0x20fc <xTaskRemoveFromEventList+0x9e>
    20f0:	80 85       	ldd	r24, Z+8	; 0x08
    20f2:	91 85       	ldd	r25, Z+9	; 0x09
    20f4:	12 96       	adiw	r26, 0x02	; 2
    20f6:	9c 93       	st	X, r25
    20f8:	8e 93       	st	-X, r24
    20fa:	11 97       	sbiw	r26, 0x01	; 1
    20fc:	15 86       	std	Z+13, r1	; 0x0d
    20fe:	14 86       	std	Z+12, r1	; 0x0c
    2100:	8c 91       	ld	r24, X
    2102:	81 50       	subi	r24, 0x01	; 1
    2104:	8c 93       	st	X, r24
    2106:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2108:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    210c:	8a 17       	cp	r24, r26
    210e:	10 f4       	brcc	.+4      	; 0x2114 <xTaskRemoveFromEventList+0xb6>
    2110:	a0 93 6d 14 	sts	0x146D, r26	; 0x80146d <uxTopReadyPriority>
    2114:	8b e0       	ldi	r24, 0x0B	; 11
    2116:	8a 9f       	mul	r24, r26
    2118:	d0 01       	movw	r26, r0
    211a:	11 24       	eor	r1, r1
    211c:	a1 55       	subi	r26, 0x51	; 81
    211e:	bb 4e       	sbci	r27, 0xEB	; 235
    2120:	11 96       	adiw	r26, 0x01	; 1
    2122:	0d 90       	ld	r0, X+
    2124:	bc 91       	ld	r27, X
    2126:	a0 2d       	mov	r26, r0
    2128:	b7 83       	std	Z+7, r27	; 0x07
    212a:	a6 83       	std	Z+6, r26	; 0x06
    212c:	16 96       	adiw	r26, 0x06	; 6
    212e:	4d 91       	ld	r20, X+
    2130:	5c 91       	ld	r21, X
    2132:	17 97       	sbiw	r26, 0x07	; 7
    2134:	51 87       	std	Z+9, r21	; 0x09
    2136:	40 87       	std	Z+8, r20	; 0x08
    2138:	16 96       	adiw	r26, 0x06	; 6
    213a:	cd 91       	ld	r28, X+
    213c:	dc 91       	ld	r29, X
    213e:	17 97       	sbiw	r26, 0x07	; 7
    2140:	3d 83       	std	Y+5, r19	; 0x05
    2142:	2c 83       	std	Y+4, r18	; 0x04
    2144:	17 96       	adiw	r26, 0x07	; 7
    2146:	3c 93       	st	X, r19
    2148:	2e 93       	st	-X, r18
    214a:	16 97       	sbiw	r26, 0x06	; 6
    214c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    214e:	8a 9f       	mul	r24, r26
    2150:	d0 01       	movw	r26, r0
    2152:	11 24       	eor	r1, r1
    2154:	a1 55       	subi	r26, 0x51	; 81
    2156:	bb 4e       	sbci	r27, 0xEB	; 235
    2158:	b5 87       	std	Z+13, r27	; 0x0d
    215a:	a4 87       	std	Z+12, r26	; 0x0c
    215c:	8c 91       	ld	r24, X
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	8c 93       	st	X, r24
    2162:	1c c0       	rjmp	.+56     	; 0x219c <xTaskRemoveFromEventList+0x13e>
    2164:	4a e8       	ldi	r20, 0x8A	; 138
    2166:	54 e1       	ldi	r21, 0x14	; 20
    2168:	da 01       	movw	r26, r20
    216a:	11 96       	adiw	r26, 0x01	; 1
    216c:	cd 91       	ld	r28, X+
    216e:	dc 91       	ld	r29, X
    2170:	12 97       	sbiw	r26, 0x02	; 2
    2172:	d3 8b       	std	Z+19, r29	; 0x13
    2174:	c2 8b       	std	Z+18, r28	; 0x12
    2176:	8e 81       	ldd	r24, Y+6	; 0x06
    2178:	9f 81       	ldd	r25, Y+7	; 0x07
    217a:	95 8b       	std	Z+21, r25	; 0x15
    217c:	84 8b       	std	Z+20, r24	; 0x14
    217e:	8e 81       	ldd	r24, Y+6	; 0x06
    2180:	9f 81       	ldd	r25, Y+7	; 0x07
    2182:	dc 01       	movw	r26, r24
    2184:	15 96       	adiw	r26, 0x05	; 5
    2186:	3c 93       	st	X, r19
    2188:	2e 93       	st	-X, r18
    218a:	14 97       	sbiw	r26, 0x04	; 4
    218c:	3f 83       	std	Y+7, r19	; 0x07
    218e:	2e 83       	std	Y+6, r18	; 0x06
    2190:	51 8f       	std	Z+25, r21	; 0x19
    2192:	40 8f       	std	Z+24, r20	; 0x18
    2194:	da 01       	movw	r26, r20
    2196:	8c 91       	ld	r24, X
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	8c 93       	st	X, r24
    219c:	92 8d       	ldd	r25, Z+26	; 0x1a
    219e:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    21a2:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    21a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21a8:	89 17       	cp	r24, r25
    21aa:	20 f4       	brcc	.+8      	; 0x21b4 <xTaskRemoveFromEventList+0x156>
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    21b2:	01 c0       	rjmp	.+2      	; 0x21b6 <xTaskRemoveFromEventList+0x158>
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <vTaskSetTimeOutState>:
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	0f 92       	push	r0
    21c2:	20 91 66 14 	lds	r18, 0x1466	; 0x801466 <xNumOfOverflows>
    21c6:	fc 01       	movw	r30, r24
    21c8:	20 83       	st	Z, r18
    21ca:	40 91 6e 14 	lds	r20, 0x146E	; 0x80146e <xTickCount>
    21ce:	50 91 6f 14 	lds	r21, 0x146F	; 0x80146f <xTickCount+0x1>
    21d2:	60 91 70 14 	lds	r22, 0x1470	; 0x801470 <xTickCount+0x2>
    21d6:	70 91 71 14 	lds	r23, 0x1471	; 0x801471 <xTickCount+0x3>
    21da:	41 83       	std	Z+1, r20	; 0x01
    21dc:	52 83       	std	Z+2, r21	; 0x02
    21de:	63 83       	std	Z+3, r22	; 0x03
    21e0:	74 83       	std	Z+4, r23	; 0x04
    21e2:	0f 90       	pop	r0
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	08 95       	ret

000021e8 <vTaskInternalSetTimeOutState>:
    21e8:	20 91 66 14 	lds	r18, 0x1466	; 0x801466 <xNumOfOverflows>
    21ec:	fc 01       	movw	r30, r24
    21ee:	20 83       	st	Z, r18
    21f0:	40 91 6e 14 	lds	r20, 0x146E	; 0x80146e <xTickCount>
    21f4:	50 91 6f 14 	lds	r21, 0x146F	; 0x80146f <xTickCount+0x1>
    21f8:	60 91 70 14 	lds	r22, 0x1470	; 0x801470 <xTickCount+0x2>
    21fc:	70 91 71 14 	lds	r23, 0x1471	; 0x801471 <xTickCount+0x3>
    2200:	41 83       	std	Z+1, r20	; 0x01
    2202:	52 83       	std	Z+2, r21	; 0x02
    2204:	63 83       	std	Z+3, r22	; 0x03
    2206:	74 83       	std	Z+4, r23	; 0x04
    2208:	08 95       	ret

0000220a <xTaskCheckForTimeOut>:
    220a:	8f 92       	push	r8
    220c:	9f 92       	push	r9
    220e:	af 92       	push	r10
    2210:	bf 92       	push	r11
    2212:	cf 92       	push	r12
    2214:	df 92       	push	r13
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	fb 01       	movw	r30, r22
    2224:	0f b6       	in	r0, 0x3f	; 63
    2226:	f8 94       	cli
    2228:	0f 92       	push	r0
    222a:	c0 90 6e 14 	lds	r12, 0x146E	; 0x80146e <xTickCount>
    222e:	d0 90 6f 14 	lds	r13, 0x146F	; 0x80146f <xTickCount+0x1>
    2232:	e0 90 70 14 	lds	r14, 0x1470	; 0x801470 <xTickCount+0x2>
    2236:	f0 90 71 14 	lds	r15, 0x1471	; 0x801471 <xTickCount+0x3>
    223a:	dc 01       	movw	r26, r24
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	0d 91       	ld	r16, X+
    2240:	1d 91       	ld	r17, X+
    2242:	2d 91       	ld	r18, X+
    2244:	3c 91       	ld	r19, X
    2246:	14 97       	sbiw	r26, 0x04	; 4
    2248:	46 01       	movw	r8, r12
    224a:	57 01       	movw	r10, r14
    224c:	80 1a       	sub	r8, r16
    224e:	91 0a       	sbc	r9, r17
    2250:	a2 0a       	sbc	r10, r18
    2252:	b3 0a       	sbc	r11, r19
    2254:	40 81       	ld	r20, Z
    2256:	51 81       	ldd	r21, Z+1	; 0x01
    2258:	62 81       	ldd	r22, Z+2	; 0x02
    225a:	73 81       	ldd	r23, Z+3	; 0x03
    225c:	4f 3f       	cpi	r20, 0xFF	; 255
    225e:	bf ef       	ldi	r27, 0xFF	; 255
    2260:	5b 07       	cpc	r21, r27
    2262:	6b 07       	cpc	r22, r27
    2264:	7b 07       	cpc	r23, r27
    2266:	39 f1       	breq	.+78     	; 0x22b6 <xTaskCheckForTimeOut+0xac>
    2268:	ec 01       	movw	r28, r24
    226a:	b8 81       	ld	r27, Y
    226c:	a0 91 66 14 	lds	r26, 0x1466	; 0x801466 <xNumOfOverflows>
    2270:	ba 17       	cp	r27, r26
    2272:	59 f0       	breq	.+22     	; 0x228a <xTaskCheckForTimeOut+0x80>
    2274:	c0 16       	cp	r12, r16
    2276:	d1 06       	cpc	r13, r17
    2278:	e2 06       	cpc	r14, r18
    227a:	f3 06       	cpc	r15, r19
    227c:	30 f0       	brcs	.+12     	; 0x228a <xTaskCheckForTimeOut+0x80>
    227e:	10 82       	st	Z, r1
    2280:	11 82       	std	Z+1, r1	; 0x01
    2282:	12 82       	std	Z+2, r1	; 0x02
    2284:	13 82       	std	Z+3, r1	; 0x03
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	17 c0       	rjmp	.+46     	; 0x22b8 <xTaskCheckForTimeOut+0xae>
    228a:	84 16       	cp	r8, r20
    228c:	95 06       	cpc	r9, r21
    228e:	a6 06       	cpc	r10, r22
    2290:	b7 06       	cpc	r11, r23
    2292:	58 f4       	brcc	.+22     	; 0x22aa <xTaskCheckForTimeOut+0xa0>
    2294:	48 19       	sub	r20, r8
    2296:	59 09       	sbc	r21, r9
    2298:	6a 09       	sbc	r22, r10
    229a:	7b 09       	sbc	r23, r11
    229c:	40 83       	st	Z, r20
    229e:	51 83       	std	Z+1, r21	; 0x01
    22a0:	62 83       	std	Z+2, r22	; 0x02
    22a2:	73 83       	std	Z+3, r23	; 0x03
    22a4:	a1 df       	rcall	.-190    	; 0x21e8 <vTaskInternalSetTimeOutState>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	07 c0       	rjmp	.+14     	; 0x22b8 <xTaskCheckForTimeOut+0xae>
    22aa:	10 82       	st	Z, r1
    22ac:	11 82       	std	Z+1, r1	; 0x01
    22ae:	12 82       	std	Z+2, r1	; 0x02
    22b0:	13 82       	std	Z+3, r1	; 0x03
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <xTaskCheckForTimeOut+0xae>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	0f 90       	pop	r0
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	df 90       	pop	r13
    22ca:	cf 90       	pop	r12
    22cc:	bf 90       	pop	r11
    22ce:	af 90       	pop	r10
    22d0:	9f 90       	pop	r9
    22d2:	8f 90       	pop	r8
    22d4:	08 95       	ret

000022d6 <vTaskMissedYield>:
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	80 93 67 14 	sts	0x1467, r24	; 0x801467 <xYieldPending>
    22dc:	08 95       	ret

000022de <xTaskGetCurrentTaskHandle>:
    22de:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    22e2:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    22e6:	08 95       	ret

000022e8 <xTaskGetSchedulerState>:
    22e8:	80 91 6c 14 	lds	r24, 0x146C	; 0x80146c <xSchedulerRunning>
    22ec:	88 23       	and	r24, r24
    22ee:	31 f0       	breq	.+12     	; 0x22fc <xTaskGetSchedulerState+0x14>
    22f0:	80 91 5e 14 	lds	r24, 0x145E	; 0x80145e <uxSchedulerSuspended>
    22f4:	81 11       	cpse	r24, r1
    22f6:	04 c0       	rjmp	.+8      	; 0x2300 <xTaskGetSchedulerState+0x18>
    22f8:	82 e0       	ldi	r24, 0x02	; 2
    22fa:	08 95       	ret
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	08 95       	ret
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	08 95       	ret

00002304 <xTaskPriorityDisinherit>:
    2304:	0f 93       	push	r16
    2306:	1f 93       	push	r17
    2308:	cf 93       	push	r28
    230a:	df 93       	push	r29
    230c:	fc 01       	movw	r30, r24
    230e:	89 2b       	or	r24, r25
    2310:	09 f4       	brne	.+2      	; 0x2314 <xTaskPriorityDisinherit+0x10>
    2312:	49 c0       	rjmp	.+146    	; 0x23a6 <xTaskPriorityDisinherit+0xa2>
    2314:	86 a5       	ldd	r24, Z+46	; 0x2e
    2316:	81 50       	subi	r24, 0x01	; 1
    2318:	86 a7       	std	Z+46, r24	; 0x2e
    231a:	22 8d       	ldd	r18, Z+26	; 0x1a
    231c:	95 a5       	ldd	r25, Z+45	; 0x2d
    231e:	29 17       	cp	r18, r25
    2320:	09 f4       	brne	.+2      	; 0x2324 <xTaskPriorityDisinherit+0x20>
    2322:	43 c0       	rjmp	.+134    	; 0x23aa <xTaskPriorityDisinherit+0xa6>
    2324:	81 11       	cpse	r24, r1
    2326:	43 c0       	rjmp	.+134    	; 0x23ae <xTaskPriorityDisinherit+0xaa>
    2328:	ef 01       	movw	r28, r30
    232a:	8f 01       	movw	r16, r30
    232c:	0e 5f       	subi	r16, 0xFE	; 254
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	c8 01       	movw	r24, r16
    2332:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uxListRemove>
    2336:	ed a5       	ldd	r30, Y+45	; 0x2d
    2338:	ea 8f       	std	Y+26, r30	; 0x1a
    233a:	8a e0       	ldi	r24, 0x0A	; 10
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a0 e0       	ldi	r26, 0x00	; 0
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	8e 1b       	sub	r24, r30
    2344:	91 09       	sbc	r25, r1
    2346:	a1 09       	sbc	r26, r1
    2348:	b1 09       	sbc	r27, r1
    234a:	8e 87       	std	Y+14, r24	; 0x0e
    234c:	9f 87       	std	Y+15, r25	; 0x0f
    234e:	a8 8b       	std	Y+16, r26	; 0x10
    2350:	b9 8b       	std	Y+17, r27	; 0x11
    2352:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    2356:	8e 17       	cp	r24, r30
    2358:	10 f4       	brcc	.+4      	; 0x235e <xTaskPriorityDisinherit+0x5a>
    235a:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    235e:	8b e0       	ldi	r24, 0x0B	; 11
    2360:	8e 9f       	mul	r24, r30
    2362:	f0 01       	movw	r30, r0
    2364:	11 24       	eor	r1, r1
    2366:	e1 55       	subi	r30, 0x51	; 81
    2368:	fb 4e       	sbci	r31, 0xEB	; 235
    236a:	01 80       	ldd	r0, Z+1	; 0x01
    236c:	f2 81       	ldd	r31, Z+2	; 0x02
    236e:	e0 2d       	mov	r30, r0
    2370:	ff 83       	std	Y+7, r31	; 0x07
    2372:	ee 83       	std	Y+6, r30	; 0x06
    2374:	26 81       	ldd	r18, Z+6	; 0x06
    2376:	37 81       	ldd	r19, Z+7	; 0x07
    2378:	39 87       	std	Y+9, r19	; 0x09
    237a:	28 87       	std	Y+8, r18	; 0x08
    237c:	a6 81       	ldd	r26, Z+6	; 0x06
    237e:	b7 81       	ldd	r27, Z+7	; 0x07
    2380:	15 96       	adiw	r26, 0x05	; 5
    2382:	1c 93       	st	X, r17
    2384:	0e 93       	st	-X, r16
    2386:	14 97       	sbiw	r26, 0x04	; 4
    2388:	17 83       	std	Z+7, r17	; 0x07
    238a:	06 83       	std	Z+6, r16	; 0x06
    238c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    238e:	8e 9f       	mul	r24, r30
    2390:	f0 01       	movw	r30, r0
    2392:	11 24       	eor	r1, r1
    2394:	e1 55       	subi	r30, 0x51	; 81
    2396:	fb 4e       	sbci	r31, 0xEB	; 235
    2398:	fd 87       	std	Y+13, r31	; 0x0d
    239a:	ec 87       	std	Y+12, r30	; 0x0c
    239c:	80 81       	ld	r24, Z
    239e:	8f 5f       	subi	r24, 0xFF	; 255
    23a0:	80 83       	st	Z, r24
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	05 c0       	rjmp	.+10     	; 0x23b0 <xTaskPriorityDisinherit+0xac>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	03 c0       	rjmp	.+6      	; 0x23b0 <xTaskPriorityDisinherit+0xac>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	01 c0       	rjmp	.+2      	; 0x23b0 <xTaskPriorityDisinherit+0xac>
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	08 95       	ret

000023ba <xTaskGenericNotifyWait>:
    23ba:	4f 92       	push	r4
    23bc:	5f 92       	push	r5
    23be:	6f 92       	push	r6
    23c0:	7f 92       	push	r7
    23c2:	af 92       	push	r10
    23c4:	bf 92       	push	r11
    23c6:	cf 92       	push	r12
    23c8:	df 92       	push	r13
    23ca:	ef 92       	push	r14
    23cc:	ff 92       	push	r15
    23ce:	0f 93       	push	r16
    23d0:	1f 93       	push	r17
    23d2:	cf 93       	push	r28
    23d4:	df 93       	push	r29
    23d6:	28 01       	movw	r4, r16
    23d8:	39 01       	movw	r6, r18
    23da:	0f b6       	in	r0, 0x3f	; 63
    23dc:	f8 94       	cli
    23de:	0f 92       	push	r0
    23e0:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    23e4:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    23e8:	c8 2f       	mov	r28, r24
    23ea:	d0 e0       	ldi	r29, 0x00	; 0
    23ec:	ec 0f       	add	r30, r28
    23ee:	fd 1f       	adc	r31, r29
    23f0:	83 a9       	ldd	r24, Z+51	; 0x33
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	71 f1       	breq	.+92     	; 0x2452 <xTaskGenericNotifyWait+0x98>
    23f6:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    23fa:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    23fe:	ce 01       	movw	r24, r28
    2400:	88 0f       	add	r24, r24
    2402:	99 1f       	adc	r25, r25
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	e8 0f       	add	r30, r24
    240a:	f9 1f       	adc	r31, r25
    240c:	87 a5       	ldd	r24, Z+47	; 0x2f
    240e:	90 a9       	ldd	r25, Z+48	; 0x30
    2410:	a1 a9       	ldd	r26, Z+49	; 0x31
    2412:	b2 a9       	ldd	r27, Z+50	; 0x32
    2414:	40 95       	com	r20
    2416:	50 95       	com	r21
    2418:	60 95       	com	r22
    241a:	70 95       	com	r23
    241c:	48 23       	and	r20, r24
    241e:	59 23       	and	r21, r25
    2420:	6a 23       	and	r22, r26
    2422:	7b 23       	and	r23, r27
    2424:	47 a7       	std	Z+47, r20	; 0x2f
    2426:	50 ab       	std	Z+48, r21	; 0x30
    2428:	61 ab       	std	Z+49, r22	; 0x31
    242a:	72 ab       	std	Z+50, r23	; 0x32
    242c:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2430:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2434:	ec 0f       	add	r30, r28
    2436:	fd 1f       	adc	r31, r29
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	83 ab       	std	Z+51, r24	; 0x33
    243c:	a1 14       	cp	r10, r1
    243e:	b1 04       	cpc	r11, r1
    2440:	c1 04       	cpc	r12, r1
    2442:	d1 04       	cpc	r13, r1
    2444:	31 f0       	breq	.+12     	; 0x2452 <xTaskGenericNotifyWait+0x98>
    2446:	41 e0       	ldi	r20, 0x01	; 1
    2448:	c6 01       	movw	r24, r12
    244a:	b5 01       	movw	r22, r10
    244c:	88 d9       	rcall	.-3312   	; 0x175e <prvAddCurrentTaskToDelayedList>
    244e:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    2452:	0f 90       	pop	r0
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	0f 92       	push	r0
    245c:	e1 14       	cp	r14, r1
    245e:	f1 04       	cpc	r15, r1
    2460:	a1 f0       	breq	.+40     	; 0x248a <xTaskGenericNotifyWait+0xd0>
    2462:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2466:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    246a:	ce 01       	movw	r24, r28
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	e8 0f       	add	r30, r24
    2476:	f9 1f       	adc	r31, r25
    2478:	87 a5       	ldd	r24, Z+47	; 0x2f
    247a:	90 a9       	ldd	r25, Z+48	; 0x30
    247c:	a1 a9       	ldd	r26, Z+49	; 0x31
    247e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2480:	f7 01       	movw	r30, r14
    2482:	80 83       	st	Z, r24
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	a2 83       	std	Z+2, r26	; 0x02
    2488:	b3 83       	std	Z+3, r27	; 0x03
    248a:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    248e:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    2492:	ec 0f       	add	r30, r28
    2494:	fd 1f       	adc	r31, r29
    2496:	83 a9       	ldd	r24, Z+51	; 0x33
    2498:	82 30       	cpi	r24, 0x02	; 2
    249a:	e9 f4       	brne	.+58     	; 0x24d6 <xTaskGenericNotifyWait+0x11c>
    249c:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    24a0:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    24a4:	ce 01       	movw	r24, r28
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	e8 0f       	add	r30, r24
    24b0:	f9 1f       	adc	r31, r25
    24b2:	87 a5       	ldd	r24, Z+47	; 0x2f
    24b4:	90 a9       	ldd	r25, Z+48	; 0x30
    24b6:	a1 a9       	ldd	r26, Z+49	; 0x31
    24b8:	b2 a9       	ldd	r27, Z+50	; 0x32
    24ba:	40 94       	com	r4
    24bc:	50 94       	com	r5
    24be:	60 94       	com	r6
    24c0:	70 94       	com	r7
    24c2:	48 22       	and	r4, r24
    24c4:	59 22       	and	r5, r25
    24c6:	6a 22       	and	r6, r26
    24c8:	7b 22       	and	r7, r27
    24ca:	47 a6       	std	Z+47, r4	; 0x2f
    24cc:	50 aa       	std	Z+48, r5	; 0x30
    24ce:	61 aa       	std	Z+49, r6	; 0x31
    24d0:	72 aa       	std	Z+50, r7	; 0x32
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	01 c0       	rjmp	.+2      	; 0x24d8 <xTaskGenericNotifyWait+0x11e>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	20 91 1d 15 	lds	r18, 0x151D	; 0x80151d <pxCurrentTCB>
    24dc:	30 91 1e 15 	lds	r19, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    24e0:	c2 0f       	add	r28, r18
    24e2:	d3 1f       	adc	r29, r19
    24e4:	1b aa       	std	Y+51, r1	; 0x33
    24e6:	0f 90       	pop	r0
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	df 91       	pop	r29
    24ec:	cf 91       	pop	r28
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	7f 90       	pop	r7
    2500:	6f 90       	pop	r6
    2502:	5f 90       	pop	r5
    2504:	4f 90       	pop	r4
    2506:	08 95       	ret

00002508 <xTaskGenericNotify>:
    2508:	8f 92       	push	r8
    250a:	9f 92       	push	r9
    250c:	af 92       	push	r10
    250e:	bf 92       	push	r11
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	dc 01       	movw	r26, r24
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	0f 92       	push	r0
    2522:	e1 14       	cp	r14, r1
    2524:	f1 04       	cpc	r15, r1
    2526:	89 f0       	breq	.+34     	; 0x254a <xTaskGenericNotify+0x42>
    2528:	e6 2f       	mov	r30, r22
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	ee 0f       	add	r30, r30
    252e:	ff 1f       	adc	r31, r31
    2530:	ee 0f       	add	r30, r30
    2532:	ff 1f       	adc	r31, r31
    2534:	e8 0f       	add	r30, r24
    2536:	f9 1f       	adc	r31, r25
    2538:	87 a4       	ldd	r8, Z+47	; 0x2f
    253a:	90 a8       	ldd	r9, Z+48	; 0x30
    253c:	a1 a8       	ldd	r10, Z+49	; 0x31
    253e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2540:	f7 01       	movw	r30, r14
    2542:	80 82       	st	Z, r8
    2544:	91 82       	std	Z+1, r9	; 0x01
    2546:	a2 82       	std	Z+2, r10	; 0x02
    2548:	b3 82       	std	Z+3, r11	; 0x03
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	fd 01       	movw	r30, r26
    254e:	e6 0f       	add	r30, r22
    2550:	f7 1f       	adc	r31, r23
    2552:	83 a9       	ldd	r24, Z+51	; 0x33
    2554:	92 e0       	ldi	r25, 0x02	; 2
    2556:	93 ab       	std	Z+51, r25	; 0x33
    2558:	02 30       	cpi	r16, 0x02	; 2
    255a:	01 f1       	breq	.+64     	; 0x259c <xTaskGenericNotify+0x94>
    255c:	18 f4       	brcc	.+6      	; 0x2564 <xTaskGenericNotify+0x5c>
    255e:	01 30       	cpi	r16, 0x01	; 1
    2560:	31 f0       	breq	.+12     	; 0x256e <xTaskGenericNotify+0x66>
    2562:	4d c0       	rjmp	.+154    	; 0x25fe <xTaskGenericNotify+0xf6>
    2564:	03 30       	cpi	r16, 0x03	; 3
    2566:	79 f1       	breq	.+94     	; 0x25c6 <xTaskGenericNotify+0xbe>
    2568:	04 30       	cpi	r16, 0x04	; 4
    256a:	d1 f1       	breq	.+116    	; 0x25e0 <xTaskGenericNotify+0xd8>
    256c:	48 c0       	rjmp	.+144    	; 0x25fe <xTaskGenericNotify+0xf6>
    256e:	66 0f       	add	r22, r22
    2570:	77 1f       	adc	r23, r23
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	fd 01       	movw	r30, r26
    2578:	e6 0f       	add	r30, r22
    257a:	f7 1f       	adc	r31, r23
    257c:	87 a4       	ldd	r8, Z+47	; 0x2f
    257e:	90 a8       	ldd	r9, Z+48	; 0x30
    2580:	a1 a8       	ldd	r10, Z+49	; 0x31
    2582:	b2 a8       	ldd	r11, Z+50	; 0x32
    2584:	ba 01       	movw	r22, r20
    2586:	a9 01       	movw	r20, r18
    2588:	48 29       	or	r20, r8
    258a:	59 29       	or	r21, r9
    258c:	6a 29       	or	r22, r10
    258e:	7b 29       	or	r23, r11
    2590:	47 a7       	std	Z+47, r20	; 0x2f
    2592:	50 ab       	std	Z+48, r21	; 0x30
    2594:	61 ab       	std	Z+49, r22	; 0x31
    2596:	72 ab       	std	Z+50, r23	; 0x32
    2598:	01 e0       	ldi	r16, 0x01	; 1
    259a:	34 c0       	rjmp	.+104    	; 0x2604 <xTaskGenericNotify+0xfc>
    259c:	66 0f       	add	r22, r22
    259e:	77 1f       	adc	r23, r23
    25a0:	66 0f       	add	r22, r22
    25a2:	77 1f       	adc	r23, r23
    25a4:	fd 01       	movw	r30, r26
    25a6:	e6 0f       	add	r30, r22
    25a8:	f7 1f       	adc	r31, r23
    25aa:	47 a5       	ldd	r20, Z+47	; 0x2f
    25ac:	50 a9       	ldd	r21, Z+48	; 0x30
    25ae:	61 a9       	ldd	r22, Z+49	; 0x31
    25b0:	72 a9       	ldd	r23, Z+50	; 0x32
    25b2:	4f 5f       	subi	r20, 0xFF	; 255
    25b4:	5f 4f       	sbci	r21, 0xFF	; 255
    25b6:	6f 4f       	sbci	r22, 0xFF	; 255
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	47 a7       	std	Z+47, r20	; 0x2f
    25bc:	50 ab       	std	Z+48, r21	; 0x30
    25be:	61 ab       	std	Z+49, r22	; 0x31
    25c0:	72 ab       	std	Z+50, r23	; 0x32
    25c2:	01 e0       	ldi	r16, 0x01	; 1
    25c4:	1f c0       	rjmp	.+62     	; 0x2604 <xTaskGenericNotify+0xfc>
    25c6:	66 0f       	add	r22, r22
    25c8:	77 1f       	adc	r23, r23
    25ca:	66 0f       	add	r22, r22
    25cc:	77 1f       	adc	r23, r23
    25ce:	fd 01       	movw	r30, r26
    25d0:	e6 0f       	add	r30, r22
    25d2:	f7 1f       	adc	r31, r23
    25d4:	27 a7       	std	Z+47, r18	; 0x2f
    25d6:	30 ab       	std	Z+48, r19	; 0x30
    25d8:	41 ab       	std	Z+49, r20	; 0x31
    25da:	52 ab       	std	Z+50, r21	; 0x32
    25dc:	01 e0       	ldi	r16, 0x01	; 1
    25de:	12 c0       	rjmp	.+36     	; 0x2604 <xTaskGenericNotify+0xfc>
    25e0:	82 30       	cpi	r24, 0x02	; 2
    25e2:	79 f0       	breq	.+30     	; 0x2602 <xTaskGenericNotify+0xfa>
    25e4:	66 0f       	add	r22, r22
    25e6:	77 1f       	adc	r23, r23
    25e8:	66 0f       	add	r22, r22
    25ea:	77 1f       	adc	r23, r23
    25ec:	fd 01       	movw	r30, r26
    25ee:	e6 0f       	add	r30, r22
    25f0:	f7 1f       	adc	r31, r23
    25f2:	27 a7       	std	Z+47, r18	; 0x2f
    25f4:	30 ab       	std	Z+48, r19	; 0x30
    25f6:	41 ab       	std	Z+49, r20	; 0x31
    25f8:	52 ab       	std	Z+50, r21	; 0x32
    25fa:	01 e0       	ldi	r16, 0x01	; 1
    25fc:	03 c0       	rjmp	.+6      	; 0x2604 <xTaskGenericNotify+0xfc>
    25fe:	01 e0       	ldi	r16, 0x01	; 1
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <xTaskGenericNotify+0xfc>
    2602:	00 e0       	ldi	r16, 0x00	; 0
    2604:	81 30       	cpi	r24, 0x01	; 1
    2606:	09 f0       	breq	.+2      	; 0x260a <xTaskGenericNotify+0x102>
    2608:	69 c0       	rjmp	.+210    	; 0x26dc <xTaskGenericNotify+0x1d4>
    260a:	1c 96       	adiw	r26, 0x0c	; 12
    260c:	ed 91       	ld	r30, X+
    260e:	fc 91       	ld	r31, X
    2610:	1d 97       	sbiw	r26, 0x0d	; 13
    2612:	16 96       	adiw	r26, 0x06	; 6
    2614:	cd 91       	ld	r28, X+
    2616:	dc 91       	ld	r29, X
    2618:	17 97       	sbiw	r26, 0x07	; 7
    261a:	18 96       	adiw	r26, 0x08	; 8
    261c:	8d 91       	ld	r24, X+
    261e:	9c 91       	ld	r25, X
    2620:	19 97       	sbiw	r26, 0x09	; 9
    2622:	9f 83       	std	Y+7, r25	; 0x07
    2624:	8e 83       	std	Y+6, r24	; 0x06
    2626:	18 96       	adiw	r26, 0x08	; 8
    2628:	cd 91       	ld	r28, X+
    262a:	dc 91       	ld	r29, X
    262c:	19 97       	sbiw	r26, 0x09	; 9
    262e:	16 96       	adiw	r26, 0x06	; 6
    2630:	8d 91       	ld	r24, X+
    2632:	9c 91       	ld	r25, X
    2634:	17 97       	sbiw	r26, 0x07	; 7
    2636:	9d 83       	std	Y+5, r25	; 0x05
    2638:	8c 83       	std	Y+4, r24	; 0x04
    263a:	81 81       	ldd	r24, Z+1	; 0x01
    263c:	92 81       	ldd	r25, Z+2	; 0x02
    263e:	9d 01       	movw	r18, r26
    2640:	2e 5f       	subi	r18, 0xFE	; 254
    2642:	3f 4f       	sbci	r19, 0xFF	; 255
    2644:	82 17       	cp	r24, r18
    2646:	93 07       	cpc	r25, r19
    2648:	31 f4       	brne	.+12     	; 0x2656 <xTaskGenericNotify+0x14e>
    264a:	18 96       	adiw	r26, 0x08	; 8
    264c:	8d 91       	ld	r24, X+
    264e:	9c 91       	ld	r25, X
    2650:	19 97       	sbiw	r26, 0x09	; 9
    2652:	92 83       	std	Z+2, r25	; 0x02
    2654:	81 83       	std	Z+1, r24	; 0x01
    2656:	1d 96       	adiw	r26, 0x0d	; 13
    2658:	1c 92       	st	X, r1
    265a:	1e 92       	st	-X, r1
    265c:	1c 97       	sbiw	r26, 0x0c	; 12
    265e:	80 81       	ld	r24, Z
    2660:	81 50       	subi	r24, 0x01	; 1
    2662:	80 83       	st	Z, r24
    2664:	5a 96       	adiw	r26, 0x1a	; 26
    2666:	ec 91       	ld	r30, X
    2668:	5a 97       	sbiw	r26, 0x1a	; 26
    266a:	80 91 6d 14 	lds	r24, 0x146D	; 0x80146d <uxTopReadyPriority>
    266e:	8e 17       	cp	r24, r30
    2670:	10 f4       	brcc	.+4      	; 0x2676 <xTaskGenericNotify+0x16e>
    2672:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    2676:	8b e0       	ldi	r24, 0x0B	; 11
    2678:	8e 9f       	mul	r24, r30
    267a:	f0 01       	movw	r30, r0
    267c:	11 24       	eor	r1, r1
    267e:	e1 55       	subi	r30, 0x51	; 81
    2680:	fb 4e       	sbci	r31, 0xEB	; 235
    2682:	01 80       	ldd	r0, Z+1	; 0x01
    2684:	f2 81       	ldd	r31, Z+2	; 0x02
    2686:	e0 2d       	mov	r30, r0
    2688:	17 96       	adiw	r26, 0x07	; 7
    268a:	fc 93       	st	X, r31
    268c:	ee 93       	st	-X, r30
    268e:	16 97       	sbiw	r26, 0x06	; 6
    2690:	46 81       	ldd	r20, Z+6	; 0x06
    2692:	57 81       	ldd	r21, Z+7	; 0x07
    2694:	19 96       	adiw	r26, 0x09	; 9
    2696:	5c 93       	st	X, r21
    2698:	4e 93       	st	-X, r20
    269a:	18 97       	sbiw	r26, 0x08	; 8
    269c:	c6 81       	ldd	r28, Z+6	; 0x06
    269e:	d7 81       	ldd	r29, Z+7	; 0x07
    26a0:	3d 83       	std	Y+5, r19	; 0x05
    26a2:	2c 83       	std	Y+4, r18	; 0x04
    26a4:	37 83       	std	Z+7, r19	; 0x07
    26a6:	26 83       	std	Z+6, r18	; 0x06
    26a8:	5a 96       	adiw	r26, 0x1a	; 26
    26aa:	ec 91       	ld	r30, X
    26ac:	5a 97       	sbiw	r26, 0x1a	; 26
    26ae:	8e 9f       	mul	r24, r30
    26b0:	f0 01       	movw	r30, r0
    26b2:	11 24       	eor	r1, r1
    26b4:	e1 55       	subi	r30, 0x51	; 81
    26b6:	fb 4e       	sbci	r31, 0xEB	; 235
    26b8:	1d 96       	adiw	r26, 0x0d	; 13
    26ba:	fc 93       	st	X, r31
    26bc:	ee 93       	st	-X, r30
    26be:	1c 97       	sbiw	r26, 0x0c	; 12
    26c0:	80 81       	ld	r24, Z
    26c2:	8f 5f       	subi	r24, 0xFF	; 255
    26c4:	80 83       	st	Z, r24
    26c6:	5a 96       	adiw	r26, 0x1a	; 26
    26c8:	9c 91       	ld	r25, X
    26ca:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    26ce:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    26d2:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d4:	89 17       	cp	r24, r25
    26d6:	10 f4       	brcc	.+4      	; 0x26dc <xTaskGenericNotify+0x1d4>
    26d8:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    26dc:	0f 90       	pop	r0
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	80 2f       	mov	r24, r16
    26e2:	df 91       	pop	r29
    26e4:	cf 91       	pop	r28
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	08 95       	ret

000026f6 <xTaskGenericNotifyFromISR>:
    26f6:	8f 92       	push	r8
    26f8:	9f 92       	push	r9
    26fa:	af 92       	push	r10
    26fc:	bf 92       	push	r11
    26fe:	cf 92       	push	r12
    2700:	df 92       	push	r13
    2702:	ef 92       	push	r14
    2704:	ff 92       	push	r15
    2706:	0f 93       	push	r16
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
    270c:	dc 01       	movw	r26, r24
    270e:	e1 14       	cp	r14, r1
    2710:	f1 04       	cpc	r15, r1
    2712:	89 f0       	breq	.+34     	; 0x2736 <xTaskGenericNotifyFromISR+0x40>
    2714:	e6 2f       	mov	r30, r22
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	ee 0f       	add	r30, r30
    271a:	ff 1f       	adc	r31, r31
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	e8 0f       	add	r30, r24
    2722:	f9 1f       	adc	r31, r25
    2724:	87 a4       	ldd	r8, Z+47	; 0x2f
    2726:	90 a8       	ldd	r9, Z+48	; 0x30
    2728:	a1 a8       	ldd	r10, Z+49	; 0x31
    272a:	b2 a8       	ldd	r11, Z+50	; 0x32
    272c:	f7 01       	movw	r30, r14
    272e:	80 82       	st	Z, r8
    2730:	91 82       	std	Z+1, r9	; 0x01
    2732:	a2 82       	std	Z+2, r10	; 0x02
    2734:	b3 82       	std	Z+3, r11	; 0x03
    2736:	70 e0       	ldi	r23, 0x00	; 0
    2738:	fd 01       	movw	r30, r26
    273a:	e6 0f       	add	r30, r22
    273c:	f7 1f       	adc	r31, r23
    273e:	93 a9       	ldd	r25, Z+51	; 0x33
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	83 ab       	std	Z+51, r24	; 0x33
    2744:	02 30       	cpi	r16, 0x02	; 2
    2746:	01 f1       	breq	.+64     	; 0x2788 <xTaskGenericNotifyFromISR+0x92>
    2748:	18 f4       	brcc	.+6      	; 0x2750 <xTaskGenericNotifyFromISR+0x5a>
    274a:	01 30       	cpi	r16, 0x01	; 1
    274c:	31 f0       	breq	.+12     	; 0x275a <xTaskGenericNotifyFromISR+0x64>
    274e:	4d c0       	rjmp	.+154    	; 0x27ea <xTaskGenericNotifyFromISR+0xf4>
    2750:	03 30       	cpi	r16, 0x03	; 3
    2752:	79 f1       	breq	.+94     	; 0x27b2 <xTaskGenericNotifyFromISR+0xbc>
    2754:	04 30       	cpi	r16, 0x04	; 4
    2756:	d1 f1       	breq	.+116    	; 0x27cc <xTaskGenericNotifyFromISR+0xd6>
    2758:	48 c0       	rjmp	.+144    	; 0x27ea <xTaskGenericNotifyFromISR+0xf4>
    275a:	66 0f       	add	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	66 0f       	add	r22, r22
    2760:	77 1f       	adc	r23, r23
    2762:	fd 01       	movw	r30, r26
    2764:	e6 0f       	add	r30, r22
    2766:	f7 1f       	adc	r31, r23
    2768:	87 a4       	ldd	r8, Z+47	; 0x2f
    276a:	90 a8       	ldd	r9, Z+48	; 0x30
    276c:	a1 a8       	ldd	r10, Z+49	; 0x31
    276e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2770:	ba 01       	movw	r22, r20
    2772:	a9 01       	movw	r20, r18
    2774:	48 29       	or	r20, r8
    2776:	59 29       	or	r21, r9
    2778:	6a 29       	or	r22, r10
    277a:	7b 29       	or	r23, r11
    277c:	47 a7       	std	Z+47, r20	; 0x2f
    277e:	50 ab       	std	Z+48, r21	; 0x30
    2780:	61 ab       	std	Z+49, r22	; 0x31
    2782:	72 ab       	std	Z+50, r23	; 0x32
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	34 c0       	rjmp	.+104    	; 0x27f0 <xTaskGenericNotifyFromISR+0xfa>
    2788:	66 0f       	add	r22, r22
    278a:	77 1f       	adc	r23, r23
    278c:	66 0f       	add	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	fd 01       	movw	r30, r26
    2792:	e6 0f       	add	r30, r22
    2794:	f7 1f       	adc	r31, r23
    2796:	47 a5       	ldd	r20, Z+47	; 0x2f
    2798:	50 a9       	ldd	r21, Z+48	; 0x30
    279a:	61 a9       	ldd	r22, Z+49	; 0x31
    279c:	72 a9       	ldd	r23, Z+50	; 0x32
    279e:	4f 5f       	subi	r20, 0xFF	; 255
    27a0:	5f 4f       	sbci	r21, 0xFF	; 255
    27a2:	6f 4f       	sbci	r22, 0xFF	; 255
    27a4:	7f 4f       	sbci	r23, 0xFF	; 255
    27a6:	47 a7       	std	Z+47, r20	; 0x2f
    27a8:	50 ab       	std	Z+48, r21	; 0x30
    27aa:	61 ab       	std	Z+49, r22	; 0x31
    27ac:	72 ab       	std	Z+50, r23	; 0x32
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	1f c0       	rjmp	.+62     	; 0x27f0 <xTaskGenericNotifyFromISR+0xfa>
    27b2:	66 0f       	add	r22, r22
    27b4:	77 1f       	adc	r23, r23
    27b6:	66 0f       	add	r22, r22
    27b8:	77 1f       	adc	r23, r23
    27ba:	fd 01       	movw	r30, r26
    27bc:	e6 0f       	add	r30, r22
    27be:	f7 1f       	adc	r31, r23
    27c0:	27 a7       	std	Z+47, r18	; 0x2f
    27c2:	30 ab       	std	Z+48, r19	; 0x30
    27c4:	41 ab       	std	Z+49, r20	; 0x31
    27c6:	52 ab       	std	Z+50, r21	; 0x32
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	12 c0       	rjmp	.+36     	; 0x27f0 <xTaskGenericNotifyFromISR+0xfa>
    27cc:	92 30       	cpi	r25, 0x02	; 2
    27ce:	79 f0       	breq	.+30     	; 0x27ee <xTaskGenericNotifyFromISR+0xf8>
    27d0:	66 0f       	add	r22, r22
    27d2:	77 1f       	adc	r23, r23
    27d4:	66 0f       	add	r22, r22
    27d6:	77 1f       	adc	r23, r23
    27d8:	fd 01       	movw	r30, r26
    27da:	e6 0f       	add	r30, r22
    27dc:	f7 1f       	adc	r31, r23
    27de:	27 a7       	std	Z+47, r18	; 0x2f
    27e0:	30 ab       	std	Z+48, r19	; 0x30
    27e2:	41 ab       	std	Z+49, r20	; 0x31
    27e4:	52 ab       	std	Z+50, r21	; 0x32
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <xTaskGenericNotifyFromISR+0xfa>
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <xTaskGenericNotifyFromISR+0xfa>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	91 30       	cpi	r25, 0x01	; 1
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <xTaskGenericNotifyFromISR+0x100>
    27f4:	96 c0       	rjmp	.+300    	; 0x2922 <xTaskGenericNotifyFromISR+0x22c>
    27f6:	90 91 5e 14 	lds	r25, 0x145E	; 0x80145e <uxSchedulerSuspended>
    27fa:	91 11       	cpse	r25, r1
    27fc:	5f c0       	rjmp	.+190    	; 0x28bc <xTaskGenericNotifyFromISR+0x1c6>
    27fe:	1c 96       	adiw	r26, 0x0c	; 12
    2800:	ed 91       	ld	r30, X+
    2802:	fc 91       	ld	r31, X
    2804:	1d 97       	sbiw	r26, 0x0d	; 13
    2806:	16 96       	adiw	r26, 0x06	; 6
    2808:	cd 91       	ld	r28, X+
    280a:	dc 91       	ld	r29, X
    280c:	17 97       	sbiw	r26, 0x07	; 7
    280e:	18 96       	adiw	r26, 0x08	; 8
    2810:	2d 91       	ld	r18, X+
    2812:	3c 91       	ld	r19, X
    2814:	19 97       	sbiw	r26, 0x09	; 9
    2816:	3f 83       	std	Y+7, r19	; 0x07
    2818:	2e 83       	std	Y+6, r18	; 0x06
    281a:	18 96       	adiw	r26, 0x08	; 8
    281c:	cd 91       	ld	r28, X+
    281e:	dc 91       	ld	r29, X
    2820:	19 97       	sbiw	r26, 0x09	; 9
    2822:	16 96       	adiw	r26, 0x06	; 6
    2824:	2d 91       	ld	r18, X+
    2826:	3c 91       	ld	r19, X
    2828:	17 97       	sbiw	r26, 0x07	; 7
    282a:	3d 83       	std	Y+5, r19	; 0x05
    282c:	2c 83       	std	Y+4, r18	; 0x04
    282e:	41 81       	ldd	r20, Z+1	; 0x01
    2830:	52 81       	ldd	r21, Z+2	; 0x02
    2832:	9d 01       	movw	r18, r26
    2834:	2e 5f       	subi	r18, 0xFE	; 254
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	42 17       	cp	r20, r18
    283a:	53 07       	cpc	r21, r19
    283c:	31 f4       	brne	.+12     	; 0x284a <xTaskGenericNotifyFromISR+0x154>
    283e:	18 96       	adiw	r26, 0x08	; 8
    2840:	4d 91       	ld	r20, X+
    2842:	5c 91       	ld	r21, X
    2844:	19 97       	sbiw	r26, 0x09	; 9
    2846:	52 83       	std	Z+2, r21	; 0x02
    2848:	41 83       	std	Z+1, r20	; 0x01
    284a:	1d 96       	adiw	r26, 0x0d	; 13
    284c:	1c 92       	st	X, r1
    284e:	1e 92       	st	-X, r1
    2850:	1c 97       	sbiw	r26, 0x0c	; 12
    2852:	90 81       	ld	r25, Z
    2854:	91 50       	subi	r25, 0x01	; 1
    2856:	90 83       	st	Z, r25
    2858:	5a 96       	adiw	r26, 0x1a	; 26
    285a:	ec 91       	ld	r30, X
    285c:	5a 97       	sbiw	r26, 0x1a	; 26
    285e:	90 91 6d 14 	lds	r25, 0x146D	; 0x80146d <uxTopReadyPriority>
    2862:	9e 17       	cp	r25, r30
    2864:	10 f4       	brcc	.+4      	; 0x286a <xTaskGenericNotifyFromISR+0x174>
    2866:	e0 93 6d 14 	sts	0x146D, r30	; 0x80146d <uxTopReadyPriority>
    286a:	9b e0       	ldi	r25, 0x0B	; 11
    286c:	9e 9f       	mul	r25, r30
    286e:	f0 01       	movw	r30, r0
    2870:	11 24       	eor	r1, r1
    2872:	e1 55       	subi	r30, 0x51	; 81
    2874:	fb 4e       	sbci	r31, 0xEB	; 235
    2876:	01 80       	ldd	r0, Z+1	; 0x01
    2878:	f2 81       	ldd	r31, Z+2	; 0x02
    287a:	e0 2d       	mov	r30, r0
    287c:	17 96       	adiw	r26, 0x07	; 7
    287e:	fc 93       	st	X, r31
    2880:	ee 93       	st	-X, r30
    2882:	16 97       	sbiw	r26, 0x06	; 6
    2884:	46 81       	ldd	r20, Z+6	; 0x06
    2886:	57 81       	ldd	r21, Z+7	; 0x07
    2888:	19 96       	adiw	r26, 0x09	; 9
    288a:	5c 93       	st	X, r21
    288c:	4e 93       	st	-X, r20
    288e:	18 97       	sbiw	r26, 0x08	; 8
    2890:	c6 81       	ldd	r28, Z+6	; 0x06
    2892:	d7 81       	ldd	r29, Z+7	; 0x07
    2894:	3d 83       	std	Y+5, r19	; 0x05
    2896:	2c 83       	std	Y+4, r18	; 0x04
    2898:	37 83       	std	Z+7, r19	; 0x07
    289a:	26 83       	std	Z+6, r18	; 0x06
    289c:	5a 96       	adiw	r26, 0x1a	; 26
    289e:	ec 91       	ld	r30, X
    28a0:	5a 97       	sbiw	r26, 0x1a	; 26
    28a2:	9e 9f       	mul	r25, r30
    28a4:	f0 01       	movw	r30, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	e1 55       	subi	r30, 0x51	; 81
    28aa:	fb 4e       	sbci	r31, 0xEB	; 235
    28ac:	1d 96       	adiw	r26, 0x0d	; 13
    28ae:	fc 93       	st	X, r31
    28b0:	ee 93       	st	-X, r30
    28b2:	1c 97       	sbiw	r26, 0x0c	; 12
    28b4:	90 81       	ld	r25, Z
    28b6:	9f 5f       	subi	r25, 0xFF	; 255
    28b8:	90 83       	st	Z, r25
    28ba:	21 c0       	rjmp	.+66     	; 0x28fe <xTaskGenericNotifyFromISR+0x208>
    28bc:	6a e8       	ldi	r22, 0x8A	; 138
    28be:	74 e1       	ldi	r23, 0x14	; 20
    28c0:	fb 01       	movw	r30, r22
    28c2:	c1 81       	ldd	r28, Z+1	; 0x01
    28c4:	d2 81       	ldd	r29, Z+2	; 0x02
    28c6:	53 96       	adiw	r26, 0x13	; 19
    28c8:	dc 93       	st	X, r29
    28ca:	ce 93       	st	-X, r28
    28cc:	52 97       	sbiw	r26, 0x12	; 18
    28ce:	2e 81       	ldd	r18, Y+6	; 0x06
    28d0:	3f 81       	ldd	r19, Y+7	; 0x07
    28d2:	55 96       	adiw	r26, 0x15	; 21
    28d4:	3c 93       	st	X, r19
    28d6:	2e 93       	st	-X, r18
    28d8:	54 97       	sbiw	r26, 0x14	; 20
    28da:	4e 81       	ldd	r20, Y+6	; 0x06
    28dc:	5f 81       	ldd	r21, Y+7	; 0x07
    28de:	9d 01       	movw	r18, r26
    28e0:	22 5f       	subi	r18, 0xF2	; 242
    28e2:	3f 4f       	sbci	r19, 0xFF	; 255
    28e4:	fa 01       	movw	r30, r20
    28e6:	35 83       	std	Z+5, r19	; 0x05
    28e8:	24 83       	std	Z+4, r18	; 0x04
    28ea:	3f 83       	std	Y+7, r19	; 0x07
    28ec:	2e 83       	std	Y+6, r18	; 0x06
    28ee:	59 96       	adiw	r26, 0x19	; 25
    28f0:	7c 93       	st	X, r23
    28f2:	6e 93       	st	-X, r22
    28f4:	58 97       	sbiw	r26, 0x18	; 24
    28f6:	fb 01       	movw	r30, r22
    28f8:	90 81       	ld	r25, Z
    28fa:	9f 5f       	subi	r25, 0xFF	; 255
    28fc:	90 83       	st	Z, r25
    28fe:	5a 96       	adiw	r26, 0x1a	; 26
    2900:	2c 91       	ld	r18, X
    2902:	e0 91 1d 15 	lds	r30, 0x151D	; 0x80151d <pxCurrentTCB>
    2906:	f0 91 1e 15 	lds	r31, 0x151E	; 0x80151e <pxCurrentTCB+0x1>
    290a:	92 8d       	ldd	r25, Z+26	; 0x1a
    290c:	92 17       	cp	r25, r18
    290e:	48 f4       	brcc	.+18     	; 0x2922 <xTaskGenericNotifyFromISR+0x22c>
    2910:	c1 14       	cp	r12, r1
    2912:	d1 04       	cpc	r13, r1
    2914:	19 f0       	breq	.+6      	; 0x291c <xTaskGenericNotifyFromISR+0x226>
    2916:	91 e0       	ldi	r25, 0x01	; 1
    2918:	f6 01       	movw	r30, r12
    291a:	90 83       	st	Z, r25
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	90 93 67 14 	sts	0x1467, r25	; 0x801467 <xYieldPending>
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	bf 90       	pop	r11
    2932:	af 90       	pop	r10
    2934:	9f 90       	pop	r9
    2936:	8f 90       	pop	r8
    2938:	08 95       	ret

0000293a <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	21 f4       	brne	.+8      	; 0x2946 <xTaskGenericNotifyStateClear+0xc>
    293e:	80 91 1d 15 	lds	r24, 0x151D	; 0x80151d <pxCurrentTCB>
    2942:	90 91 1e 15 	lds	r25, 0x151E	; 0x80151e <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2946:	0f b6       	in	r0, 0x3f	; 63
    2948:	f8 94       	cli
    294a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    294c:	70 e0       	ldi	r23, 0x00	; 0
    294e:	fc 01       	movw	r30, r24
    2950:	e6 0f       	add	r30, r22
    2952:	f7 1f       	adc	r31, r23
    2954:	23 a9       	ldd	r18, Z+51	; 0x33
    2956:	22 30       	cpi	r18, 0x02	; 2
    2958:	31 f4       	brne	.+12     	; 0x2966 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    295a:	fc 01       	movw	r30, r24
    295c:	e6 0f       	add	r30, r22
    295e:	f7 1f       	adc	r31, r23
    2960:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	01 c0       	rjmp	.+2      	; 0x2968 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2966:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2968:	0f 90       	pop	r0
    296a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    296c:	08 95       	ret

0000296e <prvGetNextExpireTime>:
    296e:	dc 01       	movw	r26, r24
    2970:	e0 91 29 15 	lds	r30, 0x1529	; 0x801529 <pxCurrentTimerList>
    2974:	f0 91 2a 15 	lds	r31, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2978:	80 81       	ld	r24, Z
    297a:	91 e0       	ldi	r25, 0x01	; 1
    297c:	81 11       	cpse	r24, r1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9c 93       	st	X, r25
    2982:	91 11       	cpse	r25, r1
    2984:	08 c0       	rjmp	.+16     	; 0x2996 <prvGetNextExpireTime+0x28>
    2986:	07 80       	ldd	r0, Z+7	; 0x07
    2988:	f0 85       	ldd	r31, Z+8	; 0x08
    298a:	e0 2d       	mov	r30, r0
    298c:	60 81       	ld	r22, Z
    298e:	71 81       	ldd	r23, Z+1	; 0x01
    2990:	82 81       	ldd	r24, Z+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	08 95       	ret
    2996:	60 e0       	ldi	r22, 0x00	; 0
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	cb 01       	movw	r24, r22
    299c:	08 95       	ret

0000299e <prvInsertTimerInActiveList>:
    299e:	cf 92       	push	r12
    29a0:	df 92       	push	r13
    29a2:	ef 92       	push	r14
    29a4:	ff 92       	push	r15
    29a6:	0f 93       	push	r16
    29a8:	1f 93       	push	r17
    29aa:	fc 01       	movw	r30, r24
    29ac:	42 83       	std	Z+2, r20	; 0x02
    29ae:	53 83       	std	Z+3, r21	; 0x03
    29b0:	64 83       	std	Z+4, r22	; 0x04
    29b2:	75 83       	std	Z+5, r23	; 0x05
    29b4:	93 87       	std	Z+11, r25	; 0x0b
    29b6:	82 87       	std	Z+10, r24	; 0x0a
    29b8:	04 17       	cp	r16, r20
    29ba:	15 07       	cpc	r17, r21
    29bc:	26 07       	cpc	r18, r22
    29be:	37 07       	cpc	r19, r23
    29c0:	c0 f0       	brcs	.+48     	; 0x29f2 <prvInsertTimerInActiveList+0x54>
    29c2:	0c 19       	sub	r16, r12
    29c4:	1d 09       	sbc	r17, r13
    29c6:	2e 09       	sbc	r18, r14
    29c8:	3f 09       	sbc	r19, r15
    29ca:	86 85       	ldd	r24, Z+14	; 0x0e
    29cc:	97 85       	ldd	r25, Z+15	; 0x0f
    29ce:	a0 89       	ldd	r26, Z+16	; 0x10
    29d0:	b1 89       	ldd	r27, Z+17	; 0x11
    29d2:	08 17       	cp	r16, r24
    29d4:	19 07       	cpc	r17, r25
    29d6:	2a 07       	cpc	r18, r26
    29d8:	3b 07       	cpc	r19, r27
    29da:	00 f5       	brcc	.+64     	; 0x2a1c <prvInsertTimerInActiveList+0x7e>
    29dc:	bf 01       	movw	r22, r30
    29de:	6e 5f       	subi	r22, 0xFE	; 254
    29e0:	7f 4f       	sbci	r23, 0xFF	; 255
    29e2:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <pxOverflowTimerList>
    29e6:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <pxOverflowTimerList+0x1>
    29ea:	0e 94 b7 02 	call	0x56e	; 0x56e <vListInsert>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	18 c0       	rjmp	.+48     	; 0x2a22 <prvInsertTimerInActiveList+0x84>
    29f2:	0c 15       	cp	r16, r12
    29f4:	1d 05       	cpc	r17, r13
    29f6:	2e 05       	cpc	r18, r14
    29f8:	3f 05       	cpc	r19, r15
    29fa:	28 f4       	brcc	.+10     	; 0x2a06 <prvInsertTimerInActiveList+0x68>
    29fc:	4c 15       	cp	r20, r12
    29fe:	5d 05       	cpc	r21, r13
    2a00:	6e 05       	cpc	r22, r14
    2a02:	7f 05       	cpc	r23, r15
    2a04:	68 f4       	brcc	.+26     	; 0x2a20 <prvInsertTimerInActiveList+0x82>
    2a06:	bf 01       	movw	r22, r30
    2a08:	6e 5f       	subi	r22, 0xFE	; 254
    2a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0c:	80 91 29 15 	lds	r24, 0x1529	; 0x801529 <pxCurrentTimerList>
    2a10:	90 91 2a 15 	lds	r25, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2a14:	0e 94 b7 02 	call	0x56e	; 0x56e <vListInsert>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <prvInsertTimerInActiveList+0x84>
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <prvInsertTimerInActiveList+0x84>
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	1f 91       	pop	r17
    2a24:	0f 91       	pop	r16
    2a26:	ff 90       	pop	r15
    2a28:	ef 90       	pop	r14
    2a2a:	df 90       	pop	r13
    2a2c:	cf 90       	pop	r12
    2a2e:	08 95       	ret

00002a30 <prvCheckForValidListAndQueue>:
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	0f 92       	push	r0
    2a36:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2a3a:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2a3e:	89 2b       	or	r24, r25
    2a40:	e9 f4       	brne	.+58     	; 0x2a7c <prvCheckForValidListAndQueue+0x4c>
    2a42:	86 e3       	ldi	r24, 0x36	; 54
    2a44:	95 e1       	ldi	r25, 0x15	; 21
    2a46:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    2a4a:	8b e2       	ldi	r24, 0x2B	; 43
    2a4c:	95 e1       	ldi	r25, 0x15	; 21
    2a4e:	0e 94 a2 02 	call	0x544	; 0x544 <vListInitialise>
    2a52:	86 e3       	ldi	r24, 0x36	; 54
    2a54:	95 e1       	ldi	r25, 0x15	; 21
    2a56:	90 93 2a 15 	sts	0x152A, r25	; 0x80152a <pxCurrentTimerList+0x1>
    2a5a:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <pxCurrentTimerList>
    2a5e:	8b e2       	ldi	r24, 0x2B	; 43
    2a60:	95 e1       	ldi	r25, 0x15	; 21
    2a62:	90 93 28 15 	sts	0x1528, r25	; 0x801528 <pxOverflowTimerList+0x1>
    2a66:	80 93 27 15 	sts	0x1527, r24	; 0x801527 <pxOverflowTimerList>
    2a6a:	40 e0       	ldi	r20, 0x00	; 0
    2a6c:	67 e0       	ldi	r22, 0x07	; 7
    2a6e:	8a e0       	ldi	r24, 0x0A	; 10
    2a70:	0e 94 55 05 	call	0xaaa	; 0xaaa <xQueueGenericCreate>
    2a74:	90 93 26 15 	sts	0x1526, r25	; 0x801526 <xTimerQueue+0x1>
    2a78:	80 93 25 15 	sts	0x1525, r24	; 0x801525 <xTimerQueue>
    2a7c:	0f 90       	pop	r0
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	08 95       	ret

00002a82 <xTimerCreateTimerTask>:
    2a82:	ef 92       	push	r14
    2a84:	ff 92       	push	r15
    2a86:	0f 93       	push	r16
    2a88:	d3 df       	rcall	.-90     	; 0x2a30 <prvCheckForValidListAndQueue>
    2a8a:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2a8e:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2a92:	89 2b       	or	r24, r25
    2a94:	91 f0       	breq	.+36     	; 0x2aba <xTimerCreateTimerTask+0x38>
    2a96:	0f 2e       	mov	r0, r31
    2a98:	f3 e2       	ldi	r31, 0x23	; 35
    2a9a:	ef 2e       	mov	r14, r31
    2a9c:	f5 e1       	ldi	r31, 0x15	; 21
    2a9e:	ff 2e       	mov	r15, r31
    2aa0:	f0 2d       	mov	r31, r0
    2aa2:	03 e0       	ldi	r16, 0x03	; 3
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	40 ec       	ldi	r20, 0xC0	; 192
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    2aac:	67 e4       	ldi	r22, 0x47	; 71
    2aae:	72 e0       	ldi	r23, 0x02	; 2
    2ab0:	88 e1       	ldi	r24, 0x18	; 24
    2ab2:	91 e0       	ldi	r25, 0x01	; 1
    2ab4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xTaskCreate>
    2ab8:	01 c0       	rjmp	.+2      	; 0x2abc <xTimerCreateTimerTask+0x3a>
    2aba:	80 e0       	ldi	r24, 0x00	; 0
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	ef 90       	pop	r14
    2ac2:	08 95       	ret

00002ac4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2ac4:	8f 92       	push	r8
    2ac6:	9f 92       	push	r9
    2ac8:	af 92       	push	r10
    2aca:	bf 92       	push	r11
    2acc:	cf 92       	push	r12
    2ace:	df 92       	push	r13
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	27 97       	sbiw	r28, 0x07	; 7
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2aec:	e0 91 25 15 	lds	r30, 0x1525	; 0x801525 <xTimerQueue>
    2af0:	f0 91 26 15 	lds	r31, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2af4:	30 97       	sbiw	r30, 0x00	; 0
    2af6:	81 f1       	breq	.+96     	; 0x2b58 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2af8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2afa:	2a 83       	std	Y+2, r18	; 0x02
    2afc:	3b 83       	std	Y+3, r19	; 0x03
    2afe:	4c 83       	std	Y+4, r20	; 0x04
    2b00:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b02:	9f 83       	std	Y+7, r25	; 0x07
    2b04:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b06:	66 30       	cpi	r22, 0x06	; 6
    2b08:	f4 f4       	brge	.+60     	; 0x2b46 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2b0a:	ee db       	rcall	.-2084   	; 0x22e8 <xTaskGetSchedulerState>
    2b0c:	82 30       	cpi	r24, 0x02	; 2
    2b0e:	69 f4       	brne	.+26     	; 0x2b2a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2b10:	00 e0       	ldi	r16, 0x00	; 0
    2b12:	a7 01       	movw	r20, r14
    2b14:	96 01       	movw	r18, r12
    2b16:	be 01       	movw	r22, r28
    2b18:	6f 5f       	subi	r22, 0xFF	; 255
    2b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1c:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2b20:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2b24:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xQueueGenericSend>
    2b28:	18 c0       	rjmp	.+48     	; 0x2b5a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b2a:	00 e0       	ldi	r16, 0x00	; 0
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	30 e0       	ldi	r19, 0x00	; 0
    2b30:	a9 01       	movw	r20, r18
    2b32:	be 01       	movw	r22, r28
    2b34:	6f 5f       	subi	r22, 0xFF	; 255
    2b36:	7f 4f       	sbci	r23, 0xFF	; 255
    2b38:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2b3c:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2b40:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xQueueGenericSend>
    2b44:	0a c0       	rjmp	.+20     	; 0x2b5a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	a8 01       	movw	r20, r16
    2b4a:	be 01       	movw	r22, r28
    2b4c:	6f 5f       	subi	r22, 0xFF	; 255
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	cf 01       	movw	r24, r30
    2b52:	0e 94 28 06 	call	0xc50	; 0xc50 <xQueueGenericSendFromISR>
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2b58:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2b5a:	27 96       	adiw	r28, 0x07	; 7
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	ff 90       	pop	r15
    2b70:	ef 90       	pop	r14
    2b72:	df 90       	pop	r13
    2b74:	cf 90       	pop	r12
    2b76:	bf 90       	pop	r11
    2b78:	af 90       	pop	r10
    2b7a:	9f 90       	pop	r9
    2b7c:	8f 90       	pop	r8
    2b7e:	08 95       	ret

00002b80 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2b80:	8f 92       	push	r8
    2b82:	9f 92       	push	r9
    2b84:	af 92       	push	r10
    2b86:	bf 92       	push	r11
    2b88:	cf 92       	push	r12
    2b8a:	df 92       	push	r13
    2b8c:	ef 92       	push	r14
    2b8e:	ff 92       	push	r15
    2b90:	0f 93       	push	r16
    2b92:	1f 93       	push	r17
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b98:	3b c0       	rjmp	.+118    	; 0x2c10 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b9a:	07 80       	ldd	r0, Z+7	; 0x07
    2b9c:	f0 85       	ldd	r31, Z+8	; 0x08
    2b9e:	e0 2d       	mov	r30, r0
    2ba0:	80 80       	ld	r8, Z
    2ba2:	91 80       	ldd	r9, Z+1	; 0x01
    2ba4:	a2 80       	ldd	r10, Z+2	; 0x02
    2ba6:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2ba8:	c0 85       	ldd	r28, Z+8	; 0x08
    2baa:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2bac:	8e 01       	movw	r16, r28
    2bae:	0e 5f       	subi	r16, 0xFE	; 254
    2bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2bb8:	ec 89       	ldd	r30, Y+20	; 0x14
    2bba:	fd 89       	ldd	r31, Y+21	; 0x15
    2bbc:	ce 01       	movw	r24, r28
    2bbe:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2bc0:	8e 89       	ldd	r24, Y+22	; 0x16
    2bc2:	82 ff       	sbrs	r24, 2
    2bc4:	25 c0       	rjmp	.+74     	; 0x2c10 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bca:	a8 89       	ldd	r26, Y+16	; 0x10
    2bcc:	b9 89       	ldd	r27, Y+17	; 0x11
    2bce:	88 0d       	add	r24, r8
    2bd0:	99 1d       	adc	r25, r9
    2bd2:	aa 1d       	adc	r26, r10
    2bd4:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2bd6:	88 16       	cp	r8, r24
    2bd8:	99 06       	cpc	r9, r25
    2bda:	aa 06       	cpc	r10, r26
    2bdc:	bb 06       	cpc	r11, r27
    2bde:	70 f4       	brcc	.+28     	; 0x2bfc <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2be0:	8a 83       	std	Y+2, r24	; 0x02
    2be2:	9b 83       	std	Y+3, r25	; 0x03
    2be4:	ac 83       	std	Y+4, r26	; 0x04
    2be6:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2be8:	db 87       	std	Y+11, r29	; 0x0b
    2bea:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2bec:	b8 01       	movw	r22, r16
    2bee:	80 91 29 15 	lds	r24, 0x1529	; 0x801529 <pxCurrentTimerList>
    2bf2:	90 91 2a 15 	lds	r25, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2bf6:	0e 94 b7 02 	call	0x56e	; 0x56e <vListInsert>
    2bfa:	0a c0       	rjmp	.+20     	; 0x2c10 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2bfc:	c1 2c       	mov	r12, r1
    2bfe:	d1 2c       	mov	r13, r1
    2c00:	76 01       	movw	r14, r12
    2c02:	00 e0       	ldi	r16, 0x00	; 0
    2c04:	10 e0       	ldi	r17, 0x00	; 0
    2c06:	a5 01       	movw	r20, r10
    2c08:	94 01       	movw	r18, r8
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	5a df       	rcall	.-332    	; 0x2ac4 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2c10:	e0 91 29 15 	lds	r30, 0x1529	; 0x801529 <pxCurrentTimerList>
    2c14:	f0 91 2a 15 	lds	r31, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2c18:	80 81       	ld	r24, Z
    2c1a:	81 11       	cpse	r24, r1
    2c1c:	be cf       	rjmp	.-132    	; 0x2b9a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2c1e:	80 91 27 15 	lds	r24, 0x1527	; 0x801527 <pxOverflowTimerList>
    2c22:	90 91 28 15 	lds	r25, 0x1528	; 0x801528 <pxOverflowTimerList+0x1>
    2c26:	90 93 2a 15 	sts	0x152A, r25	; 0x80152a <pxCurrentTimerList+0x1>
    2c2a:	80 93 29 15 	sts	0x1529, r24	; 0x801529 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2c2e:	f0 93 28 15 	sts	0x1528, r31	; 0x801528 <pxOverflowTimerList+0x1>
    2c32:	e0 93 27 15 	sts	0x1527, r30	; 0x801527 <pxOverflowTimerList>
    }
    2c36:	df 91       	pop	r29
    2c38:	cf 91       	pop	r28
    2c3a:	1f 91       	pop	r17
    2c3c:	0f 91       	pop	r16
    2c3e:	ff 90       	pop	r15
    2c40:	ef 90       	pop	r14
    2c42:	df 90       	pop	r13
    2c44:	cf 90       	pop	r12
    2c46:	bf 90       	pop	r11
    2c48:	af 90       	pop	r10
    2c4a:	9f 90       	pop	r9
    2c4c:	8f 90       	pop	r8
    2c4e:	08 95       	ret

00002c50 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c50:	cf 92       	push	r12
    2c52:	df 92       	push	r13
    2c54:	ef 92       	push	r14
    2c56:	ff 92       	push	r15
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c5e:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <xTaskGetTickCount>
    2c62:	6b 01       	movw	r12, r22
    2c64:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2c66:	80 91 1f 15 	lds	r24, 0x151F	; 0x80151f <xLastTime.2436>
    2c6a:	90 91 20 15 	lds	r25, 0x1520	; 0x801520 <xLastTime.2436+0x1>
    2c6e:	a0 91 21 15 	lds	r26, 0x1521	; 0x801521 <xLastTime.2436+0x2>
    2c72:	b0 91 22 15 	lds	r27, 0x1522	; 0x801522 <xLastTime.2436+0x3>
    2c76:	c8 16       	cp	r12, r24
    2c78:	d9 06       	cpc	r13, r25
    2c7a:	ea 06       	cpc	r14, r26
    2c7c:	fb 06       	cpc	r15, r27
    2c7e:	20 f4       	brcc	.+8      	; 0x2c88 <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2c80:	7f df       	rcall	.-258    	; 0x2b80 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	88 83       	st	Y, r24
    2c86:	01 c0       	rjmp	.+2      	; 0x2c8a <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2c88:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2c8a:	c0 92 1f 15 	sts	0x151F, r12	; 0x80151f <xLastTime.2436>
    2c8e:	d0 92 20 15 	sts	0x1520, r13	; 0x801520 <xLastTime.2436+0x1>
    2c92:	e0 92 21 15 	sts	0x1521, r14	; 0x801521 <xLastTime.2436+0x2>
    2c96:	f0 92 22 15 	sts	0x1522, r15	; 0x801522 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2c9a:	c7 01       	movw	r24, r14
    2c9c:	b6 01       	movw	r22, r12
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	08 95       	ret

00002cac <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2cac:	4f 92       	push	r4
    2cae:	5f 92       	push	r5
    2cb0:	6f 92       	push	r6
    2cb2:	7f 92       	push	r7
    2cb4:	8f 92       	push	r8
    2cb6:	9f 92       	push	r9
    2cb8:	af 92       	push	r10
    2cba:	bf 92       	push	r11
    2cbc:	cf 92       	push	r12
    2cbe:	df 92       	push	r13
    2cc0:	ef 92       	push	r14
    2cc2:	ff 92       	push	r15
    2cc4:	0f 93       	push	r16
    2cc6:	1f 93       	push	r17
    2cc8:	cf 93       	push	r28
    2cca:	df 93       	push	r29
    2ccc:	4b 01       	movw	r8, r22
    2cce:	5c 01       	movw	r10, r24
    2cd0:	29 01       	movw	r4, r18
    2cd2:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2cd4:	e0 91 29 15 	lds	r30, 0x1529	; 0x801529 <pxCurrentTimerList>
    2cd8:	f0 91 2a 15 	lds	r31, 0x152A	; 0x80152a <pxCurrentTimerList+0x1>
    2cdc:	07 80       	ldd	r0, Z+7	; 0x07
    2cde:	f0 85       	ldd	r31, Z+8	; 0x08
    2ce0:	e0 2d       	mov	r30, r0
    2ce2:	c0 85       	ldd	r28, Z+8	; 0x08
    2ce4:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	02 96       	adiw	r24, 0x02	; 2
    2cea:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2cee:	8e 89       	ldd	r24, Y+22	; 0x16
    2cf0:	82 ff       	sbrs	r24, 2
    2cf2:	1b c0       	rjmp	.+54     	; 0x2d2a <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2cf4:	4e 85       	ldd	r20, Y+14	; 0x0e
    2cf6:	5f 85       	ldd	r21, Y+15	; 0x0f
    2cf8:	68 89       	ldd	r22, Y+16	; 0x10
    2cfa:	79 89       	ldd	r23, Y+17	; 0x11
    2cfc:	48 0d       	add	r20, r8
    2cfe:	59 1d       	adc	r21, r9
    2d00:	6a 1d       	adc	r22, r10
    2d02:	7b 1d       	adc	r23, r11
    2d04:	75 01       	movw	r14, r10
    2d06:	64 01       	movw	r12, r8
    2d08:	93 01       	movw	r18, r6
    2d0a:	82 01       	movw	r16, r4
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	47 de       	rcall	.-882    	; 0x299e <prvInsertTimerInActiveList>
    2d10:	88 23       	and	r24, r24
    2d12:	69 f0       	breq	.+26     	; 0x2d2e <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d14:	c1 2c       	mov	r12, r1
    2d16:	d1 2c       	mov	r13, r1
    2d18:	76 01       	movw	r14, r12
    2d1a:	00 e0       	ldi	r16, 0x00	; 0
    2d1c:	10 e0       	ldi	r17, 0x00	; 0
    2d1e:	a5 01       	movw	r20, r10
    2d20:	94 01       	movw	r18, r8
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	ce 01       	movw	r24, r28
    2d26:	ce de       	rcall	.-612    	; 0x2ac4 <xTimerGenericCommand>
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d2a:	8e 7f       	andi	r24, 0xFE	; 254
    2d2c:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d2e:	ec 89       	ldd	r30, Y+20	; 0x14
    2d30:	fd 89       	ldd	r31, Y+21	; 0x15
    2d32:	ce 01       	movw	r24, r28
    2d34:	19 95       	eicall
    }
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	df 90       	pop	r13
    2d44:	cf 90       	pop	r12
    2d46:	bf 90       	pop	r11
    2d48:	af 90       	pop	r10
    2d4a:	9f 90       	pop	r9
    2d4c:	8f 90       	pop	r8
    2d4e:	7f 90       	pop	r7
    2d50:	6f 90       	pop	r6
    2d52:	5f 90       	pop	r5
    2d54:	4f 90       	pop	r4
    2d56:	08 95       	ret

00002d58 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2d58:	8f 92       	push	r8
    2d5a:	9f 92       	push	r9
    2d5c:	af 92       	push	r10
    2d5e:	bf 92       	push	r11
    2d60:	cf 92       	push	r12
    2d62:	df 92       	push	r13
    2d64:	ef 92       	push	r14
    2d66:	ff 92       	push	r15
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	1f 92       	push	r1
    2d70:	cd b7       	in	r28, 0x3d	; 61
    2d72:	de b7       	in	r29, 0x3e	; 62
    2d74:	6b 01       	movw	r12, r22
    2d76:	7c 01       	movw	r14, r24
    2d78:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2d7a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d7e:	ce 01       	movw	r24, r28
    2d80:	01 96       	adiw	r24, 0x01	; 1
    2d82:	66 df       	rcall	.-308    	; 0x2c50 <prvSampleTimeNow>
    2d84:	4b 01       	movw	r8, r22
    2d86:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	81 11       	cpse	r24, r1
    2d8c:	2d c0       	rjmp	.+90     	; 0x2de8 <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d8e:	11 11       	cpse	r17, r1
    2d90:	0d c0       	rjmp	.+26     	; 0x2dac <prvProcessTimerOrBlockTask+0x54>
    2d92:	8c 14       	cp	r8, r12
    2d94:	9d 04       	cpc	r9, r13
    2d96:	ae 04       	cpc	r10, r14
    2d98:	bf 04       	cpc	r11, r15
    2d9a:	40 f0       	brcs	.+16     	; 0x2dac <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    2d9c:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2da0:	a5 01       	movw	r20, r10
    2da2:	94 01       	movw	r18, r8
    2da4:	c7 01       	movw	r24, r14
    2da6:	b6 01       	movw	r22, r12
    2da8:	81 df       	rcall	.-254    	; 0x2cac <prvProcessExpiredTimer>
    2daa:	20 c0       	rjmp	.+64     	; 0x2dec <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2dac:	11 23       	and	r17, r17
    2dae:	41 f0       	breq	.+16     	; 0x2dc0 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2db0:	e0 91 27 15 	lds	r30, 0x1527	; 0x801527 <pxOverflowTimerList>
    2db4:	f0 91 28 15 	lds	r31, 0x1528	; 0x801528 <pxOverflowTimerList+0x1>
    2db8:	80 81       	ld	r24, Z
    2dba:	11 e0       	ldi	r17, 0x01	; 1
    2dbc:	81 11       	cpse	r24, r1
    2dbe:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2dc0:	b7 01       	movw	r22, r14
    2dc2:	a6 01       	movw	r20, r12
    2dc4:	48 19       	sub	r20, r8
    2dc6:	59 09       	sbc	r21, r9
    2dc8:	6a 09       	sbc	r22, r10
    2dca:	7b 09       	sbc	r23, r11
    2dcc:	21 2f       	mov	r18, r17
    2dce:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2dd2:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2dd6:	0e 94 f2 06 	call	0xde4	; 0xde4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2dda:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
    2dde:	81 11       	cpse	r24, r1
    2de0:	05 c0       	rjmp	.+10     	; 0x2dec <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2de2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2de8:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <xTaskResumeAll>
            }
        }
    }
    2dec:	0f 90       	pop	r0
    2dee:	df 91       	pop	r29
    2df0:	cf 91       	pop	r28
    2df2:	1f 91       	pop	r17
    2df4:	ff 90       	pop	r15
    2df6:	ef 90       	pop	r14
    2df8:	df 90       	pop	r13
    2dfa:	cf 90       	pop	r12
    2dfc:	bf 90       	pop	r11
    2dfe:	af 90       	pop	r10
    2e00:	9f 90       	pop	r9
    2e02:	8f 90       	pop	r8
    2e04:	08 95       	ret

00002e06 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2e06:	af 92       	push	r10
    2e08:	bf 92       	push	r11
    2e0a:	cf 92       	push	r12
    2e0c:	df 92       	push	r13
    2e0e:	ef 92       	push	r14
    2e10:	ff 92       	push	r15
    2e12:	0f 93       	push	r16
    2e14:	1f 93       	push	r17
    2e16:	cf 93       	push	r28
    2e18:	df 93       	push	r29
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	28 97       	sbiw	r28, 0x08	; 8
    2e20:	0f b6       	in	r0, 0x3f	; 63
    2e22:	f8 94       	cli
    2e24:	de bf       	out	0x3e, r29	; 62
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2e2a:	82 c0       	rjmp	.+260    	; 0x2f30 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	88 23       	and	r24, r24
    2e30:	0c f4       	brge	.+2      	; 0x2e34 <prvProcessReceivedCommands+0x2e>
    2e32:	7e c0       	rjmp	.+252    	; 0x2f30 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e34:	ae 80       	ldd	r10, Y+6	; 0x06
    2e36:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2e38:	d5 01       	movw	r26, r10
    2e3a:	1c 96       	adiw	r26, 0x0c	; 12
    2e3c:	8d 91       	ld	r24, X+
    2e3e:	9c 91       	ld	r25, X
    2e40:	1d 97       	sbiw	r26, 0x0d	; 13
    2e42:	89 2b       	or	r24, r25
    2e44:	21 f0       	breq	.+8      	; 0x2e4e <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e46:	c5 01       	movw	r24, r10
    2e48:	02 96       	adiw	r24, 0x02	; 2
    2e4a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e4e:	ce 01       	movw	r24, r28
    2e50:	08 96       	adiw	r24, 0x08	; 8
    2e52:	fe de       	rcall	.-516    	; 0x2c50 <prvSampleTimeNow>
    2e54:	8b 01       	movw	r16, r22
    2e56:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2e58:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5a:	0e 2e       	mov	r0, r30
    2e5c:	00 0c       	add	r0, r0
    2e5e:	ff 0b       	sbc	r31, r31
    2e60:	ea 30       	cpi	r30, 0x0A	; 10
    2e62:	f1 05       	cpc	r31, r1
    2e64:	08 f0       	brcs	.+2      	; 0x2e68 <prvProcessReceivedCommands+0x62>
    2e66:	64 c0       	rjmp	.+200    	; 0x2f30 <prvProcessReceivedCommands+0x12a>
    2e68:	88 27       	eor	r24, r24
    2e6a:	ee 58       	subi	r30, 0x8E	; 142
    2e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e70:	0c 94 86 2d 	jmp	0x5b0c	; 0x5b0c <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e74:	f5 01       	movw	r30, r10
    2e76:	86 89       	ldd	r24, Z+22	; 0x16
    2e78:	81 60       	ori	r24, 0x01	; 1
    2e7a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e7c:	ca 80       	ldd	r12, Y+2	; 0x02
    2e7e:	db 80       	ldd	r13, Y+3	; 0x03
    2e80:	ec 80       	ldd	r14, Y+4	; 0x04
    2e82:	fd 80       	ldd	r15, Y+5	; 0x05
    2e84:	46 85       	ldd	r20, Z+14	; 0x0e
    2e86:	57 85       	ldd	r21, Z+15	; 0x0f
    2e88:	60 89       	ldd	r22, Z+16	; 0x10
    2e8a:	71 89       	ldd	r23, Z+17	; 0x11
    2e8c:	4c 0d       	add	r20, r12
    2e8e:	5d 1d       	adc	r21, r13
    2e90:	6e 1d       	adc	r22, r14
    2e92:	7f 1d       	adc	r23, r15
    2e94:	c5 01       	movw	r24, r10
    2e96:	83 dd       	rcall	.-1274   	; 0x299e <prvInsertTimerInActiveList>
    2e98:	88 23       	and	r24, r24
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <prvProcessReceivedCommands+0x98>
    2e9c:	49 c0       	rjmp	.+146    	; 0x2f30 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2e9e:	d5 01       	movw	r26, r10
    2ea0:	54 96       	adiw	r26, 0x14	; 20
    2ea2:	ed 91       	ld	r30, X+
    2ea4:	fc 91       	ld	r31, X
    2ea6:	55 97       	sbiw	r26, 0x15	; 21
    2ea8:	c5 01       	movw	r24, r10
    2eaa:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2eac:	f5 01       	movw	r30, r10
    2eae:	86 89       	ldd	r24, Z+22	; 0x16
    2eb0:	82 ff       	sbrs	r24, 2
    2eb2:	3e c0       	rjmp	.+124    	; 0x2f30 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2eb4:	4a 81       	ldd	r20, Y+2	; 0x02
    2eb6:	5b 81       	ldd	r21, Y+3	; 0x03
    2eb8:	6c 81       	ldd	r22, Y+4	; 0x04
    2eba:	7d 81       	ldd	r23, Y+5	; 0x05
    2ebc:	86 85       	ldd	r24, Z+14	; 0x0e
    2ebe:	97 85       	ldd	r25, Z+15	; 0x0f
    2ec0:	a0 89       	ldd	r26, Z+16	; 0x10
    2ec2:	b1 89       	ldd	r27, Z+17	; 0x11
    2ec4:	9a 01       	movw	r18, r20
    2ec6:	ab 01       	movw	r20, r22
    2ec8:	28 0f       	add	r18, r24
    2eca:	39 1f       	adc	r19, r25
    2ecc:	4a 1f       	adc	r20, r26
    2ece:	5b 1f       	adc	r21, r27
    2ed0:	c1 2c       	mov	r12, r1
    2ed2:	d1 2c       	mov	r13, r1
    2ed4:	76 01       	movw	r14, r12
    2ed6:	00 e0       	ldi	r16, 0x00	; 0
    2ed8:	10 e0       	ldi	r17, 0x00	; 0
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	c5 01       	movw	r24, r10
    2ede:	f2 dd       	rcall	.-1052   	; 0x2ac4 <xTimerGenericCommand>
    2ee0:	27 c0       	rjmp	.+78     	; 0x2f30 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ee2:	d5 01       	movw	r26, r10
    2ee4:	56 96       	adiw	r26, 0x16	; 22
    2ee6:	8c 91       	ld	r24, X
    2ee8:	56 97       	sbiw	r26, 0x16	; 22
    2eea:	8e 7f       	andi	r24, 0xFE	; 254
    2eec:	56 96       	adiw	r26, 0x16	; 22
    2eee:	8c 93       	st	X, r24
                        break;
    2ef0:	1f c0       	rjmp	.+62     	; 0x2f30 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ef2:	f5 01       	movw	r30, r10
    2ef4:	86 89       	ldd	r24, Z+22	; 0x16
    2ef6:	81 60       	ori	r24, 0x01	; 1
    2ef8:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2efa:	4a 81       	ldd	r20, Y+2	; 0x02
    2efc:	5b 81       	ldd	r21, Y+3	; 0x03
    2efe:	6c 81       	ldd	r22, Y+4	; 0x04
    2f00:	7d 81       	ldd	r23, Y+5	; 0x05
    2f02:	46 87       	std	Z+14, r20	; 0x0e
    2f04:	57 87       	std	Z+15, r21	; 0x0f
    2f06:	60 8b       	std	Z+16, r22	; 0x10
    2f08:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2f0a:	40 0f       	add	r20, r16
    2f0c:	51 1f       	adc	r21, r17
    2f0e:	62 1f       	adc	r22, r18
    2f10:	73 1f       	adc	r23, r19
    2f12:	68 01       	movw	r12, r16
    2f14:	79 01       	movw	r14, r18
    2f16:	c5 01       	movw	r24, r10
    2f18:	42 dd       	rcall	.-1404   	; 0x299e <prvInsertTimerInActiveList>
                        break;
    2f1a:	0a c0       	rjmp	.+20     	; 0x2f30 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f1c:	f5 01       	movw	r30, r10
    2f1e:	86 89       	ldd	r24, Z+22	; 0x16
    2f20:	81 fd       	sbrc	r24, 1
    2f22:	04 c0       	rjmp	.+8      	; 0x2f2c <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    2f24:	c5 01       	movw	r24, r10
    2f26:	0e 94 65 02 	call	0x4ca	; 0x4ca <vPortFree>
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f2c:	8e 7f       	andi	r24, 0xFE	; 254
    2f2e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	a9 01       	movw	r20, r18
    2f36:	be 01       	movw	r22, r28
    2f38:	6f 5f       	subi	r22, 0xFF	; 255
    2f3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3c:	80 91 25 15 	lds	r24, 0x1525	; 0x801525 <xTimerQueue>
    2f40:	90 91 26 15 	lds	r25, 0x1526	; 0x801526 <xTimerQueue+0x1>
    2f44:	0e 94 63 06 	call	0xcc6	; 0xcc6 <xQueueReceive>
    2f48:	81 11       	cpse	r24, r1
    2f4a:	70 cf       	rjmp	.-288    	; 0x2e2c <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2f4c:	28 96       	adiw	r28, 0x08	; 8
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	df 91       	pop	r29
    2f5a:	cf 91       	pop	r28
    2f5c:	1f 91       	pop	r17
    2f5e:	0f 91       	pop	r16
    2f60:	ff 90       	pop	r15
    2f62:	ef 90       	pop	r14
    2f64:	df 90       	pop	r13
    2f66:	cf 90       	pop	r12
    2f68:	bf 90       	pop	r11
    2f6a:	af 90       	pop	r10
    2f6c:	08 95       	ret

00002f6e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2f6e:	08 95       	ret

00002f70 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2f70:	84 b1       	in	r24, 0x04	; 4
    2f72:	80 68       	ori	r24, 0x80	; 128
    2f74:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2f76:	85 b1       	in	r24, 0x05	; 5
    2f78:	80 68       	ori	r24, 0x80	; 128
    2f7a:	85 b9       	out	0x05, r24	; 5
    2f7c:	08 95       	ret

00002f7e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2f7e:	83 b1       	in	r24, 0x03	; 3
    2f80:	80 68       	ori	r24, 0x80	; 128
    2f82:	83 b9       	out	0x03, r24	; 3
    2f84:	08 95       	ret

00002f86 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2f86:	f4 df       	rcall	.-24     	; 0x2f70 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f88:	2f ef       	ldi	r18, 0xFF	; 255
    2f8a:	80 e7       	ldi	r24, 0x70	; 112
    2f8c:	92 e0       	ldi	r25, 0x02	; 2
    2f8e:	21 50       	subi	r18, 0x01	; 1
    2f90:	80 40       	sbci	r24, 0x00	; 0
    2f92:	90 40       	sbci	r25, 0x00	; 0
    2f94:	e1 f7       	brne	.-8      	; 0x2f8e <vApplicationMallocFailedHook+0x8>
    2f96:	00 c0       	rjmp	.+0      	; 0x2f98 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2f98:	00 00       	nop
    2f9a:	f1 df       	rcall	.-30     	; 0x2f7e <prvBlinkMainLed>
    2f9c:	f5 cf       	rjmp	.-22     	; 0x2f88 <vApplicationMallocFailedHook+0x2>

00002f9e <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2f9e:	e8 df       	rcall	.-48     	; 0x2f70 <prvSetMainLedOn>
    2fa0:	2f ef       	ldi	r18, 0xFF	; 255
    2fa2:	87 ea       	ldi	r24, 0xA7	; 167
    2fa4:	91 e6       	ldi	r25, 0x61	; 97
    2fa6:	21 50       	subi	r18, 0x01	; 1
    2fa8:	80 40       	sbci	r24, 0x00	; 0
    2faa:	90 40       	sbci	r25, 0x00	; 0
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <vApplicationStackOverflowHook+0x8>
    2fae:	00 c0       	rjmp	.+0      	; 0x2fb0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2fb0:	00 00       	nop
    2fb2:	e5 df       	rcall	.-54     	; 0x2f7e <prvBlinkMainLed>
    2fb4:	f5 cf       	rjmp	.-22     	; 0x2fa0 <vApplicationStackOverflowHook+0x2>

00002fb6 <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    2fb6:	0f 93       	push	r16
    2fb8:	1f 93       	push	r17
    2fba:	cf 93       	push	r28
    2fbc:	df 93       	push	r29
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	64 97       	sbiw	r28, 0x14	; 20
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	0e 94 77 27 	call	0x4eee	; 0x4eee <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2fd4:	5b d5       	rcall	.+2742   	; 0x3a8c <lora_driver_rn2483FactoryReset>
    2fd6:	d7 d7       	rcall	.+4014   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    2fd8:	9f 93       	push	r25
    2fda:	8f 93       	push	r24
    2fdc:	8f e4       	ldi	r24, 0x4F	; 79
    2fde:	92 e0       	ldi	r25, 0x02	; 2
    2fe0:	9f 93       	push	r25
    2fe2:	8f 93       	push	r24
    2fe4:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2fe8:	cf d6       	rcall	.+3486   	; 0x3d88 <lora_driver_configureToEu868>
    2fea:	cd d7       	rcall	.+3994   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    2fec:	9f 93       	push	r25
    2fee:	8f 93       	push	r24
    2ff0:	82 e6       	ldi	r24, 0x62	; 98
    2ff2:	92 e0       	ldi	r25, 0x02	; 2
    2ff4:	9f 93       	push	r25
    2ff6:	8f 93       	push	r24
    2ff8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    2ffc:	8e 01       	movw	r16, r28
    2ffe:	0f 5f       	subi	r16, 0xFF	; 255

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3000:	1f 4f       	sbci	r17, 0xFF	; 255
    3002:	c8 01       	movw	r24, r16
    3004:	55 d5       	rcall	.+2730   	; 0x3ab0 <lora_driver_getRn2483Hweui>
    3006:	bf d7       	rcall	.+3966   	; 0x3f86 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3008:	1f 93       	push	r17
    300a:	0f 93       	push	r16
    300c:	9f 93       	push	r25
    300e:	8f 93       	push	r24
    3010:	8b e7       	ldi	r24, 0x7B	; 123
    3012:	92 e0       	ldi	r25, 0x02	; 2
    3014:	9f 93       	push	r25
    3016:	8f 93       	push	r24
    3018:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    301c:	c8 01       	movw	r24, r16

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    301e:	64 d5       	rcall	.+2760   	; 0x3ae8 <lora_driver_setDeviceIdentifier>
    3020:	b2 d7       	rcall	.+3940   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    3022:	9f 93       	push	r25
    3024:	8f 93       	push	r24
    3026:	1f 93       	push	r17
    3028:	0f 93       	push	r16
    302a:	8f e8       	ldi	r24, 0x8F	; 143
    302c:	92 e0       	ldi	r25, 0x02	; 2
    302e:	9f 93       	push	r25
    3030:	8f 93       	push	r24
    3032:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    3036:	a8 01       	movw	r20, r16
    3038:	64 ea       	ldi	r22, 0xA4	; 164
    303a:	72 e0       	ldi	r23, 0x02	; 2

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    303c:	85 ec       	ldi	r24, 0xC5	; 197
    303e:	92 e0       	ldi	r25, 0x02	; 2
    3040:	81 d7       	rcall	.+3842   	; 0x3f44 <lora_driver_setOtaaIdentity>
    3042:	a1 d7       	rcall	.+3906   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    3044:	9f 93       	push	r25
    3046:	8f 93       	push	r24
    3048:	1f 93       	push	r17
    304a:	0f 93       	push	r16
    304c:	84 ea       	ldi	r24, 0xA4	; 164
    304e:	92 e0       	ldi	r25, 0x02	; 2
    3050:	9f 93       	push	r25
    3052:	8f 93       	push	r24
    3054:	85 ec       	ldi	r24, 0xC5	; 197
    3056:	92 e0       	ldi	r25, 0x02	; 2
    3058:	9f 93       	push	r25
    305a:	8f 93       	push	r24
    305c:	86 ed       	ldi	r24, 0xD6	; 214
    305e:	92 e0       	ldi	r25, 0x02	; 2
    3060:	9f 93       	push	r25
    3062:	8f 93       	push	r24
    3064:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    3068:	72 d5       	rcall	.+2788   	; 0x3b4e <lora_driver_saveMac>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    306a:	8d d7       	rcall	.+3866   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    306c:	9f 93       	push	r25
    306e:	8f 93       	push	r24
    3070:	8c e0       	ldi	r24, 0x0C	; 12
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	9f 93       	push	r25
    3076:	8f 93       	push	r24
    3078:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    307c:	0f b6       	in	r0, 0x3f	; 63

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    307e:	f8 94       	cli
    3080:	de bf       	out	0x3e, r29	; 62
    3082:	0f be       	out	0x3f, r0	; 63
    3084:	cd bf       	out	0x3d, r28	; 61
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	5c d6       	rcall	.+3256   	; 0x3d42 <lora_driver_setAdaptiveDataRate>
    308a:	7d d7       	rcall	.+3834   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    308c:	9f 93       	push	r25
    308e:	8f 93       	push	r24
    3090:	8b e1       	ldi	r24, 0x1B	; 27
    3092:	93 e0       	ldi	r25, 0x03	; 3
    3094:	9f 93       	push	r25
    3096:	8f 93       	push	r24
    3098:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    309c:	84 ef       	ldi	r24, 0xF4	; 244

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    309e:	91 e0       	ldi	r25, 0x01	; 1
    30a0:	5b d6       	rcall	.+3254   	; 0x3d58 <lora_driver_setReceiveDelay>
    30a2:	71 d7       	rcall	.+3810   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    30a4:	9f 93       	push	r25
    30a6:	8f 93       	push	r24
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	8f 93       	push	r24
    30ac:	84 ef       	ldi	r24, 0xF4	; 244
    30ae:	8f 93       	push	r24
    30b0:	8c e3       	ldi	r24, 0x3C	; 60
    30b2:	93 e0       	ldi	r25, 0x03	; 3
    30b4:	9f 93       	push	r25
    30b6:	8f 93       	push	r24
    30b8:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    30bc:	0f b6       	in	r0, 0x3f	; 63
    30be:	f8 94       	cli
    30c0:	de bf       	out	0x3e, r29	; 62
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	cd bf       	out	0x3d, r28	; 61
    30c6:	1a e0       	ldi	r17, 0x0A	; 10

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    30c8:	80 e0       	ldi	r24, 0x00	; 0
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    30ca:	47 d5       	rcall	.+2702   	; 0x3b5a <lora_driver_join>
    30cc:	08 2f       	mov	r16, r24
    30ce:	5b d7       	rcall	.+3766   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    30d0:	9f 93       	push	r25
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    30d2:	8f 93       	push	r24
    30d4:	1f 92       	push	r1
    30d6:	1f 93       	push	r17
    30d8:	8c e5       	ldi	r24, 0x5C	; 92
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	9f 93       	push	r25
    30de:	8f 93       	push	r24
    30e0:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    30e4:	0f 90       	pop	r0
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	08 30       	cpi	r16, 0x08	; 8
    30f2:	59 f0       	breq	.+22     	; 0x310a <_lora_setup+0x154>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <status_leds_longPuls>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    30fa:	66 e3       	ldi	r22, 0x36	; 54
    30fc:	71 e0       	ldi	r23, 0x01	; 1
    30fe:	80 e0       	ldi	r24, 0x00	; 0
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskDelay>
    3106:	11 50       	subi	r17, 0x01	; 1
    3108:	f9 f6       	brne	.-66     	; 0x30c8 <_lora_setup+0x112>
    310a:	08 30       	cpi	r16, 0x08	; 8
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    310c:	21 f4       	brne	.+8      	; 0x3116 <_lora_setup+0x160>
    310e:	81 e0       	ldi	r24, 0x01	; 1

	if (rc == LORA_ACCEPTED)
    3110:	0e 94 bd 27 	call	0x4f7a	; 0x4f7a <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3114:	09 c0       	rjmp	.+18     	; 0x3128 <_lora_setup+0x172>
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <status_leds_ledOff>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <status_leds_fastBlink>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3122:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    3126:	fd cf       	rjmp	.-6      	; 0x3122 <_lora_setup+0x16c>

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3128:	64 96       	adiw	r28, 0x14	; 20
    312a:	0f b6       	in	r0, 0x3f	; 63
    312c:	f8 94       	cli
		}
	}
}
    312e:	de bf       	out	0x3e, r29	; 62
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	cd bf       	out	0x3d, r28	; 61
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	08 95       	ret

0000313e <lora_handler_task>:
    313e:	cf 93       	push	r28
    3140:	df 93       	push	r29
    3142:	00 d0       	rcall	.+0      	; 0x3144 <lora_handler_task+0x6>

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3144:	1f 92       	push	r1
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	91 d4       	rcall	.+2338   	; 0x3a70 <lora_driver_resetRn2483>
	vTaskDelay(2);
    314e:	62 e0       	ldi	r22, 0x02	; 2
    3150:	70 e0       	ldi	r23, 0x00	; 0
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskDelay>
	lora_driver_resetRn2483(0);
    315a:	80 e0       	ldi	r24, 0x00	; 0
    315c:	89 d4       	rcall	.+2322   	; 0x3a70 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    315e:	66 e9       	ldi	r22, 0x96	; 150
    3160:	70 e0       	ldi	r23, 0x00	; 0
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    316a:	3b d4       	rcall	.+2166   	; 0x39e2 <lora_driver_flushBuffers>

	_lora_setup();
    316c:	24 df       	rcall	.-440    	; 0x2fb6 <_lora_setup>
    316e:	e1 e4       	ldi	r30, 0x41	; 65

	_uplink_payload.len = 6;
    3170:	f5 e1       	ldi	r31, 0x15	; 21
    3172:	86 e0       	ldi	r24, 0x06	; 6
    3174:	81 83       	std	Z+1, r24	; 0x01
    3176:	82 e0       	ldi	r24, 0x02	; 2
	_uplink_payload.portNo = 2;
    3178:	80 83       	st	Z, r24
    317a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <xTaskGetTickCount>

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    317e:	69 83       	std	Y+1, r22	; 0x01
    3180:	7a 83       	std	Y+2, r23	; 0x02
    3182:	8b 83       	std	Y+3, r24	; 0x03
    3184:	9c 83       	std	Y+4, r25	; 0x04
    3186:	48 ea       	ldi	r20, 0xA8	; 168
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3188:	58 e4       	ldi	r21, 0x48	; 72
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	ce 01       	movw	r24, r28
    3190:	01 96       	adiw	r24, 0x01	; 1
    3192:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <xTaskDelayUntil>
    3196:	e1 e4       	ldi	r30, 0x41	; 65
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3198:	f5 e1       	ldi	r31, 0x15	; 21
    319a:	80 e3       	ldi	r24, 0x30	; 48
    319c:	82 83       	std	Z+2, r24	; 0x02
    319e:	89 e3       	ldi	r24, 0x39	; 57
		_uplink_payload.bytes[1] = hum & 0xFF;
    31a0:	83 83       	std	Z+3, r24	; 0x03
    31a2:	82 e0       	ldi	r24, 0x02	; 2
		_uplink_payload.bytes[2] = temp >> 8;
    31a4:	84 83       	std	Z+4, r24	; 0x04
    31a6:	83 ea       	ldi	r24, 0xA3	; 163
		_uplink_payload.bytes[3] = temp & 0xFF;
    31a8:	85 83       	std	Z+5, r24	; 0x05
    31aa:	84 e0       	ldi	r24, 0x04	; 4
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    31ac:	86 83       	std	Z+6, r24	; 0x06
    31ae:	8a e1       	ldi	r24, 0x1A	; 26
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    31b0:	87 83       	std	Z+7, r24	; 0x07
    31b2:	83 e0       	ldi	r24, 0x03	; 3

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    31b4:	0e 94 ed 27 	call	0x4fda	; 0x4fda <status_leds_shortPuls>
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    31b8:	61 e4       	ldi	r22, 0x41	; 65
    31ba:	75 e1       	ldi	r23, 0x15	; 21
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	f6 d4       	rcall	.+2540   	; 0x3bac <lora_driver_sendUploadMessage>
    31c0:	e2 d6       	rcall	.+3524   	; 0x3f86 <lora_driver_mapReturnCodeToText>
    31c2:	9f 93       	push	r25
    31c4:	8f 93       	push	r24
    31c6:	8c e7       	ldi	r24, 0x7C	; 124
    31c8:	93 e0       	ldi	r25, 0x03	; 3
    31ca:	9f 93       	push	r25
    31cc:	8f 93       	push	r24
    31ce:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <printf>
    31d2:	0f 90       	pop	r0
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	d5 cf       	rjmp	.-86     	; 0x3186 <lora_handler_task+0x48>

000031dc <lora_handler_initialise>:
    31dc:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    31de:	ff 92       	push	r15
    31e0:	0f 93       	push	r16
	xTaskCreate(
    31e2:	e1 2c       	mov	r14, r1
    31e4:	f1 2c       	mov	r15, r1
    31e6:	08 2f       	mov	r16, r24
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	48 e8       	ldi	r20, 0x88	; 136
    31ee:	51 e0       	ldi	r21, 0x01	; 1
    31f0:	61 e9       	ldi	r22, 0x91	; 145
    31f2:	73 e0       	ldi	r23, 0x03	; 3
    31f4:	8f e9       	ldi	r24, 0x9F	; 159
    31f6:	98 e1       	ldi	r25, 0x18	; 24
    31f8:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    31fc:	0f 91       	pop	r16
    31fe:	ff 90       	pop	r15
    3200:	ef 90       	pop	r14
    3202:	08 95       	ret

00003204 <task1>:
	,  NULL );
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    3204:	cf 93       	push	r28
    3206:	df 93       	push	r29
    3208:	00 d0       	rcall	.+0      	; 0x320a <task1+0x6>
    320a:	1f 92       	push	r1
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3210:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <xTaskGetTickCount>
    3214:	69 83       	std	Y+1, r22	; 0x01
    3216:	7a 83       	std	Y+2, r23	; 0x02
    3218:	8b 83       	std	Y+3, r24	; 0x03
    321a:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    321c:	4f e1       	ldi	r20, 0x1F	; 31
    321e:	50 e0       	ldi	r21, 0x00	; 0
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	ce 01       	movw	r24, r28
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    322c:	88 e9       	ldi	r24, 0x98	; 152
    322e:	93 e0       	ldi	r25, 0x03	; 3
    3230:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <puts>
		PORTA ^= _BV(PA0);
    3234:	92 b1       	in	r25, 0x02	; 2
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	89 27       	eor	r24, r25
    323a:	82 b9       	out	0x02, r24	; 2
    323c:	ef cf       	rjmp	.-34     	; 0x321c <task1+0x18>

0000323e <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
    3242:	00 d0       	rcall	.+0      	; 0x3244 <task2+0x6>
    3244:	1f 92       	push	r1
    3246:	cd b7       	in	r28, 0x3d	; 61
    3248:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    324a:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <xTaskGetTickCount>
    324e:	69 83       	std	Y+1, r22	; 0x01
    3250:	7a 83       	std	Y+2, r23	; 0x02
    3252:	8b 83       	std	Y+3, r24	; 0x03
    3254:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3256:	4e e3       	ldi	r20, 0x3E	; 62
    3258:	50 e0       	ldi	r21, 0x00	; 0
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	ce 01       	movw	r24, r28
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    3266:	8e e9       	ldi	r24, 0x9E	; 158
    3268:	93 e0       	ldi	r25, 0x03	; 3
    326a:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <puts>
		PORTA ^= _BV(PA7);
    326e:	82 b1       	in	r24, 0x02	; 2
    3270:	80 58       	subi	r24, 0x80	; 128
    3272:	82 b9       	out	0x02, r24	; 2
		
		 

if ( HIH8120_OK != hih8120_wakeup() )
    3274:	48 d2       	rcall	.+1168   	; 0x3706 <hih8120_wakeup>
    3276:	2f ef       	ldi	r18, 0xFF	; 255
    3278:	83 ed       	ldi	r24, 0xD3	; 211
    327a:	90 e3       	ldi	r25, 0x30	; 48
    327c:	21 50       	subi	r18, 0x01	; 1
    327e:	80 40       	sbci	r24, 0x00	; 0
    3280:	90 40       	sbci	r25, 0x00	; 0
    3282:	e1 f7       	brne	.-8      	; 0x327c <task2+0x3e>
    3284:	00 c0       	rjmp	.+0      	; 0x3286 <task2+0x48>
{
       // Something went wrong
       // Investigate the return code further
}
_delay_ms(1000);
if ( HIH8120_OK !=  hih8120_measure() )
    3286:	00 00       	nop
    3288:	53 d2       	rcall	.+1190   	; 0x3730 <hih8120_measure>
    328a:	2f ef       	ldi	r18, 0xFF	; 255
    328c:	83 ed       	ldi	r24, 0xD3	; 211
    328e:	90 e3       	ldi	r25, 0x30	; 48
    3290:	21 50       	subi	r18, 0x01	; 1
    3292:	80 40       	sbci	r24, 0x00	; 0
    3294:	90 40       	sbci	r25, 0x00	; 0
    3296:	e1 f7       	brne	.-8      	; 0x3290 <task2+0x52>
    3298:	00 c0       	rjmp	.+0      	; 0x329a <task2+0x5c>
       // Investigate the return code further
}
_delay_ms(1000);
float humidity = 0.0;
float temperature = 0.0;
humidity = hih8120_getHumidity();
    329a:	00 00       	nop
    329c:	5a d2       	rcall	.+1204   	; 0x3752 <hih8120_getHumidity>
temperature = hih8120_getTemperature();
    329e:	6b 01       	movw	r12, r22
    32a0:	7c 01       	movw	r14, r24

	// Power up the display
	display_7seg_powerUp();
    32a2:	6c d2       	rcall	.+1240   	; 0x377c <hih8120_getTemperature>
	display_7seg_display(humidity, 1);
    32a4:	31 d1       	rcall	.+610    	; 0x3508 <display_7seg_powerUp>
    32a6:	41 e0       	ldi	r20, 0x01	; 1
    32a8:	c7 01       	movw	r24, r14
    32aa:	b6 01       	movw	r22, r12
    32ac:	83 d0       	rcall	.+262    	; 0x33b4 <display_7seg_display>
    32ae:	d3 cf       	rjmp	.-90     	; 0x3256 <task2+0x18>

000032b0 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    32b0:	ef 92       	push	r14
    32b2:	ff 92       	push	r15
    32b4:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    32b6:	80 91 b2 16 	lds	r24, 0x16B2	; 0x8016b2 <xTestSemaphore>
    32ba:	90 91 b3 16 	lds	r25, 0x16B3	; 0x8016b3 <xTestSemaphore+0x1>
    32be:	89 2b       	or	r24, r25
    32c0:	89 f4       	brne	.+34     	; 0x32e4 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	0e 94 1c 06 	call	0xc38	; 0xc38 <xQueueCreateMutex>
    32c8:	90 93 b3 16 	sts	0x16B3, r25	; 0x8016b3 <xTestSemaphore+0x1>
    32cc:	80 93 b2 16 	sts	0x16B2, r24	; 0x8016b2 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	41 f0       	breq	.+16     	; 0x32e4 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	a9 01       	movw	r20, r18
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	70 e0       	ldi	r23, 0x00	; 0
    32e0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    32e4:	e1 2c       	mov	r14, r1
    32e6:	f1 2c       	mov	r15, r1
    32e8:	02 e0       	ldi	r16, 0x02	; 2
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	40 ec       	ldi	r20, 0xC0	; 192
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	68 e9       	ldi	r22, 0x98	; 152
    32f4:	73 e0       	ldi	r23, 0x03	; 3
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	99 e1       	ldi	r25, 0x19	; 25
    32fa:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    32fe:	01 e0       	ldi	r16, 0x01	; 1
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	40 ec       	ldi	r20, 0xC0	; 192
    3306:	50 e0       	ldi	r21, 0x00	; 0
    3308:	6e e9       	ldi	r22, 0x9E	; 158
    330a:	73 e0       	ldi	r23, 0x03	; 3
    330c:	8f e1       	ldi	r24, 0x1F	; 31
    330e:	99 e1       	ldi	r25, 0x19	; 25
    3310:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xTaskCreate>
	,  "Task2"  // A name just for humans
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	08 95       	ret

0000331c <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    331c:	81 b1       	in	r24, 0x01	; 1
    331e:	81 68       	ori	r24, 0x81	; 129
    3320:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	0e 94 02 24 	call	0x4804	; 0x4804 <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    3328:	c3 df       	rcall	.-122    	; 0x32b0 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    332a:	85 e0       	ldi	r24, 0x05	; 5
    332c:	0e 94 29 27 	call	0x4e52	; 0x4e52 <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	5c d3       	rcall	.+1720   	; 0x39f0 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    3338:	83 e0       	ldi	r24, 0x03	; 3
    333a:	50 df       	rcall	.-352    	; 0x31dc <lora_handler_initialise>
	// Here the call back function is not needed
	display_7seg_initialise(NULL); 
    333c:	80 e0       	ldi	r24, 0x00	; 0
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	ee d0       	rcall	.+476    	; 0x351e <display_7seg_initialise>
 if ( HIH8120_OK == hih8120_initialise() )
    3342:	c9 d1       	rcall	.+914    	; 0x36d6 <hih8120_initialise>
    3344:	2f ef       	ldi	r18, 0xFF	; 255
    3346:	83 ed       	ldi	r24, 0xD3	; 211
    3348:	90 e3       	ldi	r25, 0x30	; 48
    334a:	21 50       	subi	r18, 0x01	; 1
    334c:	80 40       	sbci	r24, 0x00	; 0
    334e:	90 40       	sbci	r25, 0x00	; 0
    3350:	e1 f7       	brne	.-8      	; 0x334a <initialiseSystem+0x2e>
    3352:	00 c0       	rjmp	.+0      	; 0x3354 <initialiseSystem+0x38>
    3354:	00 00       	nop
    3356:	08 95       	ret

00003358 <main>:
    3358:	e1 df       	rcall	.-62     	; 0x331c <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program Started!!\n");
    335a:	84 ea       	ldi	r24, 0xA4	; 164
    335c:	93 e0       	ldi	r25, 0x03	; 3
    335e:	0e 94 53 2f 	call	0x5ea6	; 0x5ea6 <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3362:	0e 94 9d 0c 	call	0x193a	; 0x193a <vTaskStartScheduler>
    3366:	ff cf       	rjmp	.-2      	; 0x3366 <main+0xe>

00003368 <_spiCallBack>:
    3368:	81 b3       	in	r24, 0x11	; 17
    336a:	8f 60       	ori	r24, 0x0F	; 15
    336c:	81 bb       	out	0x11, r24	; 17
    336e:	28 98       	cbi	0x05, 0	; 5
    3370:	28 9a       	sbi	0x05, 0	; 5
    3372:	21 b3       	in	r18, 0x11	; 17
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	00 90 87 15 	lds	r0, 0x1587	; 0x801587 <_digitNo>
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <_spiCallBack+0x1a>
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	0a 94       	dec	r0
    3384:	e2 f7       	brpl	.-8      	; 0x337e <_spiCallBack+0x16>
    3386:	80 95       	com	r24
    3388:	82 23       	and	r24, r18
    338a:	81 bb       	out	0x11, r24	; 17
    338c:	e0 91 57 15 	lds	r30, 0x1557	; 0x801557 <_displayDoneCallBack>
    3390:	f0 91 58 15 	lds	r31, 0x1558	; 0x801558 <_displayDoneCallBack+0x1>
    3394:	30 97       	sbiw	r30, 0x00	; 0
    3396:	09 f0       	breq	.+2      	; 0x339a <_spiCallBack+0x32>
    3398:	19 95       	eicall
    339a:	08 95       	ret

0000339c <display_7seg_displayErr>:
    339c:	9f b7       	in	r25, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	e3 e8       	ldi	r30, 0x83	; 131
    33a2:	f5 e1       	ldi	r31, 0x15	; 21
    33a4:	10 82       	st	Z, r1
    33a6:	8e e9       	ldi	r24, 0x9E	; 158
    33a8:	81 83       	std	Z+1, r24	; 0x01
    33aa:	8a e0       	ldi	r24, 0x0A	; 10
    33ac:	82 83       	std	Z+2, r24	; 0x02
    33ae:	83 83       	std	Z+3, r24	; 0x03
    33b0:	9f bf       	out	0x3f, r25	; 63
    33b2:	08 95       	ret

000033b4 <display_7seg_display>:
    33b4:	bf 92       	push	r11
    33b6:	cf 92       	push	r12
    33b8:	df 92       	push	r13
    33ba:	ef 92       	push	r14
    33bc:	ff 92       	push	r15
    33be:	0f 93       	push	r16
    33c0:	1f 93       	push	r17
    33c2:	cf 93       	push	r28
    33c4:	df 93       	push	r29
    33c6:	6b 01       	movw	r12, r22
    33c8:	7c 01       	movw	r14, r24
    33ca:	b4 2e       	mov	r11, r20
    33cc:	10 92 5a 15 	sts	0x155A, r1	; 0x80155a <_maxHexSegmentindex>
    33d0:	83 e0       	ldi	r24, 0x03	; 3
    33d2:	84 17       	cp	r24, r20
    33d4:	98 f1       	brcs	.+102    	; 0x343c <display_7seg_display+0x88>
    33d6:	64 2f       	mov	r22, r20
    33d8:	70 e0       	ldi	r23, 0x00	; 0
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	0e 94 b6 2a 	call	0x556c	; 0x556c <__floatunsisf>
    33e2:	9b 01       	movw	r18, r22
    33e4:	ac 01       	movw	r20, r24
    33e6:	60 e0       	ldi	r22, 0x00	; 0
    33e8:	70 e0       	ldi	r23, 0x00	; 0
    33ea:	80 e2       	ldi	r24, 0x20	; 32
    33ec:	91 e4       	ldi	r25, 0x41	; 65
    33ee:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <pow>
    33f2:	a7 01       	movw	r20, r14
    33f4:	96 01       	movw	r18, r12
    33f6:	0e 94 97 2b 	call	0x572e	; 0x572e <__mulsf3>
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	5f e3       	ldi	r21, 0x3F	; 63
    3402:	0e 94 b9 29 	call	0x5372	; 0x5372 <__addsf3>
    3406:	0e 94 f3 2a 	call	0x55e6	; 0x55e6 <floor>
    340a:	0e 94 85 2a 	call	0x550a	; 0x550a <__fixsfsi>
    340e:	ab 01       	movw	r20, r22
    3410:	77 23       	and	r23, r23
    3412:	64 f4       	brge	.+24     	; 0x342c <display_7seg_display+0x78>
    3414:	44 27       	eor	r20, r20
    3416:	55 27       	eor	r21, r21
    3418:	46 1b       	sub	r20, r22
    341a:	57 0b       	sbc	r21, r23
    341c:	21 e0       	ldi	r18, 0x01	; 1
    341e:	48 3e       	cpi	r20, 0xE8	; 232
    3420:	83 e0       	ldi	r24, 0x03	; 3
    3422:	58 07       	cpc	r21, r24
    3424:	0c f4       	brge	.+2      	; 0x3428 <display_7seg_display+0x74>
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	11 e0       	ldi	r17, 0x01	; 1
    342a:	0c c0       	rjmp	.+24     	; 0x3444 <display_7seg_display+0x90>
    342c:	21 e0       	ldi	r18, 0x01	; 1
    342e:	40 31       	cpi	r20, 0x10	; 16
    3430:	87 e2       	ldi	r24, 0x27	; 39
    3432:	58 07       	cpc	r21, r24
    3434:	0c f4       	brge	.+2      	; 0x3438 <display_7seg_display+0x84>
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	10 e0       	ldi	r17, 0x00	; 0
    343a:	04 c0       	rjmp	.+8      	; 0x3444 <display_7seg_display+0x90>
    343c:	40 e0       	ldi	r20, 0x00	; 0
    343e:	50 e0       	ldi	r21, 0x00	; 0
    3440:	21 e0       	ldi	r18, 0x01	; 1
    3442:	10 e0       	ldi	r17, 0x00	; 0
    3444:	0f b7       	in	r16, 0x3f	; 63
    3446:	f8 94       	cli
    3448:	22 23       	and	r18, r18
    344a:	11 f0       	breq	.+4      	; 0x3450 <display_7seg_display+0x9c>
    344c:	a7 df       	rcall	.-178    	; 0x339c <display_7seg_displayErr>
    344e:	51 c0       	rjmp	.+162    	; 0x34f2 <display_7seg_display+0x13e>
    3450:	c7 e8       	ldi	r28, 0x87	; 135
    3452:	d5 e1       	ldi	r29, 0x15	; 21
    3454:	0f 2e       	mov	r0, r31
    3456:	f3 e8       	ldi	r31, 0x83	; 131
    3458:	cf 2e       	mov	r12, r31
    345a:	f5 e1       	ldi	r31, 0x15	; 21
    345c:	df 2e       	mov	r13, r31
    345e:	f0 2d       	mov	r31, r0
    3460:	0f 2e       	mov	r0, r31
    3462:	fa e0       	ldi	r31, 0x0A	; 10
    3464:	ef 2e       	mov	r14, r31
    3466:	f1 2c       	mov	r15, r1
    3468:	f0 2d       	mov	r31, r0
    346a:	ca 01       	movw	r24, r20
    346c:	b7 01       	movw	r22, r14
    346e:	0e 94 51 2d 	call	0x5aa2	; 0x5aa2 <__divmodhi4>
    3472:	fc 01       	movw	r30, r24
    3474:	ea 54       	subi	r30, 0x4A	; 74
    3476:	fc 4f       	sbci	r31, 0xFC	; 252
    3478:	80 81       	ld	r24, Z
    347a:	8a 93       	st	-Y, r24
    347c:	46 2f       	mov	r20, r22
    347e:	57 2f       	mov	r21, r23
    3480:	cc 15       	cp	r28, r12
    3482:	dd 05       	cpc	r29, r13
    3484:	91 f7       	brne	.-28     	; 0x346a <display_7seg_display+0xb6>
    3486:	43 e0       	ldi	r20, 0x03	; 3
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	4b 19       	sub	r20, r11
    348c:	51 09       	sbc	r21, r1
    348e:	14 16       	cp	r1, r20
    3490:	15 06       	cpc	r1, r21
    3492:	f4 f4       	brge	.+60     	; 0x34d0 <display_7seg_display+0x11c>
    3494:	80 91 83 15 	lds	r24, 0x1583	; 0x801583 <_digitSegments>
    3498:	8c 3f       	cpi	r24, 0xFC	; 252
    349a:	49 f0       	breq	.+18     	; 0x34ae <display_7seg_display+0xfa>
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	19 c0       	rjmp	.+50     	; 0x34d2 <display_7seg_display+0x11e>
    34a0:	fc 01       	movw	r30, r24
    34a2:	ed 57       	subi	r30, 0x7D	; 125
    34a4:	fa 4e       	sbci	r31, 0xEA	; 234
    34a6:	30 81       	ld	r19, Z
    34a8:	3c 3f       	cpi	r19, 0xFC	; 252
    34aa:	21 f0       	breq	.+8      	; 0x34b4 <display_7seg_display+0x100>
    34ac:	12 c0       	rjmp	.+36     	; 0x34d2 <display_7seg_display+0x11e>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	fc 01       	movw	r30, r24
    34b6:	ed 57       	subi	r30, 0x7D	; 125
    34b8:	fa 4e       	sbci	r31, 0xEA	; 234
    34ba:	10 82       	st	Z, r1
    34bc:	62 2f       	mov	r22, r18
    34be:	2f 5f       	subi	r18, 0xFF	; 255
    34c0:	82 2f       	mov	r24, r18
    34c2:	02 2e       	mov	r0, r18
    34c4:	00 0c       	add	r0, r0
    34c6:	99 0b       	sbc	r25, r25
    34c8:	84 17       	cp	r24, r20
    34ca:	95 07       	cpc	r25, r21
    34cc:	4c f3       	brlt	.-46     	; 0x34a0 <display_7seg_display+0xec>
    34ce:	01 c0       	rjmp	.+2      	; 0x34d2 <display_7seg_display+0x11e>
    34d0:	60 e0       	ldi	r22, 0x00	; 0
    34d2:	11 23       	and	r17, r17
    34d4:	31 f0       	breq	.+12     	; 0x34e2 <display_7seg_display+0x12e>
    34d6:	e6 2f       	mov	r30, r22
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	ed 57       	subi	r30, 0x7D	; 125
    34dc:	fa 4e       	sbci	r31, 0xEA	; 234
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	80 83       	st	Z, r24
    34e2:	bb 20       	and	r11, r11
    34e4:	31 f0       	breq	.+12     	; 0x34f2 <display_7seg_display+0x13e>
    34e6:	fa 01       	movw	r30, r20
    34e8:	ed 57       	subi	r30, 0x7D	; 125
    34ea:	fa 4e       	sbci	r31, 0xEA	; 234
    34ec:	80 81       	ld	r24, Z
    34ee:	81 60       	ori	r24, 0x01	; 1
    34f0:	80 83       	st	Z, r24
    34f2:	0f bf       	out	0x3f, r16	; 63
    34f4:	df 91       	pop	r29
    34f6:	cf 91       	pop	r28
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	df 90       	pop	r13
    3502:	cf 90       	pop	r12
    3504:	bf 90       	pop	r11
    3506:	08 95       	ret

00003508 <display_7seg_powerUp>:
    3508:	85 b5       	in	r24, 0x25	; 37
    350a:	85 60       	ori	r24, 0x05	; 5
    350c:	85 bd       	out	0x25, r24	; 37
    350e:	08 95       	ret

00003510 <display_7seg_powerDown>:
    3510:	85 b5       	in	r24, 0x25	; 37
    3512:	88 7f       	andi	r24, 0xF8	; 248
    3514:	85 bd       	out	0x25, r24	; 37
    3516:	81 b3       	in	r24, 0x11	; 17
    3518:	8f 60       	ori	r24, 0x0F	; 15
    351a:	81 bb       	out	0x11, r24	; 17
    351c:	08 95       	ret

0000351e <display_7seg_initialise>:
    351e:	8f 92       	push	r8
    3520:	af 92       	push	r10
    3522:	cf 92       	push	r12
    3524:	ef 92       	push	r14
    3526:	0f 93       	push	r16
    3528:	1f 93       	push	r17
    352a:	cf 93       	push	r28
    352c:	df 93       	push	r29
    352e:	ec 01       	movw	r28, r24
    3530:	80 b3       	in	r24, 0x10	; 16
    3532:	8f 60       	ori	r24, 0x0F	; 15
    3534:	80 bb       	out	0x10, r24	; 16
    3536:	81 b3       	in	r24, 0x11	; 17
    3538:	8f 60       	ori	r24, 0x0F	; 15
    353a:	81 bb       	out	0x11, r24	; 17
    353c:	20 9a       	sbi	0x04, 0	; 4
    353e:	84 eb       	ldi	r24, 0xB4	; 180
    3540:	99 e1       	ldi	r25, 0x19	; 25
    3542:	9f 93       	push	r25
    3544:	8f 93       	push	r24
    3546:	81 2c       	mov	r8, r1
    3548:	a1 2c       	mov	r10, r1
    354a:	c1 2c       	mov	r12, r1
    354c:	e1 2c       	mov	r14, r1
    354e:	00 e0       	ldi	r16, 0x00	; 0
    3550:	10 e0       	ldi	r17, 0x00	; 0
    3552:	20 e2       	ldi	r18, 0x20	; 32
    3554:	40 e0       	ldi	r20, 0x00	; 0
    3556:	63 e0       	ldi	r22, 0x03	; 3
    3558:	80 e1       	ldi	r24, 0x10	; 16
    355a:	0e 94 64 24 	call	0x48c8	; 0x48c8 <spi_create>
    355e:	90 93 89 15 	sts	0x1589, r25	; 0x801589 <_spi+0x1>
    3562:	80 93 88 15 	sts	0x1588, r24	; 0x801588 <_spi>
    3566:	89 e1       	ldi	r24, 0x19	; 25
    3568:	87 bd       	out	0x27, r24	; 39
    356a:	84 b5       	in	r24, 0x24	; 36
    356c:	82 60       	ori	r24, 0x02	; 2
    356e:	84 bd       	out	0x24, r24	; 36
    3570:	ee e6       	ldi	r30, 0x6E	; 110
    3572:	f0 e0       	ldi	r31, 0x00	; 0
    3574:	80 81       	ld	r24, Z
    3576:	82 60       	ori	r24, 0x02	; 2
    3578:	80 83       	st	Z, r24
    357a:	ca df       	rcall	.-108    	; 0x3510 <display_7seg_powerDown>
    357c:	d0 93 58 15 	sts	0x1558, r29	; 0x801558 <_displayDoneCallBack+0x1>
    3580:	c0 93 57 15 	sts	0x1557, r28	; 0x801557 <_displayDoneCallBack>
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ef 90       	pop	r14
    3592:	cf 90       	pop	r12
    3594:	af 90       	pop	r10
    3596:	8f 90       	pop	r8
    3598:	08 95       	ret

0000359a <__vector_21>:
    359a:	1f 92       	push	r1
    359c:	0f 92       	push	r0
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	0f 92       	push	r0
    35a2:	11 24       	eor	r1, r1
    35a4:	0b b6       	in	r0, 0x3b	; 59
    35a6:	0f 92       	push	r0
    35a8:	2f 93       	push	r18
    35aa:	3f 93       	push	r19
    35ac:	4f 93       	push	r20
    35ae:	5f 93       	push	r21
    35b0:	6f 93       	push	r22
    35b2:	7f 93       	push	r23
    35b4:	8f 93       	push	r24
    35b6:	9f 93       	push	r25
    35b8:	af 93       	push	r26
    35ba:	bf 93       	push	r27
    35bc:	ef 93       	push	r30
    35be:	ff 93       	push	r31
    35c0:	80 91 5a 15 	lds	r24, 0x155A	; 0x80155a <_maxHexSegmentindex>
    35c4:	88 23       	and	r24, r24
    35c6:	69 f1       	breq	.+90     	; 0x3622 <__vector_21+0x88>
    35c8:	20 91 5b 15 	lds	r18, 0x155B	; 0x80155b <_intCounter>
    35cc:	30 91 5c 15 	lds	r19, 0x155C	; 0x80155c <_intCounter+0x1>
    35d0:	25 3f       	cpi	r18, 0xF5	; 245
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	39 07       	cpc	r19, r25
    35d6:	38 f4       	brcc	.+14     	; 0x35e6 <__vector_21+0x4c>
    35d8:	2f 5f       	subi	r18, 0xFF	; 255
    35da:	3f 4f       	sbci	r19, 0xFF	; 255
    35dc:	30 93 5c 15 	sts	0x155C, r19	; 0x80155c <_intCounter+0x1>
    35e0:	20 93 5b 15 	sts	0x155B, r18	; 0x80155b <_intCounter>
    35e4:	1e c0       	rjmp	.+60     	; 0x3622 <__vector_21+0x88>
    35e6:	10 92 5c 15 	sts	0x155C, r1	; 0x80155c <_intCounter+0x1>
    35ea:	10 92 5b 15 	sts	0x155B, r1	; 0x80155b <_intCounter>
    35ee:	e0 91 59 15 	lds	r30, 0x1559	; 0x801559 <_scrollIndex>
    35f2:	2e 2f       	mov	r18, r30
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	04 97       	sbiw	r24, 0x04	; 4
    35fa:	28 17       	cp	r18, r24
    35fc:	39 07       	cpc	r19, r25
    35fe:	14 f4       	brge	.+4      	; 0x3604 <__vector_21+0x6a>
    3600:	ef 5f       	subi	r30, 0xFF	; 255
    3602:	01 c0       	rjmp	.+2      	; 0x3606 <__vector_21+0x6c>
    3604:	e0 e0       	ldi	r30, 0x00	; 0
    3606:	e0 93 59 15 	sts	0x1559, r30	; 0x801559 <_scrollIndex>
    360a:	f0 e0       	ldi	r31, 0x00	; 0
    360c:	e3 5a       	subi	r30, 0xA3	; 163
    360e:	fa 4e       	sbci	r31, 0xEA	; 234
    3610:	a3 e8       	ldi	r26, 0x83	; 131
    3612:	b5 e1       	ldi	r27, 0x15	; 21
    3614:	27 e8       	ldi	r18, 0x87	; 135
    3616:	35 e1       	ldi	r19, 0x15	; 21
    3618:	81 91       	ld	r24, Z+
    361a:	8d 93       	st	X+, r24
    361c:	a2 17       	cp	r26, r18
    361e:	b3 07       	cpc	r27, r19
    3620:	d9 f7       	brne	.-10     	; 0x3618 <__vector_21+0x7e>
    3622:	80 91 87 15 	lds	r24, 0x1587	; 0x801587 <_digitNo>
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	01 96       	adiw	r24, 0x01	; 1
    362a:	83 70       	andi	r24, 0x03	; 3
    362c:	90 78       	andi	r25, 0x80	; 128
    362e:	99 23       	and	r25, r25
    3630:	24 f4       	brge	.+8      	; 0x363a <__vector_21+0xa0>
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	8c 6f       	ori	r24, 0xFC	; 252
    3636:	9f 6f       	ori	r25, 0xFF	; 255
    3638:	01 96       	adiw	r24, 0x01	; 1
    363a:	80 93 87 15 	sts	0x1587, r24	; 0x801587 <_digitNo>
    363e:	99 27       	eor	r25, r25
    3640:	fc 01       	movw	r30, r24
    3642:	ed 57       	subi	r30, 0x7D	; 125
    3644:	fa 4e       	sbci	r31, 0xEA	; 234
    3646:	60 81       	ld	r22, Z
    3648:	60 95       	com	r22
    364a:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <_spi>
    364e:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <_spi+0x1>
    3652:	0e 94 3b 25 	call	0x4a76	; 0x4a76 <spi_sendByte>
    3656:	ff 91       	pop	r31
    3658:	ef 91       	pop	r30
    365a:	bf 91       	pop	r27
    365c:	af 91       	pop	r26
    365e:	9f 91       	pop	r25
    3660:	8f 91       	pop	r24
    3662:	7f 91       	pop	r23
    3664:	6f 91       	pop	r22
    3666:	5f 91       	pop	r21
    3668:	4f 91       	pop	r20
    366a:	3f 91       	pop	r19
    366c:	2f 91       	pop	r18
    366e:	0f 90       	pop	r0
    3670:	0b be       	out	0x3b, r0	; 59
    3672:	0f 90       	pop	r0
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	0f 90       	pop	r0
    3678:	1f 90       	pop	r1
    367a:	18 95       	reti

0000367c <_hihTwiCallback>:
    367c:	65 30       	cpi	r22, 0x05	; 5
    367e:	f1 f4       	brne	.+60     	; 0x36bc <_hihTwiCallback+0x40>
    3680:	fa 01       	movw	r30, r20
    3682:	80 81       	ld	r24, Z
    3684:	8f 73       	andi	r24, 0x3F	; 63
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	98 2f       	mov	r25, r24
    368a:	88 27       	eor	r24, r24
    368c:	21 81       	ldd	r18, Z+1	; 0x01
    368e:	82 2b       	or	r24, r18
    3690:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3694:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	f0 e4       	ldi	r31, 0x40	; 64
    369c:	8f 9f       	mul	r24, r31
    369e:	c0 01       	movw	r24, r0
    36a0:	11 24       	eor	r1, r1
    36a2:	fa 01       	movw	r30, r20
    36a4:	23 81       	ldd	r18, Z+3	; 0x03
    36a6:	26 95       	lsr	r18
    36a8:	26 95       	lsr	r18
    36aa:	82 2b       	or	r24, r18
    36ac:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    36b0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	80 93 8a 15 	sts	0x158A, r24	; 0x80158a <_measuringIsReady>
    36ba:	08 95       	ret
    36bc:	64 30       	cpi	r22, 0x04	; 4
    36be:	51 f0       	breq	.+20     	; 0x36d4 <_hihTwiCallback+0x58>
    36c0:	80 e0       	ldi	r24, 0x00	; 0
    36c2:	90 e4       	ldi	r25, 0x40	; 64
    36c4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    36c8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    36cc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    36d0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    36d4:	08 95       	ret

000036d6 <hih8120_initialise>:
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	0e e3       	ldi	r16, 0x3E	; 62
    36dc:	1b e1       	ldi	r17, 0x1B	; 27
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	34 e2       	ldi	r19, 0x24	; 36
    36e2:	44 ef       	ldi	r20, 0xF4	; 244
    36e4:	50 e0       	ldi	r21, 0x00	; 0
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	87 e2       	ldi	r24, 0x27	; 39
    36ea:	0e 94 0f 28 	call	0x501e	; 0x501e <twiCreate>
    36ee:	90 93 8c 15 	sts	0x158C, r25	; 0x80158c <_hih8120Handler+0x1>
    36f2:	80 93 8b 15 	sts	0x158B, r24	; 0x80158b <_hih8120Handler>
    36f6:	21 e0       	ldi	r18, 0x01	; 1
    36f8:	89 2b       	or	r24, r25
    36fa:	09 f0       	breq	.+2      	; 0x36fe <hih8120_initialise+0x28>
    36fc:	20 e0       	ldi	r18, 0x00	; 0
    36fe:	82 2f       	mov	r24, r18
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	08 95       	ret

00003706 <hih8120_wakeup>:
    3706:	80 91 8b 15 	lds	r24, 0x158B	; 0x80158b <_hih8120Handler>
    370a:	90 91 8c 15 	lds	r25, 0x158C	; 0x80158c <_hih8120Handler+0x1>
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	59 f0       	breq	.+22     	; 0x3728 <hih8120_wakeup+0x22>
    3712:	40 e0       	ldi	r20, 0x00	; 0
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	0e 94 60 28 	call	0x50c0	; 0x50c0 <twiTransmit>
    371c:	84 30       	cpi	r24, 0x04	; 4
    371e:	31 f4       	brne	.+12     	; 0x372c <hih8120_wakeup+0x26>
    3720:	10 92 8a 15 	sts	0x158A, r1	; 0x80158a <_measuringIsReady>
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	08 95       	ret
    3728:	82 e0       	ldi	r24, 0x02	; 2
    372a:	08 95       	ret
    372c:	83 e0       	ldi	r24, 0x03	; 3
    372e:	08 95       	ret

00003730 <hih8120_measure>:
    3730:	80 91 8b 15 	lds	r24, 0x158B	; 0x80158b <_hih8120Handler>
    3734:	90 91 8c 15 	lds	r25, 0x158C	; 0x80158c <_hih8120Handler+0x1>
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	39 f0       	breq	.+14     	; 0x374a <hih8120_measure+0x1a>
    373c:	64 e0       	ldi	r22, 0x04	; 4
    373e:	0e 94 ac 28 	call	0x5158	; 0x5158 <twiReceive>
    3742:	85 30       	cpi	r24, 0x05	; 5
    3744:	21 f0       	breq	.+8      	; 0x374e <hih8120_measure+0x1e>
    3746:	83 e0       	ldi	r24, 0x03	; 3
    3748:	08 95       	ret
    374a:	82 e0       	ldi	r24, 0x02	; 2
    374c:	08 95       	ret
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	08 95       	ret

00003752 <hih8120_getHumidity>:
    3752:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3756:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    375a:	80 e0       	ldi	r24, 0x00	; 0
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 b6 2a 	call	0x556c	; 0x556c <__floatunsisf>
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	48 ec       	ldi	r20, 0xC8	; 200
    3768:	52 e4       	ldi	r21, 0x42	; 66
    376a:	0e 94 97 2b 	call	0x572e	; 0x572e <__mulsf3>
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	38 ef       	ldi	r19, 0xF8	; 248
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	56 e4       	ldi	r21, 0x46	; 70
    3776:	0c 94 1d 2a 	jmp	0x543a	; 0x543a <__divsf3>
    377a:	08 95       	ret

0000377c <hih8120_getTemperature>:
    377c:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3780:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3784:	80 e0       	ldi	r24, 0x00	; 0
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	0e 94 b6 2a 	call	0x556c	; 0x556c <__floatunsisf>
    378c:	20 e0       	ldi	r18, 0x00	; 0
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	45 e2       	ldi	r20, 0x25	; 37
    3792:	53 e4       	ldi	r21, 0x43	; 67
    3794:	0e 94 97 2b 	call	0x572e	; 0x572e <__mulsf3>
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	38 ef       	ldi	r19, 0xF8	; 248
    379c:	4f e7       	ldi	r20, 0x7F	; 127
    379e:	56 e4       	ldi	r21, 0x46	; 70
    37a0:	0e 94 1d 2a 	call	0x543a	; 0x543a <__divsf3>
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 e2       	ldi	r20, 0x20	; 32
    37aa:	52 e4       	ldi	r21, 0x42	; 66
    37ac:	0c 94 b8 29 	jmp	0x5370	; 0x5370 <__subsf3>
    37b0:	08 95       	ret

000037b2 <_serialCallBack>:
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	cf 93       	push	r28
    37b8:	df 93       	push	r29
    37ba:	1f 92       	push	r1
    37bc:	1f 92       	push	r1
    37be:	cd b7       	in	r28, 0x3d	; 61
    37c0:	de b7       	in	r29, 0x3e	; 62
    37c2:	8c 01       	movw	r16, r24
    37c4:	19 82       	std	Y+1, r1	; 0x01
    37c6:	2d c0       	rjmp	.+90     	; 0x3822 <_serialCallBack+0x70>
    37c8:	e0 91 c4 15 	lds	r30, 0x15C4	; 0x8015c4 <rec_buf_inp.2878>
    37cc:	ec 32       	cpi	r30, 0x2C	; 44
    37ce:	50 f4       	brcc	.+20     	; 0x37e4 <_serialCallBack+0x32>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	8e 0f       	add	r24, r30
    37d4:	80 93 c4 15 	sts	0x15C4, r24	; 0x8015c4 <rec_buf_inp.2878>
    37d8:	f0 e0       	ldi	r31, 0x00	; 0
    37da:	ea 50       	subi	r30, 0x0A	; 10
    37dc:	fa 4e       	sbci	r31, 0xEA	; 234
    37de:	8a 81       	ldd	r24, Y+2	; 0x02
    37e0:	80 83       	st	Z, r24
    37e2:	02 c0       	rjmp	.+4      	; 0x37e8 <_serialCallBack+0x36>
    37e4:	10 92 c4 15 	sts	0x15C4, r1	; 0x8015c4 <rec_buf_inp.2878>
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	8a 30       	cpi	r24, 0x0A	; 10
    37ec:	d1 f4       	brne	.+52     	; 0x3822 <_serialCallBack+0x70>
    37ee:	40 91 c4 15 	lds	r20, 0x15C4	; 0x8015c4 <rec_buf_inp.2878>
    37f2:	50 e0       	ldi	r21, 0x00	; 0
    37f4:	fa 01       	movw	r30, r20
    37f6:	ec 50       	subi	r30, 0x0C	; 12
    37f8:	fa 4e       	sbci	r31, 0xEA	; 234
    37fa:	10 82       	st	Z, r1
    37fc:	41 50       	subi	r20, 0x01	; 1
    37fe:	51 09       	sbc	r21, r1
    3800:	9e 01       	movw	r18, r28
    3802:	2f 5f       	subi	r18, 0xFF	; 255
    3804:	3f 4f       	sbci	r19, 0xFF	; 255
    3806:	66 ef       	ldi	r22, 0xF6	; 246
    3808:	75 e1       	ldi	r23, 0x15	; 21
    380a:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <_serialReplyBufferHandle>
    380e:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    3812:	0e 94 76 09 	call	0x12ec	; 0x12ec <xStreamBufferSendFromISR>
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	81 11       	cpse	r24, r1
    381a:	0e 94 70 03 	call	0x6e0	; 0x6e0 <vPortYield>
    381e:	10 92 c4 15 	sts	0x15C4, r1	; 0x8015c4 <rec_buf_inp.2878>
    3822:	be 01       	movw	r22, r28
    3824:	6e 5f       	subi	r22, 0xFE	; 254
    3826:	7f 4f       	sbci	r23, 0xFF	; 255
    3828:	c8 01       	movw	r24, r16
    382a:	56 d5       	rcall	.+2732   	; 0x42d8 <serial_getByte>
    382c:	88 23       	and	r24, r24
    382e:	61 f2       	breq	.-104    	; 0x37c8 <_serialCallBack+0x16>
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	08 95       	ret

0000383e <_uploadMessage>:
    383e:	0f 93       	push	r16
    3840:	1f 93       	push	r17
    3842:	cf 93       	push	r28
    3844:	df 93       	push	r29
    3846:	8c 01       	movw	r16, r24
    3848:	eb 01       	movw	r28, r22
    384a:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <_serialReplyBufferHandle>
    384e:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    3852:	0e 94 83 08 	call	0x1106	; 0x1106 <xStreamBufferReset>
    3856:	b8 01       	movw	r22, r16
    3858:	8d e8       	ldi	r24, 0x8D	; 141
    385a:	95 e1       	ldi	r25, 0x15	; 21
    385c:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <strcpy>
    3860:	20 97       	sbiw	r28, 0x00	; 0
    3862:	79 f0       	breq	.+30     	; 0x3882 <_uploadMessage+0x44>
    3864:	ed e8       	ldi	r30, 0x8D	; 141
    3866:	f5 e1       	ldi	r31, 0x15	; 21
    3868:	01 90       	ld	r0, Z+
    386a:	00 20       	and	r0, r0
    386c:	e9 f7       	brne	.-6      	; 0x3868 <_uploadMessage+0x2a>
    386e:	31 97       	sbiw	r30, 0x01	; 1
    3870:	80 e2       	ldi	r24, 0x20	; 32
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	80 83       	st	Z, r24
    3878:	be 01       	movw	r22, r28
    387a:	8d e8       	ldi	r24, 0x8D	; 141
    387c:	95 e1       	ldi	r25, 0x15	; 21
    387e:	0e 94 16 2f 	call	0x5e2c	; 0x5e2c <strcat>
    3882:	ed e8       	ldi	r30, 0x8D	; 141
    3884:	f5 e1       	ldi	r31, 0x15	; 21
    3886:	df 01       	movw	r26, r30
    3888:	0d 90       	ld	r0, X+
    388a:	00 20       	and	r0, r0
    388c:	e9 f7       	brne	.-6      	; 0x3888 <_uploadMessage+0x4a>
    388e:	11 97       	sbiw	r26, 0x01	; 1
    3890:	8d e0       	ldi	r24, 0x0D	; 13
    3892:	9a e0       	ldi	r25, 0x0A	; 10
    3894:	11 96       	adiw	r26, 0x01	; 1
    3896:	9c 93       	st	X, r25
    3898:	8e 93       	st	-X, r24
    389a:	12 96       	adiw	r26, 0x02	; 2
    389c:	1c 92       	st	X, r1
    389e:	01 90       	ld	r0, Z+
    38a0:	00 20       	and	r0, r0
    38a2:	e9 f7       	brne	.-6      	; 0x389e <_uploadMessage+0x60>
    38a4:	31 97       	sbiw	r30, 0x01	; 1
    38a6:	ed 58       	subi	r30, 0x8D	; 141
    38a8:	f5 41       	sbci	r31, 0x15	; 21
    38aa:	ae 2f       	mov	r26, r30
    38ac:	8d e8       	ldi	r24, 0x8D	; 141
    38ae:	95 e1       	ldi	r25, 0x15	; 21
    38b0:	ac 01       	movw	r20, r24
    38b2:	6a 2f       	mov	r22, r26
    38b4:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <_rn2483_serial>
    38b8:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <_rn2483_serial+0x1>
    38bc:	b8 d4       	rcall	.+2416   	; 0x422e <serial_sendBytes>
    38be:	81 11       	cpse	r24, r1
    38c0:	11 c0       	rjmp	.+34     	; 0x38e4 <_uploadMessage+0xa6>
    38c2:	08 e2       	ldi	r16, 0x28	; 40
    38c4:	15 e0       	ldi	r17, 0x05	; 5
    38c6:	20 e0       	ldi	r18, 0x00	; 0
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	4d e2       	ldi	r20, 0x2D	; 45
    38cc:	50 e0       	ldi	r21, 0x00	; 0
    38ce:	60 e5       	ldi	r22, 0x50	; 80
    38d0:	76 e1       	ldi	r23, 0x16	; 22
    38d2:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <_serialReplyBufferHandle>
    38d6:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    38da:	0e 94 ba 09 	call	0x1374	; 0x1374 <xStreamBufferReceive>
    38de:	80 e5       	ldi	r24, 0x50	; 80
    38e0:	96 e1       	ldi	r25, 0x16	; 22
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <_uploadMessage+0xaa>
    38e4:	80 e0       	ldi	r24, 0x00	; 0
    38e6:	90 e0       	ldi	r25, 0x00	; 0
    38e8:	df 91       	pop	r29
    38ea:	cf 91       	pop	r28
    38ec:	1f 91       	pop	r17
    38ee:	0f 91       	pop	r16
    38f0:	08 95       	ret

000038f2 <_reply2ReturnCode>:
    38f2:	2f 92       	push	r2
    38f4:	3f 92       	push	r3
    38f6:	4f 92       	push	r4
    38f8:	5f 92       	push	r5
    38fa:	6f 92       	push	r6
    38fc:	7f 92       	push	r7
    38fe:	8f 92       	push	r8
    3900:	9f 92       	push	r9
    3902:	af 92       	push	r10
    3904:	bf 92       	push	r11
    3906:	cf 92       	push	r12
    3908:	df 92       	push	r13
    390a:	ef 92       	push	r14
    390c:	ff 92       	push	r15
    390e:	0f 93       	push	r16
    3910:	1f 93       	push	r17
    3912:	cf 93       	push	r28
    3914:	df 93       	push	r29
    3916:	5c 01       	movw	r10, r24
    3918:	fc 01       	movw	r30, r24
    391a:	01 90       	ld	r0, Z+
    391c:	00 20       	and	r0, r0
    391e:	e9 f7       	brne	.-6      	; 0x391a <_reply2ReturnCode+0x28>
    3920:	31 97       	sbiw	r30, 0x01	; 1
    3922:	6f 01       	movw	r12, r30
    3924:	c8 1a       	sub	r12, r24
    3926:	d9 0a       	sbc	r13, r25
    3928:	5c 2c       	mov	r5, r12
    392a:	0f 2e       	mov	r0, r31
    392c:	ff e5       	ldi	r31, 0x5F	; 95
    392e:	8f 2e       	mov	r8, r31
    3930:	f6 e0       	ldi	r31, 0x06	; 6
    3932:	9f 2e       	mov	r9, r31
    3934:	f0 2d       	mov	r31, r0
    3936:	e1 2c       	mov	r14, r1
    3938:	f1 2c       	mov	r15, r1
    393a:	4c 2c       	mov	r4, r12
    393c:	37 01       	movw	r6, r14
    393e:	f4 01       	movw	r30, r8
    3940:	01 81       	ldd	r16, Z+1	; 0x01
    3942:	12 81       	ldd	r17, Z+2	; 0x02
    3944:	e8 01       	movw	r28, r16
    3946:	09 90       	ld	r0, Y+
    3948:	00 20       	and	r0, r0
    394a:	e9 f7       	brne	.-6      	; 0x3946 <_reply2ReturnCode+0x54>
    394c:	21 97       	sbiw	r28, 0x01	; 1
    394e:	c0 1b       	sub	r28, r16
    3950:	d1 0b       	sbc	r29, r17
    3952:	3c 2e       	mov	r3, r28
    3954:	f9 e0       	ldi	r31, 0x09	; 9
    3956:	cf 16       	cp	r12, r31
    3958:	d1 04       	cpc	r13, r1
    395a:	58 f0       	brcs	.+22     	; 0x3972 <_reply2ReturnCode+0x80>
    395c:	f4 01       	movw	r30, r8
    395e:	20 80       	ld	r2, Z
    3960:	fe e0       	ldi	r31, 0x0E	; 14
    3962:	2f 12       	cpse	r2, r31
    3964:	06 c0       	rjmp	.+12     	; 0x3972 <_reply2ReturnCode+0x80>
    3966:	b8 01       	movw	r22, r16
    3968:	c5 01       	movw	r24, r10
    396a:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <strcasestr>
    396e:	89 2b       	or	r24, r25
    3970:	09 f5       	brne	.+66     	; 0x39b4 <_reply2ReturnCode+0xc2>
    3972:	44 2d       	mov	r20, r4
    3974:	35 14       	cp	r3, r5
    3976:	08 f4       	brcc	.+2      	; 0x397a <_reply2ReturnCode+0x88>
    3978:	4c 2f       	mov	r20, r28
    397a:	50 e0       	ldi	r21, 0x00	; 0
    397c:	b8 01       	movw	r22, r16
    397e:	c5 01       	movw	r24, r10
    3980:	0e 94 28 2f 	call	0x5e50	; 0x5e50 <strncasecmp>
    3984:	89 2b       	or	r24, r25
    3986:	49 f4       	brne	.+18     	; 0x399a <_reply2ReturnCode+0xa8>
    3988:	f3 01       	movw	r30, r6
    398a:	ee 0f       	add	r30, r30
    398c:	ff 1f       	adc	r31, r31
    398e:	e6 0d       	add	r30, r6
    3990:	f7 1d       	adc	r31, r7
    3992:	e1 5a       	subi	r30, 0xA1	; 161
    3994:	f9 4f       	sbci	r31, 0xF9	; 249
    3996:	20 80       	ld	r2, Z
    3998:	0d c0       	rjmp	.+26     	; 0x39b4 <_reply2ReturnCode+0xc2>
    399a:	8f ef       	ldi	r24, 0xFF	; 255
    399c:	e8 1a       	sub	r14, r24
    399e:	f8 0a       	sbc	r15, r24
    39a0:	e3 e0       	ldi	r30, 0x03	; 3
    39a2:	8e 0e       	add	r8, r30
    39a4:	91 1c       	adc	r9, r1
    39a6:	f1 e1       	ldi	r31, 0x11	; 17
    39a8:	ef 16       	cp	r14, r31
    39aa:	f1 04       	cpc	r15, r1
    39ac:	39 f6       	brne	.-114    	; 0x393c <_reply2ReturnCode+0x4a>
    39ae:	68 94       	set
    39b0:	22 24       	eor	r2, r2
    39b2:	24 f8       	bld	r2, 4
    39b4:	82 2d       	mov	r24, r2
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	df 90       	pop	r13
    39c4:	cf 90       	pop	r12
    39c6:	bf 90       	pop	r11
    39c8:	af 90       	pop	r10
    39ca:	9f 90       	pop	r9
    39cc:	8f 90       	pop	r8
    39ce:	7f 90       	pop	r7
    39d0:	6f 90       	pop	r6
    39d2:	5f 90       	pop	r5
    39d4:	4f 90       	pop	r4
    39d6:	3f 90       	pop	r3
    39d8:	2f 90       	pop	r2
    39da:	08 95       	ret

000039dc <_uploadMessageRc>:
    39dc:	30 df       	rcall	.-416    	; 0x383e <_uploadMessage>
    39de:	89 cf       	rjmp	.-238    	; 0x38f2 <_reply2ReturnCode>
    39e0:	08 95       	ret

000039e2 <lora_driver_flushBuffers>:
    39e2:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <_serialReplyBufferHandle>
    39e6:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    39ea:	0c 94 83 08 	jmp	0x1106	; 0x1106 <xStreamBufferReset>
    39ee:	08 95       	ret

000039f0 <lora_driver_initialise>:
    39f0:	8f 92       	push	r8
    39f2:	9f 92       	push	r9
    39f4:	af 92       	push	r10
    39f6:	cf 92       	push	r12
    39f8:	ef 92       	push	r14
    39fa:	0f 93       	push	r16
    39fc:	1f 93       	push	r17
    39fe:	cf 93       	push	r28
    3a00:	c8 2f       	mov	r28, r24
    3a02:	8b 01       	movw	r16, r22
    3a04:	41 e0       	ldi	r20, 0x01	; 1
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	70 e0       	ldi	r23, 0x00	; 0
    3a0a:	88 ec       	ldi	r24, 0xC8	; 200
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <xStreamBufferGenericCreate>
    3a12:	90 93 c8 15 	sts	0x15C8, r25	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    3a16:	80 93 c7 15 	sts	0x15C7, r24	; 0x8015c7 <_serialReplyBufferHandle>
    3a1a:	10 93 c6 15 	sts	0x15C6, r17	; 0x8015c6 <_downlinkMessageBuffer+0x1>
    3a1e:	00 93 c5 15 	sts	0x15C5, r16	; 0x8015c5 <_downlinkMessageBuffer>
    3a22:	0f 2e       	mov	r0, r31
    3a24:	f9 ed       	ldi	r31, 0xD9	; 217
    3a26:	8f 2e       	mov	r8, r31
    3a28:	fb e1       	ldi	r31, 0x1B	; 27
    3a2a:	9f 2e       	mov	r9, r31
    3a2c:	f0 2d       	mov	r31, r0
    3a2e:	68 94       	set
    3a30:	aa 24       	eor	r10, r10
    3a32:	a6 f8       	bld	r10, 6
    3a34:	68 94       	set
    3a36:	cc 24       	eor	r12, r12
    3a38:	c6 f8       	bld	r12, 6
    3a3a:	e1 2c       	mov	r14, r1
    3a3c:	00 e0       	ldi	r16, 0x00	; 0
    3a3e:	23 e0       	ldi	r18, 0x03	; 3
    3a40:	40 e0       	ldi	r20, 0x00	; 0
    3a42:	51 ee       	ldi	r21, 0xE1	; 225
    3a44:	60 e0       	ldi	r22, 0x00	; 0
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	8c 2f       	mov	r24, r28
    3a4a:	1e d3       	rcall	.+1596   	; 0x4088 <serial_create>
    3a4c:	90 93 ca 15 	sts	0x15CA, r25	; 0x8015ca <_rn2483_serial+0x1>
    3a50:	80 93 c9 15 	sts	0x15C9, r24	; 0x8015c9 <_rn2483_serial>
    3a54:	e7 e0       	ldi	r30, 0x07	; 7
    3a56:	f1 e0       	ldi	r31, 0x01	; 1
    3a58:	80 81       	ld	r24, Z
    3a5a:	80 61       	ori	r24, 0x10	; 16
    3a5c:	80 83       	st	Z, r24
    3a5e:	cf 91       	pop	r28
    3a60:	1f 91       	pop	r17
    3a62:	0f 91       	pop	r16
    3a64:	ef 90       	pop	r14
    3a66:	cf 90       	pop	r12
    3a68:	af 90       	pop	r10
    3a6a:	9f 90       	pop	r9
    3a6c:	8f 90       	pop	r8
    3a6e:	08 95       	ret

00003a70 <lora_driver_resetRn2483>:
    3a70:	88 23       	and	r24, r24
    3a72:	31 f0       	breq	.+12     	; 0x3a80 <lora_driver_resetRn2483+0x10>
    3a74:	e8 e0       	ldi	r30, 0x08	; 8
    3a76:	f1 e0       	ldi	r31, 0x01	; 1
    3a78:	80 81       	ld	r24, Z
    3a7a:	8f 7e       	andi	r24, 0xEF	; 239
    3a7c:	80 83       	st	Z, r24
    3a7e:	08 95       	ret
    3a80:	e8 e0       	ldi	r30, 0x08	; 8
    3a82:	f1 e0       	ldi	r31, 0x01	; 1
    3a84:	80 81       	ld	r24, Z
    3a86:	80 61       	ori	r24, 0x10	; 16
    3a88:	80 83       	st	Z, r24
    3a8a:	08 95       	ret

00003a8c <lora_driver_rn2483FactoryReset>:
    3a8c:	60 e0       	ldi	r22, 0x00	; 0
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	85 ee       	ldi	r24, 0xE5	; 229
    3a92:	93 e0       	ldi	r25, 0x03	; 3
    3a94:	d4 de       	rcall	.-600    	; 0x383e <_uploadMessage>
    3a96:	e0 e5       	ldi	r30, 0x50	; 80
    3a98:	f6 e1       	ldi	r31, 0x16	; 22
    3a9a:	01 90       	ld	r0, Z+
    3a9c:	00 20       	and	r0, r0
    3a9e:	e9 f7       	brne	.-6      	; 0x3a9a <lora_driver_rn2483FactoryReset+0xe>
    3aa0:	31 97       	sbiw	r30, 0x01	; 1
    3aa2:	e0 55       	subi	r30, 0x50	; 80
    3aa4:	f6 41       	sbci	r31, 0x16	; 22
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	75 97       	sbiw	r30, 0x15	; 21
    3aaa:	08 f0       	brcs	.+2      	; 0x3aae <lora_driver_rn2483FactoryReset+0x22>
    3aac:	80 e0       	ldi	r24, 0x00	; 0
    3aae:	08 95       	ret

00003ab0 <lora_driver_getRn2483Hweui>:
    3ab0:	cf 93       	push	r28
    3ab2:	df 93       	push	r29
    3ab4:	ec 01       	movw	r28, r24
    3ab6:	60 e0       	ldi	r22, 0x00	; 0
    3ab8:	70 e0       	ldi	r23, 0x00	; 0
    3aba:	86 ef       	ldi	r24, 0xF6	; 246
    3abc:	93 e0       	ldi	r25, 0x03	; 3
    3abe:	bf de       	rcall	.-642    	; 0x383e <_uploadMessage>
    3ac0:	e0 e5       	ldi	r30, 0x50	; 80
    3ac2:	f6 e1       	ldi	r31, 0x16	; 22
    3ac4:	01 90       	ld	r0, Z+
    3ac6:	00 20       	and	r0, r0
    3ac8:	e9 f7       	brne	.-6      	; 0x3ac4 <lora_driver_getRn2483Hweui+0x14>
    3aca:	e1 56       	subi	r30, 0x61	; 97
    3acc:	f6 41       	sbci	r31, 0x16	; 22
    3ace:	39 f4       	brne	.+14     	; 0x3ade <lora_driver_getRn2483Hweui+0x2e>
    3ad0:	60 e5       	ldi	r22, 0x50	; 80
    3ad2:	76 e1       	ldi	r23, 0x16	; 22
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	0e 94 21 2f 	call	0x5e42	; 0x5e42 <strcpy>
    3ada:	80 e0       	ldi	r24, 0x00	; 0
    3adc:	02 c0       	rjmp	.+4      	; 0x3ae2 <lora_driver_getRn2483Hweui+0x32>
    3ade:	18 82       	st	Y, r1
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	df 91       	pop	r29
    3ae4:	cf 91       	pop	r28
    3ae6:	08 95       	ret

00003ae8 <lora_driver_setDeviceIdentifier>:
    3ae8:	fc 01       	movw	r30, r24
    3aea:	01 90       	ld	r0, Z+
    3aec:	00 20       	and	r0, r0
    3aee:	e9 f7       	brne	.-6      	; 0x3aea <lora_driver_setDeviceIdentifier+0x2>
    3af0:	9f 01       	movw	r18, r30
    3af2:	21 51       	subi	r18, 0x11	; 17
    3af4:	31 09       	sbc	r19, r1
    3af6:	28 17       	cp	r18, r24
    3af8:	39 07       	cpc	r19, r25
    3afa:	29 f4       	brne	.+10     	; 0x3b06 <lora_driver_setDeviceIdentifier+0x1e>
    3afc:	bc 01       	movw	r22, r24
    3afe:	84 e2       	ldi	r24, 0x24	; 36
    3b00:	94 e0       	ldi	r25, 0x04	; 4
    3b02:	6c cf       	rjmp	.-296    	; 0x39dc <_uploadMessageRc>
    3b04:	08 95       	ret
    3b06:	89 e0       	ldi	r24, 0x09	; 9
    3b08:	08 95       	ret

00003b0a <lora_driver_setApplicationIdentifier>:
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	01 90       	ld	r0, Z+
    3b0e:	00 20       	and	r0, r0
    3b10:	e9 f7       	brne	.-6      	; 0x3b0c <lora_driver_setApplicationIdentifier+0x2>
    3b12:	9f 01       	movw	r18, r30
    3b14:	21 51       	subi	r18, 0x11	; 17
    3b16:	31 09       	sbc	r19, r1
    3b18:	28 17       	cp	r18, r24
    3b1a:	39 07       	cpc	r19, r25
    3b1c:	29 f4       	brne	.+10     	; 0x3b28 <lora_driver_setApplicationIdentifier+0x1e>
    3b1e:	bc 01       	movw	r22, r24
    3b20:	83 e3       	ldi	r24, 0x33	; 51
    3b22:	94 e0       	ldi	r25, 0x04	; 4
    3b24:	5b cf       	rjmp	.-330    	; 0x39dc <_uploadMessageRc>
    3b26:	08 95       	ret
    3b28:	89 e0       	ldi	r24, 0x09	; 9
    3b2a:	08 95       	ret

00003b2c <lora_driver_setApplicationKey>:
    3b2c:	fc 01       	movw	r30, r24
    3b2e:	01 90       	ld	r0, Z+
    3b30:	00 20       	and	r0, r0
    3b32:	e9 f7       	brne	.-6      	; 0x3b2e <lora_driver_setApplicationKey+0x2>
    3b34:	9f 01       	movw	r18, r30
    3b36:	21 52       	subi	r18, 0x21	; 33
    3b38:	31 09       	sbc	r19, r1
    3b3a:	28 17       	cp	r18, r24
    3b3c:	39 07       	cpc	r19, r25
    3b3e:	29 f4       	brne	.+10     	; 0x3b4a <lora_driver_setApplicationKey+0x1e>
    3b40:	bc 01       	movw	r22, r24
    3b42:	82 e4       	ldi	r24, 0x42	; 66
    3b44:	94 e0       	ldi	r25, 0x04	; 4
    3b46:	4a cf       	rjmp	.-364    	; 0x39dc <_uploadMessageRc>
    3b48:	08 95       	ret
    3b4a:	89 e0       	ldi	r24, 0x09	; 9
    3b4c:	08 95       	ret

00003b4e <lora_driver_saveMac>:
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	70 e0       	ldi	r23, 0x00	; 0
    3b52:	81 e8       	ldi	r24, 0x81	; 129
    3b54:	94 e0       	ldi	r25, 0x04	; 4
    3b56:	42 cf       	rjmp	.-380    	; 0x39dc <_uploadMessageRc>
    3b58:	08 95       	ret

00003b5a <lora_driver_join>:
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	e8 2f       	mov	r30, r24
    3b60:	f0 e0       	ldi	r31, 0x00	; 0
    3b62:	ee 0f       	add	r30, r30
    3b64:	ff 1f       	adc	r31, r31
    3b66:	e5 5a       	subi	r30, 0xA5	; 165
    3b68:	f9 4f       	sbci	r31, 0xF9	; 249
    3b6a:	60 81       	ld	r22, Z
    3b6c:	71 81       	ldd	r23, Z+1	; 0x01
    3b6e:	8a e8       	ldi	r24, 0x8A	; 138
    3b70:	94 e0       	ldi	r25, 0x04	; 4
    3b72:	34 df       	rcall	.-408    	; 0x39dc <_uploadMessageRc>
    3b74:	81 11       	cpse	r24, r1
    3b76:	14 c0       	rjmp	.+40     	; 0x3ba0 <lora_driver_join+0x46>
    3b78:	08 e2       	ldi	r16, 0x28	; 40
    3b7a:	15 e0       	ldi	r17, 0x05	; 5
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	4d e2       	ldi	r20, 0x2D	; 45
    3b82:	50 e0       	ldi	r21, 0x00	; 0
    3b84:	60 e5       	ldi	r22, 0x50	; 80
    3b86:	76 e1       	ldi	r23, 0x16	; 22
    3b88:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <_serialReplyBufferHandle>
    3b8c:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    3b90:	0e 94 ba 09 	call	0x1374	; 0x1374 <xStreamBufferReceive>
    3b94:	88 23       	and	r24, r24
    3b96:	21 f0       	breq	.+8      	; 0x3ba0 <lora_driver_join+0x46>
    3b98:	80 e5       	ldi	r24, 0x50	; 80
    3b9a:	96 e1       	ldi	r25, 0x16	; 22
    3b9c:	aa de       	rcall	.-684    	; 0x38f2 <_reply2ReturnCode>
    3b9e:	03 c0       	rjmp	.+6      	; 0x3ba6 <lora_driver_join+0x4c>
    3ba0:	80 e5       	ldi	r24, 0x50	; 80
    3ba2:	96 e1       	ldi	r25, 0x16	; 22
    3ba4:	a6 de       	rcall	.-692    	; 0x38f2 <_reply2ReturnCode>
    3ba6:	1f 91       	pop	r17
    3ba8:	0f 91       	pop	r16
    3baa:	08 95       	ret

00003bac <lora_driver_sendUploadMessage>:
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	1f 92       	push	r1
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	db 01       	movw	r26, r22
    3bbc:	11 96       	adiw	r26, 0x01	; 1
    3bbe:	9c 91       	ld	r25, X
    3bc0:	11 97       	sbiw	r26, 0x01	; 1
    3bc2:	95 31       	cpi	r25, 0x15	; 21
    3bc4:	08 f0       	brcs	.+2      	; 0x3bc8 <lora_driver_sendUploadMessage+0x1c>
    3bc6:	b4 c0       	rjmp	.+360    	; 0x3d30 <lora_driver_sendUploadMessage+0x184>
    3bc8:	99 23       	and	r25, r25
    3bca:	81 f1       	breq	.+96     	; 0x3c2c <lora_driver_sendUploadMessage+0x80>
    3bcc:	60 e0       	ldi	r22, 0x00	; 0
    3bce:	70 e0       	ldi	r23, 0x00	; 0
    3bd0:	27 2f       	mov	r18, r23
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	46 2f       	mov	r20, r22
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	fd 01       	movw	r30, r26
    3bda:	e4 0f       	add	r30, r20
    3bdc:	f5 1f       	adc	r31, r21
    3bde:	92 81       	ldd	r25, Z+2	; 0x02
    3be0:	92 95       	swap	r25
    3be2:	9f 70       	andi	r25, 0x0F	; 15
    3be4:	9a 30       	cpi	r25, 0x0A	; 10
    3be6:	10 f0       	brcs	.+4      	; 0x3bec <lora_driver_sendUploadMessage+0x40>
    3be8:	99 5c       	subi	r25, 0xC9	; 201
    3bea:	01 c0       	rjmp	.+2      	; 0x3bee <lora_driver_sendUploadMessage+0x42>
    3bec:	90 5d       	subi	r25, 0xD0	; 208
    3bee:	f9 01       	movw	r30, r18
    3bf0:	ef 51       	subi	r30, 0x1F	; 31
    3bf2:	fa 4e       	sbci	r31, 0xEA	; 234
    3bf4:	90 83       	st	Z, r25
    3bf6:	2f 5f       	subi	r18, 0xFF	; 255
    3bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    3bfa:	fd 01       	movw	r30, r26
    3bfc:	e4 0f       	add	r30, r20
    3bfe:	f5 1f       	adc	r31, r21
    3c00:	92 81       	ldd	r25, Z+2	; 0x02
    3c02:	9f 70       	andi	r25, 0x0F	; 15
    3c04:	49 2f       	mov	r20, r25
    3c06:	50 e0       	ldi	r21, 0x00	; 0
    3c08:	4a 30       	cpi	r20, 0x0A	; 10
    3c0a:	51 05       	cpc	r21, r1
    3c0c:	14 f0       	brlt	.+4      	; 0x3c12 <lora_driver_sendUploadMessage+0x66>
    3c0e:	99 5c       	subi	r25, 0xC9	; 201
    3c10:	01 c0       	rjmp	.+2      	; 0x3c14 <lora_driver_sendUploadMessage+0x68>
    3c12:	90 5d       	subi	r25, 0xD0	; 208
    3c14:	f9 01       	movw	r30, r18
    3c16:	ef 51       	subi	r30, 0x1F	; 31
    3c18:	fa 4e       	sbci	r31, 0xEA	; 234
    3c1a:	90 83       	st	Z, r25
    3c1c:	7e 5f       	subi	r23, 0xFE	; 254
    3c1e:	6f 5f       	subi	r22, 0xFF	; 255
    3c20:	11 96       	adiw	r26, 0x01	; 1
    3c22:	9c 91       	ld	r25, X
    3c24:	11 97       	sbiw	r26, 0x01	; 1
    3c26:	69 17       	cp	r22, r25
    3c28:	98 f2       	brcs	.-90     	; 0x3bd0 <lora_driver_sendUploadMessage+0x24>
    3c2a:	01 c0       	rjmp	.+2      	; 0x3c2e <lora_driver_sendUploadMessage+0x82>
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	e7 2f       	mov	r30, r23
    3c30:	f0 e0       	ldi	r31, 0x00	; 0
    3c32:	ef 51       	subi	r30, 0x1F	; 31
    3c34:	fa 4e       	sbci	r31, 0xEA	; 234
    3c36:	10 82       	st	Z, r1
    3c38:	4c 91       	ld	r20, X
    3c3a:	81 11       	cpse	r24, r1
    3c3c:	03 c0       	rjmp	.+6      	; 0x3c44 <lora_driver_sendUploadMessage+0x98>
    3c3e:	83 e9       	ldi	r24, 0x93	; 147
    3c40:	94 e0       	ldi	r25, 0x04	; 4
    3c42:	02 c0       	rjmp	.+4      	; 0x3c48 <lora_driver_sendUploadMessage+0x9c>
    3c44:	85 e9       	ldi	r24, 0x95	; 149
    3c46:	94 e0       	ldi	r25, 0x04	; 4
    3c48:	21 ee       	ldi	r18, 0xE1	; 225
    3c4a:	35 e1       	ldi	r19, 0x15	; 21
    3c4c:	3f 93       	push	r19
    3c4e:	2f 93       	push	r18
    3c50:	1f 92       	push	r1
    3c52:	4f 93       	push	r20
    3c54:	9f 93       	push	r25
    3c56:	8f 93       	push	r24
    3c58:	89 e9       	ldi	r24, 0x99	; 153
    3c5a:	94 e0       	ldi	r25, 0x04	; 4
    3c5c:	9f 93       	push	r25
    3c5e:	8f 93       	push	r24
    3c60:	83 e2       	ldi	r24, 0x23	; 35
    3c62:	96 e1       	ldi	r25, 0x16	; 22
    3c64:	9f 93       	push	r25
    3c66:	8f 93       	push	r24
    3c68:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <sprintf>
    3c6c:	60 e0       	ldi	r22, 0x00	; 0
    3c6e:	70 e0       	ldi	r23, 0x00	; 0
    3c70:	83 e2       	ldi	r24, 0x23	; 35
    3c72:	96 e1       	ldi	r25, 0x16	; 22
    3c74:	b3 de       	rcall	.-666    	; 0x39dc <_uploadMessageRc>
    3c76:	0f b6       	in	r0, 0x3f	; 63
    3c78:	f8 94       	cli
    3c7a:	de bf       	out	0x3e, r29	; 62
    3c7c:	0f be       	out	0x3f, r0	; 63
    3c7e:	cd bf       	out	0x3d, r28	; 61
    3c80:	81 11       	cpse	r24, r1
    3c82:	59 c0       	rjmp	.+178    	; 0x3d36 <lora_driver_sendUploadMessage+0x18a>
    3c84:	08 e2       	ldi	r16, 0x28	; 40
    3c86:	15 e0       	ldi	r17, 0x05	; 5
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	4d e2       	ldi	r20, 0x2D	; 45
    3c8e:	50 e0       	ldi	r21, 0x00	; 0
    3c90:	60 e5       	ldi	r22, 0x50	; 80
    3c92:	76 e1       	ldi	r23, 0x16	; 22
    3c94:	80 91 c7 15 	lds	r24, 0x15C7	; 0x8015c7 <_serialReplyBufferHandle>
    3c98:	90 91 c8 15 	lds	r25, 0x15C8	; 0x8015c8 <_serialReplyBufferHandle+0x1>
    3c9c:	0e 94 ba 09 	call	0x1374	; 0x1374 <xStreamBufferReceive>
    3ca0:	88 23       	and	r24, r24
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <lora_driver_sendUploadMessage+0xfa>
    3ca4:	47 c0       	rjmp	.+142    	; 0x3d34 <lora_driver_sendUploadMessage+0x188>
    3ca6:	80 e5       	ldi	r24, 0x50	; 80
    3ca8:	96 e1       	ldi	r25, 0x16	; 22
    3caa:	23 de       	rcall	.-954    	; 0x38f2 <_reply2ReturnCode>
    3cac:	8e 30       	cpi	r24, 0x0E	; 14
    3cae:	09 f0       	breq	.+2      	; 0x3cb2 <lora_driver_sendUploadMessage+0x106>
    3cb0:	42 c0       	rjmp	.+132    	; 0x3d36 <lora_driver_sendUploadMessage+0x18a>
    3cb2:	87 e0       	ldi	r24, 0x07	; 7
    3cb4:	89 83       	std	Y+1, r24	; 0x01
    3cb6:	80 91 c5 15 	lds	r24, 0x15C5	; 0x8015c5 <_downlinkMessageBuffer>
    3cba:	90 91 c6 15 	lds	r25, 0x15C6	; 0x8015c6 <_downlinkMessageBuffer+0x1>
    3cbe:	89 2b       	or	r24, r25
    3cc0:	a9 f1       	breq	.+106    	; 0x3d2c <lora_driver_sendUploadMessage+0x180>
    3cc2:	be 01       	movw	r22, r28
    3cc4:	6f 5f       	subi	r22, 0xFF	; 255
    3cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc8:	80 e5       	ldi	r24, 0x50	; 80
    3cca:	96 e1       	ldi	r25, 0x16	; 22
    3ccc:	68 d1       	rcall	.+720    	; 0x3f9e <decode_port_no>
    3cce:	80 93 cb 15 	sts	0x15CB, r24	; 0x8015cb <_downlinkPayload>
    3cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	e0 5b       	subi	r30, 0xB0	; 176
    3cd8:	f9 4e       	sbci	r31, 0xE9	; 233
    3cda:	df 01       	movw	r26, r30
    3cdc:	0d 90       	ld	r0, X+
    3cde:	00 20       	and	r0, r0
    3ce0:	e9 f7       	brne	.-6      	; 0x3cdc <lora_driver_sendUploadMessage+0x130>
    3ce2:	11 97       	sbiw	r26, 0x01	; 1
    3ce4:	ae 1b       	sub	r26, r30
    3ce6:	bf 0b       	sbc	r27, r31
    3ce8:	aa 23       	and	r26, r26
    3cea:	91 f0       	breq	.+36     	; 0x3d10 <lora_driver_sendUploadMessage+0x164>
    3cec:	bb 27       	eor	r27, r27
    3cee:	cd 01       	movw	r24, r26
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	9c 01       	movw	r18, r24
    3cf4:	12 f4       	brpl	.+4      	; 0x3cfa <lora_driver_sendUploadMessage+0x14e>
    3cf6:	2f 5f       	subi	r18, 0xFF	; 255
    3cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfa:	35 95       	asr	r19
    3cfc:	27 95       	ror	r18
    3cfe:	20 93 cc 15 	sts	0x15CC, r18	; 0x8015cc <_downlinkPayload+0x1>
    3d02:	af 01       	movw	r20, r30
    3d04:	4f 5f       	subi	r20, 0xFF	; 255
    3d06:	5f 4f       	sbci	r21, 0xFF	; 255
    3d08:	64 e1       	ldi	r22, 0x14	; 20
    3d0a:	8d ec       	ldi	r24, 0xCD	; 205
    3d0c:	95 e1       	ldi	r25, 0x15	; 21
    3d0e:	73 d1       	rcall	.+742    	; 0x3ff6 <decode_hexadecimal_string_bytes>
    3d10:	01 e0       	ldi	r16, 0x01	; 1
    3d12:	10 e0       	ldi	r17, 0x00	; 0
    3d14:	20 e0       	ldi	r18, 0x00	; 0
    3d16:	30 e0       	ldi	r19, 0x00	; 0
    3d18:	46 e1       	ldi	r20, 0x16	; 22
    3d1a:	50 e0       	ldi	r21, 0x00	; 0
    3d1c:	6b ec       	ldi	r22, 0xCB	; 203
    3d1e:	75 e1       	ldi	r23, 0x15	; 21
    3d20:	80 91 c5 15 	lds	r24, 0x15C5	; 0x8015c5 <_downlinkMessageBuffer>
    3d24:	90 91 c6 15 	lds	r25, 0x15C6	; 0x8015c6 <_downlinkMessageBuffer+0x1>
    3d28:	0e 94 b3 08 	call	0x1166	; 0x1166 <xStreamBufferSend>
    3d2c:	8e e0       	ldi	r24, 0x0E	; 14
    3d2e:	03 c0       	rjmp	.+6      	; 0x3d36 <lora_driver_sendUploadMessage+0x18a>
    3d30:	84 e1       	ldi	r24, 0x14	; 20
    3d32:	01 c0       	rjmp	.+2      	; 0x3d36 <lora_driver_sendUploadMessage+0x18a>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	0f 90       	pop	r0
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	08 95       	ret

00003d42 <lora_driver_setAdaptiveDataRate>:
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	19 f0       	breq	.+6      	; 0x3d4c <lora_driver_setAdaptiveDataRate+0xa>
    3d46:	69 ea       	ldi	r22, 0xA9	; 169
    3d48:	74 e0       	ldi	r23, 0x04	; 4
    3d4a:	02 c0       	rjmp	.+4      	; 0x3d50 <lora_driver_setAdaptiveDataRate+0xe>
    3d4c:	62 e8       	ldi	r22, 0x82	; 130
    3d4e:	75 e0       	ldi	r23, 0x05	; 5
    3d50:	8d ea       	ldi	r24, 0xAD	; 173
    3d52:	94 e0       	ldi	r25, 0x04	; 4
    3d54:	43 ce       	rjmp	.-890    	; 0x39dc <_uploadMessageRc>
    3d56:	08 95       	ret

00003d58 <lora_driver_setReceiveDelay>:
    3d58:	9f 93       	push	r25
    3d5a:	8f 93       	push	r24
    3d5c:	8e ed       	ldi	r24, 0xDE	; 222
    3d5e:	94 e0       	ldi	r25, 0x04	; 4
    3d60:	9f 93       	push	r25
    3d62:	8f 93       	push	r24
    3d64:	83 e2       	ldi	r24, 0x23	; 35
    3d66:	96 e1       	ldi	r25, 0x16	; 22
    3d68:	9f 93       	push	r25
    3d6a:	8f 93       	push	r24
    3d6c:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <sprintf>
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	70 e0       	ldi	r23, 0x00	; 0
    3d74:	83 e2       	ldi	r24, 0x23	; 35
    3d76:	96 e1       	ldi	r25, 0x16	; 22
    3d78:	31 de       	rcall	.-926    	; 0x39dc <_uploadMessageRc>
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	08 95       	ret

00003d88 <lora_driver_configureToEu868>:
    3d88:	2f 92       	push	r2
    3d8a:	3f 92       	push	r3
    3d8c:	4f 92       	push	r4
    3d8e:	5f 92       	push	r5
    3d90:	6f 92       	push	r6
    3d92:	7f 92       	push	r7
    3d94:	8f 92       	push	r8
    3d96:	9f 92       	push	r9
    3d98:	af 92       	push	r10
    3d9a:	bf 92       	push	r11
    3d9c:	cf 92       	push	r12
    3d9e:	df 92       	push	r13
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	cd b7       	in	r28, 0x3d	; 61
    3dae:	de b7       	in	r29, 0x3e	; 62
    3db0:	a0 97       	sbiw	r28, 0x20	; 32
    3db2:	0f b6       	in	r0, 0x3f	; 63
    3db4:	f8 94       	cli
    3db6:	de bf       	out	0x3e, r29	; 62
    3db8:	0f be       	out	0x3f, r0	; 63
    3dba:	cd bf       	out	0x3d, r28	; 61
    3dbc:	6b e0       	ldi	r22, 0x0B	; 11
    3dbe:	75 e0       	ldi	r23, 0x05	; 5
    3dc0:	87 e1       	ldi	r24, 0x17	; 23
    3dc2:	95 e0       	ldi	r25, 0x05	; 5
    3dc4:	3c dd       	rcall	.-1416   	; 0x383e <_uploadMessage>
    3dc6:	95 dd       	rcall	.-1238   	; 0x38f2 <_reply2ReturnCode>
    3dc8:	81 11       	cpse	r24, r1
    3dca:	a3 c0       	rjmp	.+326    	; 0x3f12 <lora_driver_configureToEu868+0x18a>
    3dcc:	80 e2       	ldi	r24, 0x20	; 32
    3dce:	e2 e2       	ldi	r30, 0x22	; 34
    3dd0:	f2 e0       	ldi	r31, 0x02	; 2
    3dd2:	de 01       	movw	r26, r28
    3dd4:	11 96       	adiw	r26, 0x01	; 1
    3dd6:	01 90       	ld	r0, Z+
    3dd8:	0d 92       	st	X+, r0
    3dda:	8a 95       	dec	r24
    3ddc:	e1 f7       	brne	.-8      	; 0x3dd6 <lora_driver_configureToEu868+0x4e>
    3dde:	9e 01       	movw	r18, r28
    3de0:	2f 5f       	subi	r18, 0xFF	; 255
    3de2:	3f 4f       	sbci	r19, 0xFF	; 255
    3de4:	69 01       	movw	r12, r18
    3de6:	e1 2c       	mov	r14, r1
    3de8:	f1 2c       	mov	r15, r1
    3dea:	0f 2e       	mov	r0, r31
    3dec:	f3 e2       	ldi	r31, 0x23	; 35
    3dee:	af 2e       	mov	r10, r31
    3df0:	f5 e0       	ldi	r31, 0x05	; 5
    3df2:	bf 2e       	mov	r11, r31
    3df4:	f0 2d       	mov	r31, r0
    3df6:	03 e2       	ldi	r16, 0x23	; 35
    3df8:	16 e1       	ldi	r17, 0x16	; 22
    3dfa:	0f 2e       	mov	r0, r31
    3dfc:	fc e3       	ldi	r31, 0x3C	; 60
    3dfe:	4f 2e       	mov	r4, r31
    3e00:	f5 e0       	ldi	r31, 0x05	; 5
    3e02:	5f 2e       	mov	r5, r31
    3e04:	f0 2d       	mov	r31, r0
    3e06:	0f 2e       	mov	r0, r31
    3e08:	f3 e5       	ldi	r31, 0x53	; 83
    3e0a:	8f 2e       	mov	r8, r31
    3e0c:	f5 e0       	ldi	r31, 0x05	; 5
    3e0e:	9f 2e       	mov	r9, r31
    3e10:	f0 2d       	mov	r31, r0
    3e12:	0f 2e       	mov	r0, r31
    3e14:	fd e6       	ldi	r31, 0x6D	; 109
    3e16:	6f 2e       	mov	r6, r31
    3e18:	f5 e0       	ldi	r31, 0x05	; 5
    3e1a:	7f 2e       	mov	r7, r31
    3e1c:	f0 2d       	mov	r31, r0
    3e1e:	3e 2c       	mov	r3, r14
    3e20:	2f 2c       	mov	r2, r15
    3e22:	ff 92       	push	r15
    3e24:	ef 92       	push	r14
    3e26:	bf 92       	push	r11
    3e28:	af 92       	push	r10
    3e2a:	1f 93       	push	r17
    3e2c:	0f 93       	push	r16
    3e2e:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <sprintf>
    3e32:	60 e0       	ldi	r22, 0x00	; 0
    3e34:	70 e0       	ldi	r23, 0x00	; 0
    3e36:	c8 01       	movw	r24, r16
    3e38:	02 dd       	rcall	.-1532   	; 0x383e <_uploadMessage>
    3e3a:	5b dd       	rcall	.-1354   	; 0x38f2 <_reply2ReturnCode>
    3e3c:	0f 90       	pop	r0
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	0f 90       	pop	r0
    3e46:	0f 90       	pop	r0
    3e48:	81 11       	cpse	r24, r1
    3e4a:	63 c0       	rjmp	.+198    	; 0x3f12 <lora_driver_configureToEu868+0x18a>
    3e4c:	32 e0       	ldi	r19, 0x02	; 2
    3e4e:	3e 15       	cp	r19, r14
    3e50:	e8 f4       	brcc	.+58     	; 0x3e8c <lora_driver_configureToEu868+0x104>
    3e52:	f6 01       	movw	r30, r12
    3e54:	83 81       	ldd	r24, Z+3	; 0x03
    3e56:	8f 93       	push	r24
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	8f 93       	push	r24
    3e5c:	81 81       	ldd	r24, Z+1	; 0x01
    3e5e:	8f 93       	push	r24
    3e60:	80 81       	ld	r24, Z
    3e62:	8f 93       	push	r24
    3e64:	ff 92       	push	r15
    3e66:	ef 92       	push	r14
    3e68:	5f 92       	push	r5
    3e6a:	4f 92       	push	r4
    3e6c:	1f 93       	push	r17
    3e6e:	0f 93       	push	r16
    3e70:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <sprintf>
    3e74:	60 e0       	ldi	r22, 0x00	; 0
    3e76:	70 e0       	ldi	r23, 0x00	; 0
    3e78:	c8 01       	movw	r24, r16
    3e7a:	e1 dc       	rcall	.-1598   	; 0x383e <_uploadMessage>
    3e7c:	3a dd       	rcall	.-1420   	; 0x38f2 <_reply2ReturnCode>
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	81 11       	cpse	r24, r1
    3e8a:	43 c0       	rjmp	.+134    	; 0x3f12 <lora_driver_configureToEu868+0x18a>
    3e8c:	2f 92       	push	r2
    3e8e:	3f 92       	push	r3
    3e90:	9f 92       	push	r9
    3e92:	8f 92       	push	r8
    3e94:	1f 93       	push	r17
    3e96:	0f 93       	push	r16
    3e98:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <sprintf>
    3e9c:	60 e0       	ldi	r22, 0x00	; 0
    3e9e:	70 e0       	ldi	r23, 0x00	; 0
    3ea0:	c8 01       	movw	r24, r16
    3ea2:	cd dc       	rcall	.-1638   	; 0x383e <_uploadMessage>
    3ea4:	26 dd       	rcall	.-1460   	; 0x38f2 <_reply2ReturnCode>
    3ea6:	0f 90       	pop	r0
    3ea8:	0f 90       	pop	r0
    3eaa:	0f 90       	pop	r0
    3eac:	0f 90       	pop	r0
    3eae:	0f 90       	pop	r0
    3eb0:	0f 90       	pop	r0
    3eb2:	81 11       	cpse	r24, r1
    3eb4:	2e c0       	rjmp	.+92     	; 0x3f12 <lora_driver_configureToEu868+0x18a>
    3eb6:	2f 92       	push	r2
    3eb8:	3f 92       	push	r3
    3eba:	7f 92       	push	r7
    3ebc:	6f 92       	push	r6
    3ebe:	1f 93       	push	r17
    3ec0:	0f 93       	push	r16
    3ec2:	0e 94 83 2f 	call	0x5f06	; 0x5f06 <sprintf>
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	70 e0       	ldi	r23, 0x00	; 0
    3eca:	c8 01       	movw	r24, r16
    3ecc:	b8 dc       	rcall	.-1680   	; 0x383e <_uploadMessage>
    3ece:	11 dd       	rcall	.-1502   	; 0x38f2 <_reply2ReturnCode>
    3ed0:	0f 90       	pop	r0
    3ed2:	0f 90       	pop	r0
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	81 11       	cpse	r24, r1
    3ede:	19 c0       	rjmp	.+50     	; 0x3f12 <lora_driver_configureToEu868+0x18a>
    3ee0:	3f ef       	ldi	r19, 0xFF	; 255
    3ee2:	e3 1a       	sub	r14, r19
    3ee4:	f3 0a       	sbc	r15, r19
    3ee6:	84 e0       	ldi	r24, 0x04	; 4
    3ee8:	c8 0e       	add	r12, r24
    3eea:	d1 1c       	adc	r13, r1
    3eec:	98 e0       	ldi	r25, 0x08	; 8
    3eee:	e9 16       	cp	r14, r25
    3ef0:	f1 04       	cpc	r15, r1
    3ef2:	09 f0       	breq	.+2      	; 0x3ef6 <lora_driver_configureToEu868+0x16e>
    3ef4:	94 cf       	rjmp	.-216    	; 0x3e1e <lora_driver_configureToEu868+0x96>
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	70 e0       	ldi	r23, 0x00	; 0
    3efa:	85 e8       	ldi	r24, 0x85	; 133
    3efc:	95 e0       	ldi	r25, 0x05	; 5
    3efe:	9f dc       	rcall	.-1730   	; 0x383e <_uploadMessage>
    3f00:	f8 dc       	rcall	.-1552   	; 0x38f2 <_reply2ReturnCode>
    3f02:	81 11       	cpse	r24, r1
    3f04:	06 c0       	rjmp	.+12     	; 0x3f12 <lora_driver_configureToEu868+0x18a>
    3f06:	60 e0       	ldi	r22, 0x00	; 0
    3f08:	70 e0       	ldi	r23, 0x00	; 0
    3f0a:	86 e9       	ldi	r24, 0x96	; 150
    3f0c:	95 e0       	ldi	r25, 0x05	; 5
    3f0e:	97 dc       	rcall	.-1746   	; 0x383e <_uploadMessage>
    3f10:	f0 dc       	rcall	.-1568   	; 0x38f2 <_reply2ReturnCode>
    3f12:	a0 96       	adiw	r28, 0x20	; 32
    3f14:	0f b6       	in	r0, 0x3f	; 63
    3f16:	f8 94       	cli
    3f18:	de bf       	out	0x3e, r29	; 62
    3f1a:	0f be       	out	0x3f, r0	; 63
    3f1c:	cd bf       	out	0x3d, r28	; 61
    3f1e:	df 91       	pop	r29
    3f20:	cf 91       	pop	r28
    3f22:	1f 91       	pop	r17
    3f24:	0f 91       	pop	r16
    3f26:	ff 90       	pop	r15
    3f28:	ef 90       	pop	r14
    3f2a:	df 90       	pop	r13
    3f2c:	cf 90       	pop	r12
    3f2e:	bf 90       	pop	r11
    3f30:	af 90       	pop	r10
    3f32:	9f 90       	pop	r9
    3f34:	8f 90       	pop	r8
    3f36:	7f 90       	pop	r7
    3f38:	6f 90       	pop	r6
    3f3a:	5f 90       	pop	r5
    3f3c:	4f 90       	pop	r4
    3f3e:	3f 90       	pop	r3
    3f40:	2f 90       	pop	r2
    3f42:	08 95       	ret

00003f44 <lora_driver_setOtaaIdentity>:
    3f44:	ef 92       	push	r14
    3f46:	ff 92       	push	r15
    3f48:	0f 93       	push	r16
    3f4a:	1f 93       	push	r17
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	ec 01       	movw	r28, r24
    3f52:	8b 01       	movw	r16, r22
    3f54:	7a 01       	movw	r14, r20
    3f56:	81 e0       	ldi	r24, 0x01	; 1
    3f58:	f4 de       	rcall	.-536    	; 0x3d42 <lora_driver_setAdaptiveDataRate>
    3f5a:	81 11       	cpse	r24, r1
    3f5c:	0d c0       	rjmp	.+26     	; 0x3f78 <lora_driver_setOtaaIdentity+0x34>
    3f5e:	ce 01       	movw	r24, r28
    3f60:	d4 dd       	rcall	.-1112   	; 0x3b0a <lora_driver_setApplicationIdentifier>
    3f62:	81 11       	cpse	r24, r1
    3f64:	09 c0       	rjmp	.+18     	; 0x3f78 <lora_driver_setOtaaIdentity+0x34>
    3f66:	c8 01       	movw	r24, r16
    3f68:	e1 dd       	rcall	.-1086   	; 0x3b2c <lora_driver_setApplicationKey>
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	05 c0       	rjmp	.+10     	; 0x3f78 <lora_driver_setOtaaIdentity+0x34>
    3f6e:	c7 01       	movw	r24, r14
    3f70:	bb dd       	rcall	.-1162   	; 0x3ae8 <lora_driver_setDeviceIdentifier>
    3f72:	81 11       	cpse	r24, r1
    3f74:	01 c0       	rjmp	.+2      	; 0x3f78 <lora_driver_setOtaaIdentity+0x34>
    3f76:	eb dd       	rcall	.-1066   	; 0x3b4e <lora_driver_saveMac>
    3f78:	df 91       	pop	r29
    3f7a:	cf 91       	pop	r28
    3f7c:	1f 91       	pop	r17
    3f7e:	0f 91       	pop	r16
    3f80:	ff 90       	pop	r15
    3f82:	ef 90       	pop	r14
    3f84:	08 95       	ret

00003f86 <lora_driver_mapReturnCodeToText>:
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	fc 01       	movw	r30, r24
    3f8a:	ee 0f       	add	r30, r30
    3f8c:	ff 1f       	adc	r31, r31
    3f8e:	8e 0f       	add	r24, r30
    3f90:	9f 1f       	adc	r25, r31
    3f92:	fc 01       	movw	r30, r24
    3f94:	e1 5a       	subi	r30, 0xA1	; 161
    3f96:	f9 4f       	sbci	r31, 0xF9	; 249
    3f98:	81 81       	ldd	r24, Z+1	; 0x01
    3f9a:	92 81       	ldd	r25, Z+2	; 0x02
    3f9c:	08 95       	ret

00003f9e <decode_port_no>:
    3f9e:	dc 01       	movw	r26, r24
    3fa0:	00 97       	sbiw	r24, 0x00	; 0
    3fa2:	29 f1       	breq	.+74     	; 0x3fee <decode_port_no+0x50>
    3fa4:	fb 01       	movw	r30, r22
    3fa6:	20 81       	ld	r18, Z
    3fa8:	fc 01       	movw	r30, r24
    3faa:	01 90       	ld	r0, Z+
    3fac:	00 20       	and	r0, r0
    3fae:	e9 f7       	brne	.-6      	; 0x3faa <decode_port_no+0xc>
    3fb0:	31 97       	sbiw	r30, 0x01	; 1
    3fb2:	e8 1b       	sub	r30, r24
    3fb4:	f9 0b       	sbc	r31, r25
    3fb6:	82 2f       	mov	r24, r18
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	e8 17       	cp	r30, r24
    3fbc:	f9 07       	cpc	r31, r25
    3fbe:	c8 f0       	brcs	.+50     	; 0x3ff2 <decode_port_no+0x54>
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	08 c0       	rjmp	.+16     	; 0x3fd4 <decode_port_no+0x36>
    3fc4:	88 0f       	add	r24, r24
    3fc6:	38 2f       	mov	r19, r24
    3fc8:	33 0f       	add	r19, r19
    3fca:	33 0f       	add	r19, r19
    3fcc:	83 0f       	add	r24, r19
    3fce:	80 53       	subi	r24, 0x30	; 48
    3fd0:	89 0f       	add	r24, r25
    3fd2:	2f 5f       	subi	r18, 0xFF	; 255
    3fd4:	fd 01       	movw	r30, r26
    3fd6:	e2 0f       	add	r30, r18
    3fd8:	f1 1d       	adc	r31, r1
    3fda:	90 81       	ld	r25, Z
    3fdc:	30 ed       	ldi	r19, 0xD0	; 208
    3fde:	39 0f       	add	r19, r25
    3fe0:	3a 30       	cpi	r19, 0x0A	; 10
    3fe2:	10 f4       	brcc	.+4      	; 0x3fe8 <decode_port_no+0x4a>
    3fe4:	91 11       	cpse	r25, r1
    3fe6:	ee cf       	rjmp	.-36     	; 0x3fc4 <decode_port_no+0x26>
    3fe8:	fb 01       	movw	r30, r22
    3fea:	20 83       	st	Z, r18
    3fec:	08 95       	ret
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	08 95       	ret
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	08 95       	ret

00003ff6 <decode_hexadecimal_string_bytes>:
    3ff6:	0f 93       	push	r16
    3ff8:	1f 93       	push	r17
    3ffa:	cf 93       	push	r28
    3ffc:	df 93       	push	r29
    3ffe:	dc 01       	movw	r26, r24
    4000:	ea 01       	movw	r28, r20
    4002:	20 97       	sbiw	r28, 0x00	; 0
    4004:	e1 f1       	breq	.+120    	; 0x407e <decode_hexadecimal_string_bytes+0x88>
    4006:	fa 01       	movw	r30, r20
    4008:	01 90       	ld	r0, Z+
    400a:	00 20       	and	r0, r0
    400c:	e9 f7       	brne	.-6      	; 0x4008 <decode_hexadecimal_string_bytes+0x12>
    400e:	31 97       	sbiw	r30, 0x01	; 1
    4010:	e4 1b       	sub	r30, r20
    4012:	f5 0b       	sbc	r31, r21
    4014:	32 97       	sbiw	r30, 0x02	; 2
    4016:	10 f5       	brcc	.+68     	; 0x405c <decode_hexadecimal_string_bytes+0x66>
    4018:	32 c0       	rjmp	.+100    	; 0x407e <decode_hexadecimal_string_bytes+0x88>
    401a:	8d 01       	movw	r16, r26
    401c:	04 0f       	add	r16, r20
    401e:	15 1f       	adc	r17, r21
    4020:	30 e0       	ldi	r19, 0x00	; 0
    4022:	ae 01       	movw	r20, r28
    4024:	42 0f       	add	r20, r18
    4026:	53 1f       	adc	r21, r19
    4028:	fa 01       	movw	r30, r20
    402a:	90 81       	ld	r25, Z
    402c:	91 34       	cpi	r25, 0x41	; 65
    402e:	28 f0       	brcs	.+10     	; 0x403a <decode_hexadecimal_string_bytes+0x44>
    4030:	97 53       	subi	r25, 0x37	; 55
    4032:	59 2f       	mov	r21, r25
    4034:	52 95       	swap	r21
    4036:	50 7f       	andi	r21, 0xF0	; 240
    4038:	03 c0       	rjmp	.+6      	; 0x4040 <decode_hexadecimal_string_bytes+0x4a>
    403a:	59 2f       	mov	r21, r25
    403c:	52 95       	swap	r21
    403e:	50 7f       	andi	r21, 0xF0	; 240
    4040:	2c 0f       	add	r18, r28
    4042:	3d 1f       	adc	r19, r29
    4044:	f9 01       	movw	r30, r18
    4046:	91 81       	ldd	r25, Z+1	; 0x01
    4048:	91 34       	cpi	r25, 0x41	; 65
    404a:	10 f0       	brcs	.+4      	; 0x4050 <decode_hexadecimal_string_bytes+0x5a>
    404c:	97 53       	subi	r25, 0x37	; 55
    404e:	01 c0       	rjmp	.+2      	; 0x4052 <decode_hexadecimal_string_bytes+0x5c>
    4050:	90 53       	subi	r25, 0x30	; 48
    4052:	95 0f       	add	r25, r21
    4054:	f8 01       	movw	r30, r16
    4056:	90 83       	st	Z, r25
    4058:	8f 5f       	subi	r24, 0xFF	; 255
    405a:	01 c0       	rjmp	.+2      	; 0x405e <decode_hexadecimal_string_bytes+0x68>
    405c:	80 e0       	ldi	r24, 0x00	; 0
    405e:	28 2f       	mov	r18, r24
    4060:	22 0f       	add	r18, r18
    4062:	48 2f       	mov	r20, r24
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	fe 01       	movw	r30, r28
    4068:	01 90       	ld	r0, Z+
    406a:	00 20       	and	r0, r0
    406c:	e9 f7       	brne	.-6      	; 0x4068 <decode_hexadecimal_string_bytes+0x72>
    406e:	31 97       	sbiw	r30, 0x01	; 1
    4070:	ec 1b       	sub	r30, r28
    4072:	fd 0b       	sbc	r31, r29
    4074:	4e 17       	cp	r20, r30
    4076:	5f 07       	cpc	r21, r31
    4078:	10 f4       	brcc	.+4      	; 0x407e <decode_hexadecimal_string_bytes+0x88>
    407a:	86 13       	cpse	r24, r22
    407c:	ce cf       	rjmp	.-100    	; 0x401a <decode_hexadecimal_string_bytes+0x24>
    407e:	df 91       	pop	r29
    4080:	cf 91       	pop	r28
    4082:	1f 91       	pop	r17
    4084:	0f 91       	pop	r16
    4086:	08 95       	ret

00004088 <serial_create>:
    4088:	2f 92       	push	r2
    408a:	3f 92       	push	r3
    408c:	4f 92       	push	r4
    408e:	5f 92       	push	r5
    4090:	6f 92       	push	r6
    4092:	7f 92       	push	r7
    4094:	8f 92       	push	r8
    4096:	9f 92       	push	r9
    4098:	af 92       	push	r10
    409a:	cf 92       	push	r12
    409c:	ef 92       	push	r14
    409e:	ff 92       	push	r15
    40a0:	0f 93       	push	r16
    40a2:	1f 93       	push	r17
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	cd b7       	in	r28, 0x3d	; 61
    40aa:	de b7       	in	r29, 0x3e	; 62
    40ac:	f8 2e       	mov	r15, r24
    40ae:	2a 01       	movw	r4, r20
    40b0:	3b 01       	movw	r6, r22
    40b2:	88 e0       	ldi	r24, 0x08	; 8
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    40ba:	8c 01       	movw	r16, r24
    40bc:	8f 2d       	mov	r24, r15
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	fc 01       	movw	r30, r24
    40c2:	ee 0f       	add	r30, r30
    40c4:	ff 1f       	adc	r31, r31
    40c6:	e3 58       	subi	r30, 0x83	; 131
    40c8:	f9 4e       	sbci	r31, 0xE9	; 233
    40ca:	11 83       	std	Z+1, r17	; 0x01
    40cc:	00 83       	st	Z, r16
    40ce:	01 15       	cp	r16, r1
    40d0:	11 05       	cpc	r17, r1
    40d2:	09 f4       	brne	.+2      	; 0x40d6 <serial_create+0x4e>
    40d4:	6f c0       	rjmp	.+222    	; 0x41b4 <serial_create+0x12c>
    40d6:	88 0f       	add	r24, r24
    40d8:	99 1f       	adc	r25, r25
    40da:	fc 01       	movw	r30, r24
    40dc:	e5 5f       	subi	r30, 0xF5	; 245
    40de:	fd 4f       	sbci	r31, 0xFD	; 253
    40e0:	80 81       	ld	r24, Z
    40e2:	91 81       	ldd	r25, Z+1	; 0x01
    40e4:	d8 01       	movw	r26, r16
    40e6:	8d 93       	st	X+, r24
    40e8:	9c 93       	st	X, r25
    40ea:	8c 2d       	mov	r24, r12
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	88 0f       	add	r24, r24
    40f0:	99 1f       	adc	r25, r25
    40f2:	88 0f       	add	r24, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    40fa:	1c 01       	movw	r2, r24
    40fc:	86 e0       	ldi	r24, 0x06	; 6
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    4104:	7c 01       	movw	r14, r24
    4106:	4c 2d       	mov	r20, r12
    4108:	b1 01       	movw	r22, r2
    410a:	0e 94 9c 29 	call	0x5338	; 0x5338 <fifo_init>
    410e:	f8 01       	movw	r30, r16
    4110:	f5 82       	std	Z+5, r15	; 0x05
    4112:	e4 82       	std	Z+4, r14	; 0x04
    4114:	8a 2d       	mov	r24, r10
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	88 0f       	add	r24, r24
    411a:	99 1f       	adc	r25, r25
    411c:	88 0f       	add	r24, r24
    411e:	99 1f       	adc	r25, r25
    4120:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    4124:	1c 01       	movw	r2, r24
    4126:	86 e0       	ldi	r24, 0x06	; 6
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    412e:	7c 01       	movw	r14, r24
    4130:	4a 2d       	mov	r20, r10
    4132:	b1 01       	movw	r22, r2
    4134:	0e 94 9c 29 	call	0x5338	; 0x5338 <fifo_init>
    4138:	d8 01       	movw	r26, r16
    413a:	13 96       	adiw	r26, 0x03	; 3
    413c:	fc 92       	st	X, r15
    413e:	ee 92       	st	-X, r14
    4140:	12 97       	sbiw	r26, 0x02	; 2
    4142:	17 96       	adiw	r26, 0x07	; 7
    4144:	9c 92       	st	X, r9
    4146:	8e 92       	st	-X, r8
    4148:	16 97       	sbiw	r26, 0x06	; 6
    414a:	ff b6       	in	r15, 0x3f	; 63
    414c:	f8 94       	cli
    414e:	ed 91       	ld	r30, X+
    4150:	fc 91       	ld	r31, X
    4152:	11 97       	sbiw	r26, 0x01	; 1
    4154:	36 97       	sbiw	r30, 0x06	; 6
    4156:	80 81       	ld	r24, Z
    4158:	82 60       	ori	r24, 0x02	; 2
    415a:	80 83       	st	Z, r24
    415c:	8d 90       	ld	r8, X+
    415e:	9c 90       	ld	r9, X
    4160:	c3 01       	movw	r24, r6
    4162:	b2 01       	movw	r22, r4
    4164:	0e 94 b6 2a 	call	0x556c	; 0x556c <__floatunsisf>
    4168:	20 e0       	ldi	r18, 0x00	; 0
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	40 e0       	ldi	r20, 0x00	; 0
    416e:	51 e4       	ldi	r21, 0x41	; 65
    4170:	0e 94 97 2b 	call	0x572e	; 0x572e <__mulsf3>
    4174:	9b 01       	movw	r18, r22
    4176:	ac 01       	movw	r20, r24
    4178:	60 e0       	ldi	r22, 0x00	; 0
    417a:	74 e2       	ldi	r23, 0x24	; 36
    417c:	84 e7       	ldi	r24, 0x74	; 116
    417e:	9b e4       	ldi	r25, 0x4B	; 75
    4180:	0e 94 1d 2a 	call	0x543a	; 0x543a <__divsf3>
    4184:	20 e0       	ldi	r18, 0x00	; 0
    4186:	30 e0       	ldi	r19, 0x00	; 0
    4188:	40 e8       	ldi	r20, 0x80	; 128
    418a:	5f e3       	ldi	r21, 0x3F	; 63
    418c:	0e 94 b8 29 	call	0x5370	; 0x5370 <__subsf3>
    4190:	0e 94 8a 2a 	call	0x5514	; 0x5514 <__fixunssfsi>
    4194:	f4 01       	movw	r30, r8
    4196:	32 97       	sbiw	r30, 0x02	; 2
    4198:	60 83       	st	Z, r22
    419a:	d8 01       	movw	r26, r16
    419c:	ed 91       	ld	r30, X+
    419e:	fc 91       	ld	r31, X
    41a0:	11 97       	sbiw	r26, 0x01	; 1
    41a2:	35 97       	sbiw	r30, 0x05	; 5
    41a4:	88 e9       	ldi	r24, 0x98	; 152
    41a6:	80 83       	st	Z, r24
    41a8:	ed 91       	ld	r30, X+
    41aa:	fc 91       	ld	r31, X
    41ac:	34 97       	sbiw	r30, 0x04	; 4
    41ae:	86 e0       	ldi	r24, 0x06	; 6
    41b0:	80 83       	st	Z, r24
    41b2:	ff be       	out	0x3f, r15	; 63
    41b4:	c8 01       	movw	r24, r16
    41b6:	df 91       	pop	r29
    41b8:	cf 91       	pop	r28
    41ba:	1f 91       	pop	r17
    41bc:	0f 91       	pop	r16
    41be:	ff 90       	pop	r15
    41c0:	ef 90       	pop	r14
    41c2:	cf 90       	pop	r12
    41c4:	af 90       	pop	r10
    41c6:	9f 90       	pop	r9
    41c8:	8f 90       	pop	r8
    41ca:	7f 90       	pop	r7
    41cc:	6f 90       	pop	r6
    41ce:	5f 90       	pop	r5
    41d0:	4f 90       	pop	r4
    41d2:	3f 90       	pop	r3
    41d4:	2f 90       	pop	r2
    41d6:	08 95       	ret

000041d8 <serial_sendByte>:
    41d8:	cf 93       	push	r28
    41da:	df 93       	push	r29
    41dc:	dc 01       	movw	r26, r24
    41de:	89 2b       	or	r24, r25
    41e0:	01 f1       	breq	.+64     	; 0x4222 <serial_sendByte+0x4a>
    41e2:	12 96       	adiw	r26, 0x02	; 2
    41e4:	ed 91       	ld	r30, X+
    41e6:	fc 91       	ld	r31, X
    41e8:	13 97       	sbiw	r26, 0x03	; 3
    41ea:	93 81       	ldd	r25, Z+3	; 0x03
    41ec:	82 81       	ldd	r24, Z+2	; 0x02
    41ee:	25 81       	ldd	r18, Z+5	; 0x05
    41f0:	98 1b       	sub	r25, r24
    41f2:	92 23       	and	r25, r18
    41f4:	84 81       	ldd	r24, Z+4	; 0x04
    41f6:	98 17       	cp	r25, r24
    41f8:	b1 f0       	breq	.+44     	; 0x4226 <serial_sendByte+0x4e>
    41fa:	83 81       	ldd	r24, Z+3	; 0x03
    41fc:	26 95       	lsr	r18
    41fe:	28 23       	and	r18, r24
    4200:	c0 81       	ld	r28, Z
    4202:	d1 81       	ldd	r29, Z+1	; 0x01
    4204:	c2 0f       	add	r28, r18
    4206:	d1 1d       	adc	r29, r1
    4208:	68 83       	st	Y, r22
    420a:	8f 5f       	subi	r24, 0xFF	; 255
    420c:	95 81       	ldd	r25, Z+5	; 0x05
    420e:	89 23       	and	r24, r25
    4210:	83 83       	std	Z+3, r24	; 0x03
    4212:	ed 91       	ld	r30, X+
    4214:	fc 91       	ld	r31, X
    4216:	35 97       	sbiw	r30, 0x05	; 5
    4218:	80 81       	ld	r24, Z
    421a:	80 62       	ori	r24, 0x20	; 32
    421c:	80 83       	st	Z, r24
    421e:	80 e0       	ldi	r24, 0x00	; 0
    4220:	03 c0       	rjmp	.+6      	; 0x4228 <serial_sendByte+0x50>
    4222:	81 e0       	ldi	r24, 0x01	; 1
    4224:	01 c0       	rjmp	.+2      	; 0x4228 <serial_sendByte+0x50>
    4226:	82 e0       	ldi	r24, 0x02	; 2
    4228:	df 91       	pop	r29
    422a:	cf 91       	pop	r28
    422c:	08 95       	ret

0000422e <serial_sendBytes>:
    422e:	ef 92       	push	r14
    4230:	ff 92       	push	r15
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	7c 01       	movw	r14, r24
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	09 f4       	brne	.+2      	; 0x4242 <serial_sendBytes+0x14>
    4240:	41 c0       	rjmp	.+130    	; 0x42c4 <serial_sendBytes+0x96>
    4242:	dc 01       	movw	r26, r24
    4244:	12 96       	adiw	r26, 0x02	; 2
    4246:	ed 91       	ld	r30, X+
    4248:	fc 91       	ld	r31, X
    424a:	13 97       	sbiw	r26, 0x03	; 3
    424c:	93 81       	ldd	r25, Z+3	; 0x03
    424e:	82 81       	ldd	r24, Z+2	; 0x02
    4250:	98 1b       	sub	r25, r24
    4252:	85 81       	ldd	r24, Z+5	; 0x05
    4254:	98 23       	and	r25, r24
    4256:	84 81       	ldd	r24, Z+4	; 0x04
    4258:	89 1b       	sub	r24, r25
    425a:	86 17       	cp	r24, r22
    425c:	a8 f1       	brcs	.+106    	; 0x42c8 <serial_sendBytes+0x9a>
    425e:	66 23       	and	r22, r22
    4260:	41 f1       	breq	.+80     	; 0x42b2 <serial_sendBytes+0x84>
    4262:	84 2f       	mov	r24, r20
    4264:	95 2f       	mov	r25, r21
    4266:	dc 01       	movw	r26, r24
    4268:	61 50       	subi	r22, 0x01	; 1
    426a:	46 2f       	mov	r20, r22
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	4f 5f       	subi	r20, 0xFF	; 255
    4270:	5f 4f       	sbci	r21, 0xFF	; 255
    4272:	48 0f       	add	r20, r24
    4274:	59 1f       	adc	r21, r25
    4276:	e7 01       	movw	r28, r14
    4278:	ea 81       	ldd	r30, Y+2	; 0x02
    427a:	fb 81       	ldd	r31, Y+3	; 0x03
    427c:	93 81       	ldd	r25, Z+3	; 0x03
    427e:	82 81       	ldd	r24, Z+2	; 0x02
    4280:	25 81       	ldd	r18, Z+5	; 0x05
    4282:	98 1b       	sub	r25, r24
    4284:	92 23       	and	r25, r18
    4286:	84 81       	ldd	r24, Z+4	; 0x04
    4288:	98 17       	cp	r25, r24
    428a:	79 f0       	breq	.+30     	; 0x42aa <serial_sendBytes+0x7c>
    428c:	8c 91       	ld	r24, X
    428e:	93 81       	ldd	r25, Z+3	; 0x03
    4290:	26 95       	lsr	r18
    4292:	29 23       	and	r18, r25
    4294:	60 81       	ld	r22, Z
    4296:	71 81       	ldd	r23, Z+1	; 0x01
    4298:	8b 01       	movw	r16, r22
    429a:	02 0f       	add	r16, r18
    429c:	11 1d       	adc	r17, r1
    429e:	e8 01       	movw	r28, r16
    42a0:	88 83       	st	Y, r24
    42a2:	9f 5f       	subi	r25, 0xFF	; 255
    42a4:	85 81       	ldd	r24, Z+5	; 0x05
    42a6:	98 23       	and	r25, r24
    42a8:	93 83       	std	Z+3, r25	; 0x03
    42aa:	11 96       	adiw	r26, 0x01	; 1
    42ac:	a4 17       	cp	r26, r20
    42ae:	b5 07       	cpc	r27, r21
    42b0:	11 f7       	brne	.-60     	; 0x4276 <serial_sendBytes+0x48>
    42b2:	d7 01       	movw	r26, r14
    42b4:	ed 91       	ld	r30, X+
    42b6:	fc 91       	ld	r31, X
    42b8:	35 97       	sbiw	r30, 0x05	; 5
    42ba:	80 81       	ld	r24, Z
    42bc:	80 62       	ori	r24, 0x20	; 32
    42be:	80 83       	st	Z, r24
    42c0:	80 e0       	ldi	r24, 0x00	; 0
    42c2:	03 c0       	rjmp	.+6      	; 0x42ca <serial_sendBytes+0x9c>
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	01 c0       	rjmp	.+2      	; 0x42ca <serial_sendBytes+0x9c>
    42c8:	82 e0       	ldi	r24, 0x02	; 2
    42ca:	df 91       	pop	r29
    42cc:	cf 91       	pop	r28
    42ce:	1f 91       	pop	r17
    42d0:	0f 91       	pop	r16
    42d2:	ff 90       	pop	r15
    42d4:	ef 90       	pop	r14
    42d6:	08 95       	ret

000042d8 <serial_getByte>:
    42d8:	00 97       	sbiw	r24, 0x00	; 0
    42da:	d1 f0       	breq	.+52     	; 0x4310 <serial_getByte+0x38>
    42dc:	dc 01       	movw	r26, r24
    42de:	14 96       	adiw	r26, 0x04	; 4
    42e0:	ed 91       	ld	r30, X+
    42e2:	fc 91       	ld	r31, X
    42e4:	15 97       	sbiw	r26, 0x05	; 5
    42e6:	93 81       	ldd	r25, Z+3	; 0x03
    42e8:	82 81       	ldd	r24, Z+2	; 0x02
    42ea:	98 17       	cp	r25, r24
    42ec:	99 f0       	breq	.+38     	; 0x4314 <serial_getByte+0x3c>
    42ee:	92 81       	ldd	r25, Z+2	; 0x02
    42f0:	85 81       	ldd	r24, Z+5	; 0x05
    42f2:	86 95       	lsr	r24
    42f4:	89 23       	and	r24, r25
    42f6:	a0 81       	ld	r26, Z
    42f8:	b1 81       	ldd	r27, Z+1	; 0x01
    42fa:	a8 0f       	add	r26, r24
    42fc:	b1 1d       	adc	r27, r1
    42fe:	8c 91       	ld	r24, X
    4300:	db 01       	movw	r26, r22
    4302:	8c 93       	st	X, r24
    4304:	9f 5f       	subi	r25, 0xFF	; 255
    4306:	85 81       	ldd	r24, Z+5	; 0x05
    4308:	98 23       	and	r25, r24
    430a:	92 83       	std	Z+2, r25	; 0x02
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	08 95       	ret
    4310:	81 e0       	ldi	r24, 0x01	; 1
    4312:	08 95       	ret
    4314:	83 e0       	ldi	r24, 0x03	; 3
    4316:	08 95       	ret

00004318 <__vector_25>:
    4318:	1f 92       	push	r1
    431a:	0f 92       	push	r0
    431c:	0f b6       	in	r0, 0x3f	; 63
    431e:	0f 92       	push	r0
    4320:	11 24       	eor	r1, r1
    4322:	0b b6       	in	r0, 0x3b	; 59
    4324:	0f 92       	push	r0
    4326:	2f 93       	push	r18
    4328:	3f 93       	push	r19
    432a:	4f 93       	push	r20
    432c:	5f 93       	push	r21
    432e:	6f 93       	push	r22
    4330:	7f 93       	push	r23
    4332:	8f 93       	push	r24
    4334:	9f 93       	push	r25
    4336:	af 93       	push	r26
    4338:	bf 93       	push	r27
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	ef 93       	push	r30
    4340:	ff 93       	push	r31
    4342:	a0 91 7d 16 	lds	r26, 0x167D	; 0x80167d <_ser_handle>
    4346:	b0 91 7e 16 	lds	r27, 0x167E	; 0x80167e <_ser_handle+0x1>
    434a:	10 97       	sbiw	r26, 0x00	; 0
    434c:	11 f1       	breq	.+68     	; 0x4392 <__vector_25+0x7a>
    434e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4352:	14 96       	adiw	r26, 0x04	; 4
    4354:	ed 91       	ld	r30, X+
    4356:	fc 91       	ld	r31, X
    4358:	15 97       	sbiw	r26, 0x05	; 5
    435a:	93 81       	ldd	r25, Z+3	; 0x03
    435c:	82 81       	ldd	r24, Z+2	; 0x02
    435e:	25 81       	ldd	r18, Z+5	; 0x05
    4360:	98 1b       	sub	r25, r24
    4362:	92 23       	and	r25, r18
    4364:	84 81       	ldd	r24, Z+4	; 0x04
    4366:	98 17       	cp	r25, r24
    4368:	61 f0       	breq	.+24     	; 0x4382 <__vector_25+0x6a>
    436a:	83 81       	ldd	r24, Z+3	; 0x03
    436c:	26 95       	lsr	r18
    436e:	28 23       	and	r18, r24
    4370:	c0 81       	ld	r28, Z
    4372:	d1 81       	ldd	r29, Z+1	; 0x01
    4374:	c2 0f       	add	r28, r18
    4376:	d1 1d       	adc	r29, r1
    4378:	68 83       	st	Y, r22
    437a:	8f 5f       	subi	r24, 0xFF	; 255
    437c:	95 81       	ldd	r25, Z+5	; 0x05
    437e:	89 23       	and	r24, r25
    4380:	83 83       	std	Z+3, r24	; 0x03
    4382:	16 96       	adiw	r26, 0x06	; 6
    4384:	ed 91       	ld	r30, X+
    4386:	fc 91       	ld	r31, X
    4388:	17 97       	sbiw	r26, 0x07	; 7
    438a:	30 97       	sbiw	r30, 0x00	; 0
    438c:	11 f0       	breq	.+4      	; 0x4392 <__vector_25+0x7a>
    438e:	cd 01       	movw	r24, r26
    4390:	19 95       	eicall
    4392:	ff 91       	pop	r31
    4394:	ef 91       	pop	r30
    4396:	df 91       	pop	r29
    4398:	cf 91       	pop	r28
    439a:	bf 91       	pop	r27
    439c:	af 91       	pop	r26
    439e:	9f 91       	pop	r25
    43a0:	8f 91       	pop	r24
    43a2:	7f 91       	pop	r23
    43a4:	6f 91       	pop	r22
    43a6:	5f 91       	pop	r21
    43a8:	4f 91       	pop	r20
    43aa:	3f 91       	pop	r19
    43ac:	2f 91       	pop	r18
    43ae:	0f 90       	pop	r0
    43b0:	0b be       	out	0x3b, r0	; 59
    43b2:	0f 90       	pop	r0
    43b4:	0f be       	out	0x3f, r0	; 63
    43b6:	0f 90       	pop	r0
    43b8:	1f 90       	pop	r1
    43ba:	18 95       	reti

000043bc <__vector_26>:
    43bc:	1f 92       	push	r1
    43be:	0f 92       	push	r0
    43c0:	0f b6       	in	r0, 0x3f	; 63
    43c2:	0f 92       	push	r0
    43c4:	11 24       	eor	r1, r1
    43c6:	0b b6       	in	r0, 0x3b	; 59
    43c8:	0f 92       	push	r0
    43ca:	2f 93       	push	r18
    43cc:	8f 93       	push	r24
    43ce:	9f 93       	push	r25
    43d0:	af 93       	push	r26
    43d2:	bf 93       	push	r27
    43d4:	ef 93       	push	r30
    43d6:	ff 93       	push	r31
    43d8:	e0 91 7d 16 	lds	r30, 0x167D	; 0x80167d <_ser_handle>
    43dc:	f0 91 7e 16 	lds	r31, 0x167E	; 0x80167e <_ser_handle+0x1>
    43e0:	30 97       	sbiw	r30, 0x00	; 0
    43e2:	b9 f0       	breq	.+46     	; 0x4412 <__vector_26+0x56>
    43e4:	02 80       	ldd	r0, Z+2	; 0x02
    43e6:	f3 81       	ldd	r31, Z+3	; 0x03
    43e8:	e0 2d       	mov	r30, r0
    43ea:	93 81       	ldd	r25, Z+3	; 0x03
    43ec:	82 81       	ldd	r24, Z+2	; 0x02
    43ee:	98 17       	cp	r25, r24
    43f0:	b1 f0       	breq	.+44     	; 0x441e <__vector_26+0x62>
    43f2:	92 81       	ldd	r25, Z+2	; 0x02
    43f4:	85 81       	ldd	r24, Z+5	; 0x05
    43f6:	28 2f       	mov	r18, r24
    43f8:	26 95       	lsr	r18
    43fa:	29 23       	and	r18, r25
    43fc:	a0 81       	ld	r26, Z
    43fe:	b1 81       	ldd	r27, Z+1	; 0x01
    4400:	a2 0f       	add	r26, r18
    4402:	b1 1d       	adc	r27, r1
    4404:	2c 91       	ld	r18, X
    4406:	9f 5f       	subi	r25, 0xFF	; 255
    4408:	89 23       	and	r24, r25
    440a:	82 83       	std	Z+2, r24	; 0x02
    440c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    4410:	0b c0       	rjmp	.+22     	; 0x4428 <__vector_26+0x6c>
    4412:	e1 ec       	ldi	r30, 0xC1	; 193
    4414:	f0 e0       	ldi	r31, 0x00	; 0
    4416:	80 81       	ld	r24, Z
    4418:	8f 7d       	andi	r24, 0xDF	; 223
    441a:	80 83       	st	Z, r24
    441c:	05 c0       	rjmp	.+10     	; 0x4428 <__vector_26+0x6c>
    441e:	e1 ec       	ldi	r30, 0xC1	; 193
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	80 81       	ld	r24, Z
    4424:	8f 7d       	andi	r24, 0xDF	; 223
    4426:	80 83       	st	Z, r24
    4428:	ff 91       	pop	r31
    442a:	ef 91       	pop	r30
    442c:	bf 91       	pop	r27
    442e:	af 91       	pop	r26
    4430:	9f 91       	pop	r25
    4432:	8f 91       	pop	r24
    4434:	2f 91       	pop	r18
    4436:	0f 90       	pop	r0
    4438:	0b be       	out	0x3b, r0	; 59
    443a:	0f 90       	pop	r0
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	0f 90       	pop	r0
    4440:	1f 90       	pop	r1
    4442:	18 95       	reti

00004444 <__vector_36>:
    4444:	1f 92       	push	r1
    4446:	0f 92       	push	r0
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	0f 92       	push	r0
    444c:	11 24       	eor	r1, r1
    444e:	0b b6       	in	r0, 0x3b	; 59
    4450:	0f 92       	push	r0
    4452:	2f 93       	push	r18
    4454:	3f 93       	push	r19
    4456:	4f 93       	push	r20
    4458:	5f 93       	push	r21
    445a:	6f 93       	push	r22
    445c:	7f 93       	push	r23
    445e:	8f 93       	push	r24
    4460:	9f 93       	push	r25
    4462:	af 93       	push	r26
    4464:	bf 93       	push	r27
    4466:	cf 93       	push	r28
    4468:	df 93       	push	r29
    446a:	ef 93       	push	r30
    446c:	ff 93       	push	r31
    446e:	a0 91 7f 16 	lds	r26, 0x167F	; 0x80167f <_ser_handle+0x2>
    4472:	b0 91 80 16 	lds	r27, 0x1680	; 0x801680 <_ser_handle+0x3>
    4476:	10 97       	sbiw	r26, 0x00	; 0
    4478:	11 f1       	breq	.+68     	; 0x44be <__vector_36+0x7a>
    447a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    447e:	14 96       	adiw	r26, 0x04	; 4
    4480:	ed 91       	ld	r30, X+
    4482:	fc 91       	ld	r31, X
    4484:	15 97       	sbiw	r26, 0x05	; 5
    4486:	93 81       	ldd	r25, Z+3	; 0x03
    4488:	82 81       	ldd	r24, Z+2	; 0x02
    448a:	25 81       	ldd	r18, Z+5	; 0x05
    448c:	98 1b       	sub	r25, r24
    448e:	92 23       	and	r25, r18
    4490:	84 81       	ldd	r24, Z+4	; 0x04
    4492:	98 17       	cp	r25, r24
    4494:	61 f0       	breq	.+24     	; 0x44ae <__vector_36+0x6a>
    4496:	83 81       	ldd	r24, Z+3	; 0x03
    4498:	26 95       	lsr	r18
    449a:	28 23       	and	r18, r24
    449c:	c0 81       	ld	r28, Z
    449e:	d1 81       	ldd	r29, Z+1	; 0x01
    44a0:	c2 0f       	add	r28, r18
    44a2:	d1 1d       	adc	r29, r1
    44a4:	68 83       	st	Y, r22
    44a6:	8f 5f       	subi	r24, 0xFF	; 255
    44a8:	95 81       	ldd	r25, Z+5	; 0x05
    44aa:	89 23       	and	r24, r25
    44ac:	83 83       	std	Z+3, r24	; 0x03
    44ae:	16 96       	adiw	r26, 0x06	; 6
    44b0:	ed 91       	ld	r30, X+
    44b2:	fc 91       	ld	r31, X
    44b4:	17 97       	sbiw	r26, 0x07	; 7
    44b6:	30 97       	sbiw	r30, 0x00	; 0
    44b8:	11 f0       	breq	.+4      	; 0x44be <__vector_36+0x7a>
    44ba:	cd 01       	movw	r24, r26
    44bc:	19 95       	eicall
    44be:	ff 91       	pop	r31
    44c0:	ef 91       	pop	r30
    44c2:	df 91       	pop	r29
    44c4:	cf 91       	pop	r28
    44c6:	bf 91       	pop	r27
    44c8:	af 91       	pop	r26
    44ca:	9f 91       	pop	r25
    44cc:	8f 91       	pop	r24
    44ce:	7f 91       	pop	r23
    44d0:	6f 91       	pop	r22
    44d2:	5f 91       	pop	r21
    44d4:	4f 91       	pop	r20
    44d6:	3f 91       	pop	r19
    44d8:	2f 91       	pop	r18
    44da:	0f 90       	pop	r0
    44dc:	0b be       	out	0x3b, r0	; 59
    44de:	0f 90       	pop	r0
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	0f 90       	pop	r0
    44e4:	1f 90       	pop	r1
    44e6:	18 95       	reti

000044e8 <__vector_37>:
    44e8:	1f 92       	push	r1
    44ea:	0f 92       	push	r0
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	0f 92       	push	r0
    44f0:	11 24       	eor	r1, r1
    44f2:	0b b6       	in	r0, 0x3b	; 59
    44f4:	0f 92       	push	r0
    44f6:	2f 93       	push	r18
    44f8:	8f 93       	push	r24
    44fa:	9f 93       	push	r25
    44fc:	af 93       	push	r26
    44fe:	bf 93       	push	r27
    4500:	ef 93       	push	r30
    4502:	ff 93       	push	r31
    4504:	e0 91 7f 16 	lds	r30, 0x167F	; 0x80167f <_ser_handle+0x2>
    4508:	f0 91 80 16 	lds	r31, 0x1680	; 0x801680 <_ser_handle+0x3>
    450c:	30 97       	sbiw	r30, 0x00	; 0
    450e:	b9 f0       	breq	.+46     	; 0x453e <__vector_37+0x56>
    4510:	02 80       	ldd	r0, Z+2	; 0x02
    4512:	f3 81       	ldd	r31, Z+3	; 0x03
    4514:	e0 2d       	mov	r30, r0
    4516:	93 81       	ldd	r25, Z+3	; 0x03
    4518:	82 81       	ldd	r24, Z+2	; 0x02
    451a:	98 17       	cp	r25, r24
    451c:	b1 f0       	breq	.+44     	; 0x454a <__vector_37+0x62>
    451e:	92 81       	ldd	r25, Z+2	; 0x02
    4520:	85 81       	ldd	r24, Z+5	; 0x05
    4522:	28 2f       	mov	r18, r24
    4524:	26 95       	lsr	r18
    4526:	29 23       	and	r18, r25
    4528:	a0 81       	ld	r26, Z
    452a:	b1 81       	ldd	r27, Z+1	; 0x01
    452c:	a2 0f       	add	r26, r18
    452e:	b1 1d       	adc	r27, r1
    4530:	2c 91       	ld	r18, X
    4532:	9f 5f       	subi	r25, 0xFF	; 255
    4534:	89 23       	and	r24, r25
    4536:	82 83       	std	Z+2, r24	; 0x02
    4538:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    453c:	0b c0       	rjmp	.+22     	; 0x4554 <__vector_37+0x6c>
    453e:	e9 ec       	ldi	r30, 0xC9	; 201
    4540:	f0 e0       	ldi	r31, 0x00	; 0
    4542:	80 81       	ld	r24, Z
    4544:	8f 7d       	andi	r24, 0xDF	; 223
    4546:	80 83       	st	Z, r24
    4548:	05 c0       	rjmp	.+10     	; 0x4554 <__vector_37+0x6c>
    454a:	e9 ec       	ldi	r30, 0xC9	; 201
    454c:	f0 e0       	ldi	r31, 0x00	; 0
    454e:	80 81       	ld	r24, Z
    4550:	8f 7d       	andi	r24, 0xDF	; 223
    4552:	80 83       	st	Z, r24
    4554:	ff 91       	pop	r31
    4556:	ef 91       	pop	r30
    4558:	bf 91       	pop	r27
    455a:	af 91       	pop	r26
    455c:	9f 91       	pop	r25
    455e:	8f 91       	pop	r24
    4560:	2f 91       	pop	r18
    4562:	0f 90       	pop	r0
    4564:	0b be       	out	0x3b, r0	; 59
    4566:	0f 90       	pop	r0
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	0f 90       	pop	r0
    456c:	1f 90       	pop	r1
    456e:	18 95       	reti

00004570 <__vector_51>:
    4570:	1f 92       	push	r1
    4572:	0f 92       	push	r0
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	0f 92       	push	r0
    4578:	11 24       	eor	r1, r1
    457a:	0b b6       	in	r0, 0x3b	; 59
    457c:	0f 92       	push	r0
    457e:	2f 93       	push	r18
    4580:	3f 93       	push	r19
    4582:	4f 93       	push	r20
    4584:	5f 93       	push	r21
    4586:	6f 93       	push	r22
    4588:	7f 93       	push	r23
    458a:	8f 93       	push	r24
    458c:	9f 93       	push	r25
    458e:	af 93       	push	r26
    4590:	bf 93       	push	r27
    4592:	cf 93       	push	r28
    4594:	df 93       	push	r29
    4596:	ef 93       	push	r30
    4598:	ff 93       	push	r31
    459a:	a0 91 81 16 	lds	r26, 0x1681	; 0x801681 <_ser_handle+0x4>
    459e:	b0 91 82 16 	lds	r27, 0x1682	; 0x801682 <_ser_handle+0x5>
    45a2:	10 97       	sbiw	r26, 0x00	; 0
    45a4:	11 f1       	breq	.+68     	; 0x45ea <__vector_51+0x7a>
    45a6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    45aa:	14 96       	adiw	r26, 0x04	; 4
    45ac:	ed 91       	ld	r30, X+
    45ae:	fc 91       	ld	r31, X
    45b0:	15 97       	sbiw	r26, 0x05	; 5
    45b2:	93 81       	ldd	r25, Z+3	; 0x03
    45b4:	82 81       	ldd	r24, Z+2	; 0x02
    45b6:	25 81       	ldd	r18, Z+5	; 0x05
    45b8:	98 1b       	sub	r25, r24
    45ba:	92 23       	and	r25, r18
    45bc:	84 81       	ldd	r24, Z+4	; 0x04
    45be:	98 17       	cp	r25, r24
    45c0:	61 f0       	breq	.+24     	; 0x45da <__vector_51+0x6a>
    45c2:	83 81       	ldd	r24, Z+3	; 0x03
    45c4:	26 95       	lsr	r18
    45c6:	28 23       	and	r18, r24
    45c8:	c0 81       	ld	r28, Z
    45ca:	d1 81       	ldd	r29, Z+1	; 0x01
    45cc:	c2 0f       	add	r28, r18
    45ce:	d1 1d       	adc	r29, r1
    45d0:	68 83       	st	Y, r22
    45d2:	8f 5f       	subi	r24, 0xFF	; 255
    45d4:	95 81       	ldd	r25, Z+5	; 0x05
    45d6:	89 23       	and	r24, r25
    45d8:	83 83       	std	Z+3, r24	; 0x03
    45da:	16 96       	adiw	r26, 0x06	; 6
    45dc:	ed 91       	ld	r30, X+
    45de:	fc 91       	ld	r31, X
    45e0:	17 97       	sbiw	r26, 0x07	; 7
    45e2:	30 97       	sbiw	r30, 0x00	; 0
    45e4:	11 f0       	breq	.+4      	; 0x45ea <__vector_51+0x7a>
    45e6:	cd 01       	movw	r24, r26
    45e8:	19 95       	eicall
    45ea:	ff 91       	pop	r31
    45ec:	ef 91       	pop	r30
    45ee:	df 91       	pop	r29
    45f0:	cf 91       	pop	r28
    45f2:	bf 91       	pop	r27
    45f4:	af 91       	pop	r26
    45f6:	9f 91       	pop	r25
    45f8:	8f 91       	pop	r24
    45fa:	7f 91       	pop	r23
    45fc:	6f 91       	pop	r22
    45fe:	5f 91       	pop	r21
    4600:	4f 91       	pop	r20
    4602:	3f 91       	pop	r19
    4604:	2f 91       	pop	r18
    4606:	0f 90       	pop	r0
    4608:	0b be       	out	0x3b, r0	; 59
    460a:	0f 90       	pop	r0
    460c:	0f be       	out	0x3f, r0	; 63
    460e:	0f 90       	pop	r0
    4610:	1f 90       	pop	r1
    4612:	18 95       	reti

00004614 <__vector_52>:
    4614:	1f 92       	push	r1
    4616:	0f 92       	push	r0
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	0f 92       	push	r0
    461c:	11 24       	eor	r1, r1
    461e:	0b b6       	in	r0, 0x3b	; 59
    4620:	0f 92       	push	r0
    4622:	2f 93       	push	r18
    4624:	8f 93       	push	r24
    4626:	9f 93       	push	r25
    4628:	af 93       	push	r26
    462a:	bf 93       	push	r27
    462c:	ef 93       	push	r30
    462e:	ff 93       	push	r31
    4630:	e0 91 81 16 	lds	r30, 0x1681	; 0x801681 <_ser_handle+0x4>
    4634:	f0 91 82 16 	lds	r31, 0x1682	; 0x801682 <_ser_handle+0x5>
    4638:	30 97       	sbiw	r30, 0x00	; 0
    463a:	b9 f0       	breq	.+46     	; 0x466a <__vector_52+0x56>
    463c:	02 80       	ldd	r0, Z+2	; 0x02
    463e:	f3 81       	ldd	r31, Z+3	; 0x03
    4640:	e0 2d       	mov	r30, r0
    4642:	93 81       	ldd	r25, Z+3	; 0x03
    4644:	82 81       	ldd	r24, Z+2	; 0x02
    4646:	98 17       	cp	r25, r24
    4648:	b1 f0       	breq	.+44     	; 0x4676 <__vector_52+0x62>
    464a:	92 81       	ldd	r25, Z+2	; 0x02
    464c:	85 81       	ldd	r24, Z+5	; 0x05
    464e:	28 2f       	mov	r18, r24
    4650:	26 95       	lsr	r18
    4652:	29 23       	and	r18, r25
    4654:	a0 81       	ld	r26, Z
    4656:	b1 81       	ldd	r27, Z+1	; 0x01
    4658:	a2 0f       	add	r26, r18
    465a:	b1 1d       	adc	r27, r1
    465c:	2c 91       	ld	r18, X
    465e:	9f 5f       	subi	r25, 0xFF	; 255
    4660:	89 23       	and	r24, r25
    4662:	82 83       	std	Z+2, r24	; 0x02
    4664:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4668:	0b c0       	rjmp	.+22     	; 0x4680 <__vector_52+0x6c>
    466a:	e1 ed       	ldi	r30, 0xD1	; 209
    466c:	f0 e0       	ldi	r31, 0x00	; 0
    466e:	80 81       	ld	r24, Z
    4670:	8f 7d       	andi	r24, 0xDF	; 223
    4672:	80 83       	st	Z, r24
    4674:	05 c0       	rjmp	.+10     	; 0x4680 <__vector_52+0x6c>
    4676:	e1 ed       	ldi	r30, 0xD1	; 209
    4678:	f0 e0       	ldi	r31, 0x00	; 0
    467a:	80 81       	ld	r24, Z
    467c:	8f 7d       	andi	r24, 0xDF	; 223
    467e:	80 83       	st	Z, r24
    4680:	ff 91       	pop	r31
    4682:	ef 91       	pop	r30
    4684:	bf 91       	pop	r27
    4686:	af 91       	pop	r26
    4688:	9f 91       	pop	r25
    468a:	8f 91       	pop	r24
    468c:	2f 91       	pop	r18
    468e:	0f 90       	pop	r0
    4690:	0b be       	out	0x3b, r0	; 59
    4692:	0f 90       	pop	r0
    4694:	0f be       	out	0x3f, r0	; 63
    4696:	0f 90       	pop	r0
    4698:	1f 90       	pop	r1
    469a:	18 95       	reti

0000469c <__vector_54>:
    469c:	1f 92       	push	r1
    469e:	0f 92       	push	r0
    46a0:	0f b6       	in	r0, 0x3f	; 63
    46a2:	0f 92       	push	r0
    46a4:	11 24       	eor	r1, r1
    46a6:	0b b6       	in	r0, 0x3b	; 59
    46a8:	0f 92       	push	r0
    46aa:	2f 93       	push	r18
    46ac:	3f 93       	push	r19
    46ae:	4f 93       	push	r20
    46b0:	5f 93       	push	r21
    46b2:	6f 93       	push	r22
    46b4:	7f 93       	push	r23
    46b6:	8f 93       	push	r24
    46b8:	9f 93       	push	r25
    46ba:	af 93       	push	r26
    46bc:	bf 93       	push	r27
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	ef 93       	push	r30
    46c4:	ff 93       	push	r31
    46c6:	a0 91 83 16 	lds	r26, 0x1683	; 0x801683 <_ser_handle+0x6>
    46ca:	b0 91 84 16 	lds	r27, 0x1684	; 0x801684 <_ser_handle+0x7>
    46ce:	10 97       	sbiw	r26, 0x00	; 0
    46d0:	11 f1       	breq	.+68     	; 0x4716 <__vector_54+0x7a>
    46d2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    46d6:	14 96       	adiw	r26, 0x04	; 4
    46d8:	ed 91       	ld	r30, X+
    46da:	fc 91       	ld	r31, X
    46dc:	15 97       	sbiw	r26, 0x05	; 5
    46de:	93 81       	ldd	r25, Z+3	; 0x03
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	25 81       	ldd	r18, Z+5	; 0x05
    46e4:	98 1b       	sub	r25, r24
    46e6:	92 23       	and	r25, r18
    46e8:	84 81       	ldd	r24, Z+4	; 0x04
    46ea:	98 17       	cp	r25, r24
    46ec:	61 f0       	breq	.+24     	; 0x4706 <__vector_54+0x6a>
    46ee:	83 81       	ldd	r24, Z+3	; 0x03
    46f0:	26 95       	lsr	r18
    46f2:	28 23       	and	r18, r24
    46f4:	c0 81       	ld	r28, Z
    46f6:	d1 81       	ldd	r29, Z+1	; 0x01
    46f8:	c2 0f       	add	r28, r18
    46fa:	d1 1d       	adc	r29, r1
    46fc:	68 83       	st	Y, r22
    46fe:	8f 5f       	subi	r24, 0xFF	; 255
    4700:	95 81       	ldd	r25, Z+5	; 0x05
    4702:	89 23       	and	r24, r25
    4704:	83 83       	std	Z+3, r24	; 0x03
    4706:	16 96       	adiw	r26, 0x06	; 6
    4708:	ed 91       	ld	r30, X+
    470a:	fc 91       	ld	r31, X
    470c:	17 97       	sbiw	r26, 0x07	; 7
    470e:	30 97       	sbiw	r30, 0x00	; 0
    4710:	11 f0       	breq	.+4      	; 0x4716 <__vector_54+0x7a>
    4712:	cd 01       	movw	r24, r26
    4714:	19 95       	eicall
    4716:	ff 91       	pop	r31
    4718:	ef 91       	pop	r30
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	bf 91       	pop	r27
    4720:	af 91       	pop	r26
    4722:	9f 91       	pop	r25
    4724:	8f 91       	pop	r24
    4726:	7f 91       	pop	r23
    4728:	6f 91       	pop	r22
    472a:	5f 91       	pop	r21
    472c:	4f 91       	pop	r20
    472e:	3f 91       	pop	r19
    4730:	2f 91       	pop	r18
    4732:	0f 90       	pop	r0
    4734:	0b be       	out	0x3b, r0	; 59
    4736:	0f 90       	pop	r0
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	0f 90       	pop	r0
    473c:	1f 90       	pop	r1
    473e:	18 95       	reti

00004740 <__vector_55>:
    4740:	1f 92       	push	r1
    4742:	0f 92       	push	r0
    4744:	0f b6       	in	r0, 0x3f	; 63
    4746:	0f 92       	push	r0
    4748:	11 24       	eor	r1, r1
    474a:	0b b6       	in	r0, 0x3b	; 59
    474c:	0f 92       	push	r0
    474e:	2f 93       	push	r18
    4750:	8f 93       	push	r24
    4752:	9f 93       	push	r25
    4754:	af 93       	push	r26
    4756:	bf 93       	push	r27
    4758:	ef 93       	push	r30
    475a:	ff 93       	push	r31
    475c:	e0 91 83 16 	lds	r30, 0x1683	; 0x801683 <_ser_handle+0x6>
    4760:	f0 91 84 16 	lds	r31, 0x1684	; 0x801684 <_ser_handle+0x7>
    4764:	30 97       	sbiw	r30, 0x00	; 0
    4766:	b9 f0       	breq	.+46     	; 0x4796 <__vector_55+0x56>
    4768:	02 80       	ldd	r0, Z+2	; 0x02
    476a:	f3 81       	ldd	r31, Z+3	; 0x03
    476c:	e0 2d       	mov	r30, r0
    476e:	93 81       	ldd	r25, Z+3	; 0x03
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	98 17       	cp	r25, r24
    4774:	b1 f0       	breq	.+44     	; 0x47a2 <__vector_55+0x62>
    4776:	92 81       	ldd	r25, Z+2	; 0x02
    4778:	85 81       	ldd	r24, Z+5	; 0x05
    477a:	28 2f       	mov	r18, r24
    477c:	26 95       	lsr	r18
    477e:	29 23       	and	r18, r25
    4780:	a0 81       	ld	r26, Z
    4782:	b1 81       	ldd	r27, Z+1	; 0x01
    4784:	a2 0f       	add	r26, r18
    4786:	b1 1d       	adc	r27, r1
    4788:	2c 91       	ld	r18, X
    478a:	9f 5f       	subi	r25, 0xFF	; 255
    478c:	89 23       	and	r24, r25
    478e:	82 83       	std	Z+2, r24	; 0x02
    4790:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4794:	0b c0       	rjmp	.+22     	; 0x47ac <__vector_55+0x6c>
    4796:	e1 e3       	ldi	r30, 0x31	; 49
    4798:	f1 e0       	ldi	r31, 0x01	; 1
    479a:	80 81       	ld	r24, Z
    479c:	8f 7d       	andi	r24, 0xDF	; 223
    479e:	80 83       	st	Z, r24
    47a0:	05 c0       	rjmp	.+10     	; 0x47ac <__vector_55+0x6c>
    47a2:	e1 e3       	ldi	r30, 0x31	; 49
    47a4:	f1 e0       	ldi	r31, 0x01	; 1
    47a6:	80 81       	ld	r24, Z
    47a8:	8f 7d       	andi	r24, 0xDF	; 223
    47aa:	80 83       	st	Z, r24
    47ac:	ff 91       	pop	r31
    47ae:	ef 91       	pop	r30
    47b0:	bf 91       	pop	r27
    47b2:	af 91       	pop	r26
    47b4:	9f 91       	pop	r25
    47b6:	8f 91       	pop	r24
    47b8:	2f 91       	pop	r18
    47ba:	0f 90       	pop	r0
    47bc:	0b be       	out	0x3b, r0	; 59
    47be:	0f 90       	pop	r0
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <usart_getchar>:
    47c8:	cf 93       	push	r28
    47ca:	df 93       	push	r29
    47cc:	1f 92       	push	r1
    47ce:	cd b7       	in	r28, 0x3d	; 61
    47d0:	de b7       	in	r29, 0x3e	; 62
    47d2:	be 01       	movw	r22, r28
    47d4:	6f 5f       	subi	r22, 0xFF	; 255
    47d6:	7f 4f       	sbci	r23, 0xFF	; 255
    47d8:	80 91 85 16 	lds	r24, 0x1685	; 0x801685 <_com_serial_instance>
    47dc:	90 91 86 16 	lds	r25, 0x1686	; 0x801686 <_com_serial_instance+0x1>
    47e0:	7b dd       	rcall	.-1290   	; 0x42d8 <serial_getByte>
    47e2:	81 11       	cpse	r24, r1
    47e4:	f6 cf       	rjmp	.-20     	; 0x47d2 <usart_getchar+0xa>
    47e6:	89 81       	ldd	r24, Y+1	; 0x01
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	0f 90       	pop	r0
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	08 95       	ret

000047f2 <usart_putchar>:
    47f2:	68 2f       	mov	r22, r24
    47f4:	80 91 85 16 	lds	r24, 0x1685	; 0x801685 <_com_serial_instance>
    47f8:	90 91 86 16 	lds	r25, 0x1686	; 0x801686 <_com_serial_instance+0x1>
    47fc:	ed dc       	rcall	.-1574   	; 0x41d8 <serial_sendByte>
    47fe:	80 e0       	ldi	r24, 0x00	; 0
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	08 95       	ret

00004804 <stdio_initialise>:
    4804:	8f 92       	push	r8
    4806:	9f 92       	push	r9
    4808:	af 92       	push	r10
    480a:	cf 92       	push	r12
    480c:	ef 92       	push	r14
    480e:	0f 93       	push	r16
    4810:	81 2c       	mov	r8, r1
    4812:	91 2c       	mov	r9, r1
    4814:	68 94       	set
    4816:	aa 24       	eor	r10, r10
    4818:	a7 f8       	bld	r10, 7
    481a:	68 94       	set
    481c:	cc 24       	eor	r12, r12
    481e:	c7 f8       	bld	r12, 7
    4820:	e1 2c       	mov	r14, r1
    4822:	00 e0       	ldi	r16, 0x00	; 0
    4824:	23 e0       	ldi	r18, 0x03	; 3
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	51 ee       	ldi	r21, 0xE1	; 225
    482a:	60 e0       	ldi	r22, 0x00	; 0
    482c:	70 e0       	ldi	r23, 0x00	; 0
    482e:	2c dc       	rcall	.-1960   	; 0x4088 <serial_create>
    4830:	90 93 86 16 	sts	0x1686, r25	; 0x801686 <_com_serial_instance+0x1>
    4834:	80 93 85 16 	sts	0x1685, r24	; 0x801685 <_com_serial_instance>
    4838:	e8 eb       	ldi	r30, 0xB8	; 184
    483a:	f6 e1       	ldi	r31, 0x16	; 22
    483c:	83 e1       	ldi	r24, 0x13	; 19
    483e:	92 e0       	ldi	r25, 0x02	; 2
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	80 83       	st	Z, r24
    4844:	93 83       	std	Z+3, r25	; 0x03
    4846:	82 83       	std	Z+2, r24	; 0x02
    4848:	0f 91       	pop	r16
    484a:	ef 90       	pop	r14
    484c:	cf 90       	pop	r12
    484e:	af 90       	pop	r10
    4850:	9f 90       	pop	r9
    4852:	8f 90       	pop	r8
    4854:	08 95       	ret

00004856 <_select_instance>:
    4856:	e0 91 88 16 	lds	r30, 0x1688	; 0x801688 <_this>
    485a:	f0 91 89 16 	lds	r31, 0x1689	; 0x801689 <_this+0x1>
    485e:	30 97       	sbiw	r30, 0x00	; 0
    4860:	f9 f0       	breq	.+62     	; 0x48a0 <_select_instance+0x4a>
    4862:	a0 81       	ld	r26, Z
    4864:	b1 81       	ldd	r27, Z+1	; 0x01
    4866:	10 97       	sbiw	r26, 0x00	; 0
    4868:	d9 f0       	breq	.+54     	; 0x48a0 <_select_instance+0x4a>
    486a:	23 81       	ldd	r18, Z+3	; 0x03
    486c:	21 30       	cpi	r18, 0x01	; 1
    486e:	69 f4       	brne	.+26     	; 0x488a <_select_instance+0x34>
    4870:	4c 91       	ld	r20, X
    4872:	21 e0       	ldi	r18, 0x01	; 1
    4874:	30 e0       	ldi	r19, 0x00	; 0
    4876:	02 80       	ldd	r0, Z+2	; 0x02
    4878:	02 c0       	rjmp	.+4      	; 0x487e <_select_instance+0x28>
    487a:	22 0f       	add	r18, r18
    487c:	33 1f       	adc	r19, r19
    487e:	0a 94       	dec	r0
    4880:	e2 f7       	brpl	.-8      	; 0x487a <_select_instance+0x24>
    4882:	20 95       	com	r18
    4884:	24 23       	and	r18, r20
    4886:	2c 93       	st	X, r18
    4888:	0b c0       	rjmp	.+22     	; 0x48a0 <_select_instance+0x4a>
    488a:	4c 91       	ld	r20, X
    488c:	21 e0       	ldi	r18, 0x01	; 1
    488e:	30 e0       	ldi	r19, 0x00	; 0
    4890:	02 80       	ldd	r0, Z+2	; 0x02
    4892:	02 c0       	rjmp	.+4      	; 0x4898 <_select_instance+0x42>
    4894:	22 0f       	add	r18, r18
    4896:	33 1f       	adc	r19, r19
    4898:	0a 94       	dec	r0
    489a:	e2 f7       	brpl	.-8      	; 0x4894 <_select_instance+0x3e>
    489c:	24 2b       	or	r18, r20
    489e:	2c 93       	st	X, r18
    48a0:	90 93 89 16 	sts	0x1689, r25	; 0x801689 <_this+0x1>
    48a4:	80 93 88 16 	sts	0x1688, r24	; 0x801688 <_this>
    48a8:	00 97       	sbiw	r24, 0x00	; 0
    48aa:	69 f0       	breq	.+26     	; 0x48c6 <_select_instance+0x70>
    48ac:	10 92 8a 16 	sts	0x168A, r1	; 0x80168a <_spi_active>
    48b0:	2c b5       	in	r18, 0x2c	; 44
    48b2:	2f 73       	andi	r18, 0x3F	; 63
    48b4:	2c bd       	out	0x2c, r18	; 44
    48b6:	fc 01       	movw	r30, r24
    48b8:	24 81       	ldd	r18, Z+4	; 0x04
    48ba:	2c bd       	out	0x2c, r18	; 44
    48bc:	85 81       	ldd	r24, Z+5	; 0x05
    48be:	8d bd       	out	0x2d, r24	; 45
    48c0:	8c b5       	in	r24, 0x2c	; 44
    48c2:	80 64       	ori	r24, 0x40	; 64
    48c4:	8c bd       	out	0x2c, r24	; 44
    48c6:	08 95       	ret

000048c8 <spi_create>:
    48c8:	4f 92       	push	r4
    48ca:	5f 92       	push	r5
    48cc:	6f 92       	push	r6
    48ce:	7f 92       	push	r7
    48d0:	8f 92       	push	r8
    48d2:	9f 92       	push	r9
    48d4:	af 92       	push	r10
    48d6:	bf 92       	push	r11
    48d8:	cf 92       	push	r12
    48da:	df 92       	push	r13
    48dc:	ef 92       	push	r14
    48de:	ff 92       	push	r15
    48e0:	0f 93       	push	r16
    48e2:	1f 93       	push	r17
    48e4:	cf 93       	push	r28
    48e6:	df 93       	push	r29
    48e8:	cd b7       	in	r28, 0x3d	; 61
    48ea:	de b7       	in	r29, 0x3e	; 62
    48ec:	98 2e       	mov	r9, r24
    48ee:	b6 2e       	mov	r11, r22
    48f0:	d4 2e       	mov	r13, r20
    48f2:	f2 2e       	mov	r15, r18
    48f4:	80 91 87 16 	lds	r24, 0x1687	; 0x801687 <_initialised>
    48f8:	81 11       	cpse	r24, r1
    48fa:	06 c0       	rjmp	.+12     	; 0x4908 <spi_create+0x40>
    48fc:	84 b1       	in	r24, 0x04	; 4
    48fe:	87 60       	ori	r24, 0x07	; 7
    4900:	84 b9       	out	0x04, r24	; 4
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	80 93 87 16 	sts	0x1687, r24	; 0x801687 <_initialised>
    4908:	8c e0       	ldi	r24, 0x0C	; 12
    490a:	90 e0       	ldi	r25, 0x00	; 0
    490c:	0e 94 bc 2d 	call	0x5b78	; 0x5b78 <malloc>
    4910:	3c 01       	movw	r6, r24
    4912:	dc 01       	movw	r26, r24
    4914:	11 96       	adiw	r26, 0x01	; 1
    4916:	1c 93       	st	X, r17
    4918:	0e 93       	st	-X, r16
    491a:	12 96       	adiw	r26, 0x02	; 2
    491c:	ec 92       	st	X, r14
    491e:	12 97       	sbiw	r26, 0x02	; 2
    4920:	13 96       	adiw	r26, 0x03	; 3
    4922:	cc 92       	st	X, r12
    4924:	13 97       	sbiw	r26, 0x03	; 3
    4926:	8d 2d       	mov	r24, r13
    4928:	88 0f       	add	r24, r24
    492a:	88 0f       	add	r24, r24
    492c:	f8 2a       	or	r15, r24
    492e:	eb 2d       	mov	r30, r11
    4930:	f0 e0       	ldi	r31, 0x00	; 0
    4932:	ee 56       	subi	r30, 0x6E	; 110
    4934:	f9 4f       	sbci	r31, 0xF9	; 249
    4936:	80 81       	ld	r24, Z
    4938:	98 2a       	or	r9, r24
    493a:	8f 2d       	mov	r24, r15
    493c:	89 29       	or	r24, r9
    493e:	14 96       	adiw	r26, 0x04	; 4
    4940:	8c 93       	st	X, r24
    4942:	b3 e0       	ldi	r27, 0x03	; 3
    4944:	bb 15       	cp	r27, r11
    4946:	18 f4       	brcc	.+6      	; 0x494e <spi_create+0x86>
    4948:	81 e0       	ldi	r24, 0x01	; 1
    494a:	f3 01       	movw	r30, r6
    494c:	85 83       	std	Z+5, r24	; 0x05
    494e:	a1 10       	cpse	r10, r1
    4950:	06 c0       	rjmp	.+12     	; 0x495e <spi_create+0x96>
    4952:	d3 01       	movw	r26, r6
    4954:	19 96       	adiw	r26, 0x09	; 9
    4956:	1c 92       	st	X, r1
    4958:	1e 92       	st	-X, r1
    495a:	18 97       	sbiw	r26, 0x08	; 8
    495c:	14 c0       	rjmp	.+40     	; 0x4986 <spi_create+0xbe>
    495e:	6a 2d       	mov	r22, r10
    4960:	70 e0       	ldi	r23, 0x00	; 0
    4962:	84 e0       	ldi	r24, 0x04	; 4
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <calloc>
    496a:	2c 01       	movw	r4, r24
    496c:	61 e0       	ldi	r22, 0x01	; 1
    496e:	70 e0       	ldi	r23, 0x00	; 0
    4970:	86 e0       	ldi	r24, 0x06	; 6
    4972:	90 e0       	ldi	r25, 0x00	; 0
    4974:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <calloc>
    4978:	6c 01       	movw	r12, r24
    497a:	4a 2d       	mov	r20, r10
    497c:	b2 01       	movw	r22, r4
    497e:	dc d4       	rcall	.+2488   	; 0x5338 <fifo_init>
    4980:	f3 01       	movw	r30, r6
    4982:	d1 86       	std	Z+9, r13	; 0x09
    4984:	c0 86       	std	Z+8, r12	; 0x08
    4986:	81 10       	cpse	r8, r1
    4988:	06 c0       	rjmp	.+12     	; 0x4996 <spi_create+0xce>
    498a:	d3 01       	movw	r26, r6
    498c:	17 96       	adiw	r26, 0x07	; 7
    498e:	1c 92       	st	X, r1
    4990:	1e 92       	st	-X, r1
    4992:	16 97       	sbiw	r26, 0x06	; 6
    4994:	14 c0       	rjmp	.+40     	; 0x49be <spi_create+0xf6>
    4996:	68 2d       	mov	r22, r8
    4998:	70 e0       	ldi	r23, 0x00	; 0
    499a:	84 e0       	ldi	r24, 0x04	; 4
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <calloc>
    49a2:	5c 01       	movw	r10, r24
    49a4:	61 e0       	ldi	r22, 0x01	; 1
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	86 e0       	ldi	r24, 0x06	; 6
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <calloc>
    49b0:	6c 01       	movw	r12, r24
    49b2:	48 2d       	mov	r20, r8
    49b4:	b5 01       	movw	r22, r10
    49b6:	c0 d4       	rcall	.+2432   	; 0x5338 <fifo_init>
    49b8:	f3 01       	movw	r30, r6
    49ba:	d7 82       	std	Z+7, r13	; 0x07
    49bc:	c6 82       	std	Z+6, r12	; 0x06
    49be:	8c 89       	ldd	r24, Y+20	; 0x14
    49c0:	9d 89       	ldd	r25, Y+21	; 0x15
    49c2:	d3 01       	movw	r26, r6
    49c4:	1b 96       	adiw	r26, 0x0b	; 11
    49c6:	9c 93       	st	X, r25
    49c8:	8e 93       	st	-X, r24
    49ca:	1a 97       	sbiw	r26, 0x0a	; 10
    49cc:	01 15       	cp	r16, r1
    49ce:	11 05       	cpc	r17, r1
    49d0:	59 f0       	breq	.+22     	; 0x49e8 <spi_create+0x120>
    49d2:	f8 01       	movw	r30, r16
    49d4:	22 91       	ld	r18, -Z
    49d6:	81 e0       	ldi	r24, 0x01	; 1
    49d8:	90 e0       	ldi	r25, 0x00	; 0
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <spi_create+0x118>
    49dc:	88 0f       	add	r24, r24
    49de:	99 1f       	adc	r25, r25
    49e0:	ea 94       	dec	r14
    49e2:	e2 f7       	brpl	.-8      	; 0x49dc <spi_create+0x114>
    49e4:	82 2b       	or	r24, r18
    49e6:	80 83       	st	Z, r24
    49e8:	2f b7       	in	r18, 0x3f	; 63
    49ea:	f8 94       	cli
    49ec:	40 91 88 16 	lds	r20, 0x1688	; 0x801688 <_this>
    49f0:	50 91 89 16 	lds	r21, 0x1689	; 0x801689 <_this+0x1>
    49f4:	70 92 89 16 	sts	0x1689, r7	; 0x801689 <_this+0x1>
    49f8:	60 92 88 16 	sts	0x1688, r6	; 0x801688 <_this>
    49fc:	d3 01       	movw	r26, r6
    49fe:	ed 91       	ld	r30, X+
    4a00:	fc 91       	ld	r31, X
    4a02:	11 97       	sbiw	r26, 0x01	; 1
    4a04:	30 97       	sbiw	r30, 0x00	; 0
    4a06:	01 f1       	breq	.+64     	; 0x4a48 <spi_create+0x180>
    4a08:	13 96       	adiw	r26, 0x03	; 3
    4a0a:	8c 91       	ld	r24, X
    4a0c:	13 97       	sbiw	r26, 0x03	; 3
    4a0e:	81 30       	cpi	r24, 0x01	; 1
    4a10:	71 f4       	brne	.+28     	; 0x4a2e <spi_create+0x166>
    4a12:	30 81       	ld	r19, Z
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	12 96       	adiw	r26, 0x02	; 2
    4a1a:	0c 90       	ld	r0, X
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <spi_create+0x15a>
    4a1e:	88 0f       	add	r24, r24
    4a20:	99 1f       	adc	r25, r25
    4a22:	0a 94       	dec	r0
    4a24:	e2 f7       	brpl	.-8      	; 0x4a1e <spi_create+0x156>
    4a26:	80 95       	com	r24
    4a28:	83 23       	and	r24, r19
    4a2a:	80 83       	st	Z, r24
    4a2c:	0d c0       	rjmp	.+26     	; 0x4a48 <spi_create+0x180>
    4a2e:	30 81       	ld	r19, Z
    4a30:	81 e0       	ldi	r24, 0x01	; 1
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	d3 01       	movw	r26, r6
    4a36:	12 96       	adiw	r26, 0x02	; 2
    4a38:	0c 90       	ld	r0, X
    4a3a:	02 c0       	rjmp	.+4      	; 0x4a40 <spi_create+0x178>
    4a3c:	88 0f       	add	r24, r24
    4a3e:	99 1f       	adc	r25, r25
    4a40:	0a 94       	dec	r0
    4a42:	e2 f7       	brpl	.-8      	; 0x4a3c <spi_create+0x174>
    4a44:	83 2b       	or	r24, r19
    4a46:	80 83       	st	Z, r24
    4a48:	50 93 89 16 	sts	0x1689, r21	; 0x801689 <_this+0x1>
    4a4c:	40 93 88 16 	sts	0x1688, r20	; 0x801688 <_this>
    4a50:	2f bf       	out	0x3f, r18	; 63
    4a52:	c3 01       	movw	r24, r6
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	1f 91       	pop	r17
    4a5a:	0f 91       	pop	r16
    4a5c:	ff 90       	pop	r15
    4a5e:	ef 90       	pop	r14
    4a60:	df 90       	pop	r13
    4a62:	cf 90       	pop	r12
    4a64:	bf 90       	pop	r11
    4a66:	af 90       	pop	r10
    4a68:	9f 90       	pop	r9
    4a6a:	8f 90       	pop	r8
    4a6c:	7f 90       	pop	r7
    4a6e:	6f 90       	pop	r6
    4a70:	5f 90       	pop	r5
    4a72:	4f 90       	pop	r4
    4a74:	08 95       	ret

00004a76 <spi_sendByte>:
    4a76:	1f 93       	push	r17
    4a78:	cf 93       	push	r28
    4a7a:	df 93       	push	r29
    4a7c:	00 97       	sbiw	r24, 0x00	; 0
    4a7e:	09 f4       	brne	.+2      	; 0x4a82 <spi_sendByte+0xc>
    4a80:	6a c0       	rjmp	.+212    	; 0x4b56 <spi_sendByte+0xe0>
    4a82:	16 2f       	mov	r17, r22
    4a84:	ec 01       	movw	r28, r24
    4a86:	80 91 88 16 	lds	r24, 0x1688	; 0x801688 <_this>
    4a8a:	90 91 89 16 	lds	r25, 0x1689	; 0x801689 <_this+0x1>
    4a8e:	c8 17       	cp	r28, r24
    4a90:	d9 07       	cpc	r29, r25
    4a92:	11 f0       	breq	.+4      	; 0x4a98 <spi_sendByte+0x22>
    4a94:	ce 01       	movw	r24, r28
    4a96:	df de       	rcall	.-578    	; 0x4856 <_select_instance>
    4a98:	8f b7       	in	r24, 0x3f	; 63
    4a9a:	2f b7       	in	r18, 0x3f	; 63
    4a9c:	f8 94       	cli
    4a9e:	80 91 8a 16 	lds	r24, 0x168A	; 0x80168a <_spi_active>
    4aa2:	81 11       	cpse	r24, r1
    4aa4:	31 c0       	rjmp	.+98     	; 0x4b08 <spi_sendByte+0x92>
    4aa6:	81 e0       	ldi	r24, 0x01	; 1
    4aa8:	80 93 8a 16 	sts	0x168A, r24	; 0x80168a <_spi_active>
    4aac:	a0 91 88 16 	lds	r26, 0x1688	; 0x801688 <_this>
    4ab0:	b0 91 89 16 	lds	r27, 0x1689	; 0x801689 <_this+0x1>
    4ab4:	ed 91       	ld	r30, X+
    4ab6:	fc 91       	ld	r31, X
    4ab8:	11 97       	sbiw	r26, 0x01	; 1
    4aba:	30 97       	sbiw	r30, 0x00	; 0
    4abc:	f9 f0       	breq	.+62     	; 0x4afc <spi_sendByte+0x86>
    4abe:	13 96       	adiw	r26, 0x03	; 3
    4ac0:	8c 91       	ld	r24, X
    4ac2:	13 97       	sbiw	r26, 0x03	; 3
    4ac4:	81 30       	cpi	r24, 0x01	; 1
    4ac6:	69 f4       	brne	.+26     	; 0x4ae2 <spi_sendByte+0x6c>
    4ac8:	30 81       	ld	r19, Z
    4aca:	81 e0       	ldi	r24, 0x01	; 1
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	12 96       	adiw	r26, 0x02	; 2
    4ad0:	0c 90       	ld	r0, X
    4ad2:	02 c0       	rjmp	.+4      	; 0x4ad8 <spi_sendByte+0x62>
    4ad4:	88 0f       	add	r24, r24
    4ad6:	99 1f       	adc	r25, r25
    4ad8:	0a 94       	dec	r0
    4ada:	e2 f7       	brpl	.-8      	; 0x4ad4 <spi_sendByte+0x5e>
    4adc:	83 2b       	or	r24, r19
    4ade:	80 83       	st	Z, r24
    4ae0:	0d c0       	rjmp	.+26     	; 0x4afc <spi_sendByte+0x86>
    4ae2:	30 81       	ld	r19, Z
    4ae4:	81 e0       	ldi	r24, 0x01	; 1
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	12 96       	adiw	r26, 0x02	; 2
    4aea:	0c 90       	ld	r0, X
    4aec:	02 c0       	rjmp	.+4      	; 0x4af2 <spi_sendByte+0x7c>
    4aee:	88 0f       	add	r24, r24
    4af0:	99 1f       	adc	r25, r25
    4af2:	0a 94       	dec	r0
    4af4:	e2 f7       	brpl	.-8      	; 0x4aee <spi_sendByte+0x78>
    4af6:	80 95       	com	r24
    4af8:	83 23       	and	r24, r19
    4afa:	80 83       	st	Z, r24
    4afc:	8c b5       	in	r24, 0x2c	; 44
    4afe:	80 68       	ori	r24, 0x80	; 128
    4b00:	8c bd       	out	0x2c, r24	; 44
    4b02:	1e bd       	out	0x2e, r17	; 46
    4b04:	80 e0       	ldi	r24, 0x00	; 0
    4b06:	25 c0       	rjmp	.+74     	; 0x4b52 <spi_sendByte+0xdc>
    4b08:	ee 81       	ldd	r30, Y+6	; 0x06
    4b0a:	ff 81       	ldd	r31, Y+7	; 0x07
    4b0c:	30 97       	sbiw	r30, 0x00	; 0
    4b0e:	e1 f0       	breq	.+56     	; 0x4b48 <spi_sendByte+0xd2>
    4b10:	34 81       	ldd	r19, Z+4	; 0x04
    4b12:	83 81       	ldd	r24, Z+3	; 0x03
    4b14:	42 81       	ldd	r20, Z+2	; 0x02
    4b16:	95 81       	ldd	r25, Z+5	; 0x05
    4b18:	84 1b       	sub	r24, r20
    4b1a:	89 23       	and	r24, r25
    4b1c:	38 17       	cp	r19, r24
    4b1e:	b1 f0       	breq	.+44     	; 0x4b4c <spi_sendByte+0xd6>
    4b20:	83 81       	ldd	r24, Z+3	; 0x03
    4b22:	42 81       	ldd	r20, Z+2	; 0x02
    4b24:	84 1b       	sub	r24, r20
    4b26:	89 23       	and	r24, r25
    4b28:	38 17       	cp	r19, r24
    4b2a:	91 f0       	breq	.+36     	; 0x4b50 <spi_sendByte+0xda>
    4b2c:	83 81       	ldd	r24, Z+3	; 0x03
    4b2e:	96 95       	lsr	r25
    4b30:	98 23       	and	r25, r24
    4b32:	a0 81       	ld	r26, Z
    4b34:	b1 81       	ldd	r27, Z+1	; 0x01
    4b36:	a9 0f       	add	r26, r25
    4b38:	b1 1d       	adc	r27, r1
    4b3a:	1c 93       	st	X, r17
    4b3c:	8f 5f       	subi	r24, 0xFF	; 255
    4b3e:	95 81       	ldd	r25, Z+5	; 0x05
    4b40:	89 23       	and	r24, r25
    4b42:	83 83       	std	Z+3, r24	; 0x03
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	05 c0       	rjmp	.+10     	; 0x4b52 <spi_sendByte+0xdc>
    4b48:	82 e0       	ldi	r24, 0x02	; 2
    4b4a:	03 c0       	rjmp	.+6      	; 0x4b52 <spi_sendByte+0xdc>
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	01 c0       	rjmp	.+2      	; 0x4b52 <spi_sendByte+0xdc>
    4b50:	80 e0       	ldi	r24, 0x00	; 0
    4b52:	2f bf       	out	0x3f, r18	; 63
    4b54:	01 c0       	rjmp	.+2      	; 0x4b58 <spi_sendByte+0xe2>
    4b56:	83 e0       	ldi	r24, 0x03	; 3
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	1f 91       	pop	r17
    4b5e:	08 95       	ret

00004b60 <__vector_24>:
    4b60:	1f 92       	push	r1
    4b62:	0f 92       	push	r0
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	0f 92       	push	r0
    4b68:	11 24       	eor	r1, r1
    4b6a:	0b b6       	in	r0, 0x3b	; 59
    4b6c:	0f 92       	push	r0
    4b6e:	2f 93       	push	r18
    4b70:	3f 93       	push	r19
    4b72:	4f 93       	push	r20
    4b74:	5f 93       	push	r21
    4b76:	6f 93       	push	r22
    4b78:	7f 93       	push	r23
    4b7a:	8f 93       	push	r24
    4b7c:	9f 93       	push	r25
    4b7e:	af 93       	push	r26
    4b80:	bf 93       	push	r27
    4b82:	cf 93       	push	r28
    4b84:	df 93       	push	r29
    4b86:	ef 93       	push	r30
    4b88:	ff 93       	push	r31
    4b8a:	6e b5       	in	r22, 0x2e	; 46
    4b8c:	a0 91 88 16 	lds	r26, 0x1688	; 0x801688 <_this>
    4b90:	b0 91 89 16 	lds	r27, 0x1689	; 0x801689 <_this+0x1>
    4b94:	18 96       	adiw	r26, 0x08	; 8
    4b96:	ed 91       	ld	r30, X+
    4b98:	fc 91       	ld	r31, X
    4b9a:	19 97       	sbiw	r26, 0x09	; 9
    4b9c:	30 97       	sbiw	r30, 0x00	; 0
    4b9e:	a1 f0       	breq	.+40     	; 0x4bc8 <__vector_24+0x68>
    4ba0:	83 81       	ldd	r24, Z+3	; 0x03
    4ba2:	22 81       	ldd	r18, Z+2	; 0x02
    4ba4:	95 81       	ldd	r25, Z+5	; 0x05
    4ba6:	82 1b       	sub	r24, r18
    4ba8:	89 23       	and	r24, r25
    4baa:	24 81       	ldd	r18, Z+4	; 0x04
    4bac:	82 17       	cp	r24, r18
    4bae:	61 f0       	breq	.+24     	; 0x4bc8 <__vector_24+0x68>
    4bb0:	83 81       	ldd	r24, Z+3	; 0x03
    4bb2:	96 95       	lsr	r25
    4bb4:	98 23       	and	r25, r24
    4bb6:	c0 81       	ld	r28, Z
    4bb8:	d1 81       	ldd	r29, Z+1	; 0x01
    4bba:	c9 0f       	add	r28, r25
    4bbc:	d1 1d       	adc	r29, r1
    4bbe:	68 83       	st	Y, r22
    4bc0:	8f 5f       	subi	r24, 0xFF	; 255
    4bc2:	95 81       	ldd	r25, Z+5	; 0x05
    4bc4:	89 23       	and	r24, r25
    4bc6:	83 83       	std	Z+3, r24	; 0x03
    4bc8:	16 96       	adiw	r26, 0x06	; 6
    4bca:	ed 91       	ld	r30, X+
    4bcc:	fc 91       	ld	r31, X
    4bce:	17 97       	sbiw	r26, 0x07	; 7
    4bd0:	30 97       	sbiw	r30, 0x00	; 0
    4bd2:	99 f0       	breq	.+38     	; 0x4bfa <__vector_24+0x9a>
    4bd4:	93 81       	ldd	r25, Z+3	; 0x03
    4bd6:	82 81       	ldd	r24, Z+2	; 0x02
    4bd8:	98 17       	cp	r25, r24
    4bda:	79 f0       	breq	.+30     	; 0x4bfa <__vector_24+0x9a>
    4bdc:	92 81       	ldd	r25, Z+2	; 0x02
    4bde:	85 81       	ldd	r24, Z+5	; 0x05
    4be0:	28 2f       	mov	r18, r24
    4be2:	26 95       	lsr	r18
    4be4:	29 23       	and	r18, r25
    4be6:	a0 81       	ld	r26, Z
    4be8:	b1 81       	ldd	r27, Z+1	; 0x01
    4bea:	a2 0f       	add	r26, r18
    4bec:	b1 1d       	adc	r27, r1
    4bee:	2c 91       	ld	r18, X
    4bf0:	9f 5f       	subi	r25, 0xFF	; 255
    4bf2:	89 23       	and	r24, r25
    4bf4:	82 83       	std	Z+2, r24	; 0x02
    4bf6:	2e bd       	out	0x2e, r18	; 46
    4bf8:	2d c0       	rjmp	.+90     	; 0x4c54 <__vector_24+0xf4>
    4bfa:	8c b5       	in	r24, 0x2c	; 44
    4bfc:	8f 77       	andi	r24, 0x7F	; 127
    4bfe:	8c bd       	out	0x2c, r24	; 44
    4c00:	10 92 8a 16 	sts	0x168A, r1	; 0x80168a <_spi_active>
    4c04:	a0 91 88 16 	lds	r26, 0x1688	; 0x801688 <_this>
    4c08:	b0 91 89 16 	lds	r27, 0x1689	; 0x801689 <_this+0x1>
    4c0c:	ed 91       	ld	r30, X+
    4c0e:	fc 91       	ld	r31, X
    4c10:	11 97       	sbiw	r26, 0x01	; 1
    4c12:	30 97       	sbiw	r30, 0x00	; 0
    4c14:	f9 f0       	breq	.+62     	; 0x4c54 <__vector_24+0xf4>
    4c16:	13 96       	adiw	r26, 0x03	; 3
    4c18:	8c 91       	ld	r24, X
    4c1a:	13 97       	sbiw	r26, 0x03	; 3
    4c1c:	81 30       	cpi	r24, 0x01	; 1
    4c1e:	71 f4       	brne	.+28     	; 0x4c3c <__vector_24+0xdc>
    4c20:	20 81       	ld	r18, Z
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	12 96       	adiw	r26, 0x02	; 2
    4c28:	0c 90       	ld	r0, X
    4c2a:	02 c0       	rjmp	.+4      	; 0x4c30 <__vector_24+0xd0>
    4c2c:	88 0f       	add	r24, r24
    4c2e:	99 1f       	adc	r25, r25
    4c30:	0a 94       	dec	r0
    4c32:	e2 f7       	brpl	.-8      	; 0x4c2c <__vector_24+0xcc>
    4c34:	80 95       	com	r24
    4c36:	82 23       	and	r24, r18
    4c38:	80 83       	st	Z, r24
    4c3a:	0c c0       	rjmp	.+24     	; 0x4c54 <__vector_24+0xf4>
    4c3c:	20 81       	ld	r18, Z
    4c3e:	81 e0       	ldi	r24, 0x01	; 1
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	12 96       	adiw	r26, 0x02	; 2
    4c44:	0c 90       	ld	r0, X
    4c46:	02 c0       	rjmp	.+4      	; 0x4c4c <__vector_24+0xec>
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	0a 94       	dec	r0
    4c4e:	e2 f7       	brpl	.-8      	; 0x4c48 <__vector_24+0xe8>
    4c50:	82 2b       	or	r24, r18
    4c52:	80 83       	st	Z, r24
    4c54:	80 91 88 16 	lds	r24, 0x1688	; 0x801688 <_this>
    4c58:	90 91 89 16 	lds	r25, 0x1689	; 0x801689 <_this+0x1>
    4c5c:	dc 01       	movw	r26, r24
    4c5e:	1a 96       	adiw	r26, 0x0a	; 10
    4c60:	ed 91       	ld	r30, X+
    4c62:	fc 91       	ld	r31, X
    4c64:	1b 97       	sbiw	r26, 0x0b	; 11
    4c66:	30 97       	sbiw	r30, 0x00	; 0
    4c68:	09 f0       	breq	.+2      	; 0x4c6c <__vector_24+0x10c>
    4c6a:	19 95       	eicall
    4c6c:	ff 91       	pop	r31
    4c6e:	ef 91       	pop	r30
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	bf 91       	pop	r27
    4c76:	af 91       	pop	r26
    4c78:	9f 91       	pop	r25
    4c7a:	8f 91       	pop	r24
    4c7c:	7f 91       	pop	r23
    4c7e:	6f 91       	pop	r22
    4c80:	5f 91       	pop	r21
    4c82:	4f 91       	pop	r20
    4c84:	3f 91       	pop	r19
    4c86:	2f 91       	pop	r18
    4c88:	0f 90       	pop	r0
    4c8a:	0b be       	out	0x3b, r0	; 59
    4c8c:	0f 90       	pop	r0
    4c8e:	0f be       	out	0x3f, r0	; 63
    4c90:	0f 90       	pop	r0
    4c92:	1f 90       	pop	r1
    4c94:	18 95       	reti

00004c96 <_turn_off>:
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	fc 01       	movw	r30, r24
    4c9a:	ee 0f       	add	r30, r30
    4c9c:	ff 1f       	adc	r31, r31
    4c9e:	e8 0f       	add	r30, r24
    4ca0:	f9 1f       	adc	r31, r25
    4ca2:	ee 0f       	add	r30, r30
    4ca4:	ff 1f       	adc	r31, r31
    4ca6:	e5 57       	subi	r30, 0x75	; 117
    4ca8:	f9 4e       	sbci	r31, 0xE9	; 233
    4caa:	23 81       	ldd	r18, Z+3	; 0x03
    4cac:	21 11       	cpse	r18, r1
    4cae:	1f c0       	rjmp	.+62     	; 0x4cee <_turn_off+0x58>
    4cb0:	9c 01       	movw	r18, r24
    4cb2:	22 0f       	add	r18, r18
    4cb4:	33 1f       	adc	r19, r19
    4cb6:	f9 01       	movw	r30, r18
    4cb8:	e8 0f       	add	r30, r24
    4cba:	f9 1f       	adc	r31, r25
    4cbc:	ee 0f       	add	r30, r30
    4cbe:	ff 1f       	adc	r31, r31
    4cc0:	e5 57       	subi	r30, 0x75	; 117
    4cc2:	f9 4e       	sbci	r31, 0xE9	; 233
    4cc4:	a0 81       	ld	r26, Z
    4cc6:	b1 81       	ldd	r27, Z+1	; 0x01
    4cc8:	4c 91       	ld	r20, X
    4cca:	f9 01       	movw	r30, r18
    4ccc:	e8 0f       	add	r30, r24
    4cce:	f9 1f       	adc	r31, r25
    4cd0:	ee 0f       	add	r30, r30
    4cd2:	ff 1f       	adc	r31, r31
    4cd4:	e5 57       	subi	r30, 0x75	; 117
    4cd6:	f9 4e       	sbci	r31, 0xE9	; 233
    4cd8:	81 e0       	ldi	r24, 0x01	; 1
    4cda:	90 e0       	ldi	r25, 0x00	; 0
    4cdc:	02 80       	ldd	r0, Z+2	; 0x02
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <_turn_off+0x4e>
    4ce0:	88 0f       	add	r24, r24
    4ce2:	99 1f       	adc	r25, r25
    4ce4:	0a 94       	dec	r0
    4ce6:	e2 f7       	brpl	.-8      	; 0x4ce0 <_turn_off+0x4a>
    4ce8:	84 2b       	or	r24, r20
    4cea:	8c 93       	st	X, r24
    4cec:	08 95       	ret
    4cee:	fc 01       	movw	r30, r24
    4cf0:	ee 0f       	add	r30, r30
    4cf2:	ff 1f       	adc	r31, r31
    4cf4:	df 01       	movw	r26, r30
    4cf6:	a8 0f       	add	r26, r24
    4cf8:	b9 1f       	adc	r27, r25
    4cfa:	aa 0f       	add	r26, r26
    4cfc:	bb 1f       	adc	r27, r27
    4cfe:	a5 57       	subi	r26, 0x75	; 117
    4d00:	b9 4e       	sbci	r27, 0xE9	; 233
    4d02:	0d 90       	ld	r0, X+
    4d04:	bc 91       	ld	r27, X
    4d06:	a0 2d       	mov	r26, r0
    4d08:	2c 91       	ld	r18, X
    4d0a:	e8 0f       	add	r30, r24
    4d0c:	f9 1f       	adc	r31, r25
    4d0e:	ee 0f       	add	r30, r30
    4d10:	ff 1f       	adc	r31, r31
    4d12:	e5 57       	subi	r30, 0x75	; 117
    4d14:	f9 4e       	sbci	r31, 0xE9	; 233
    4d16:	81 e0       	ldi	r24, 0x01	; 1
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	02 80       	ldd	r0, Z+2	; 0x02
    4d1c:	02 c0       	rjmp	.+4      	; 0x4d22 <_turn_off+0x8c>
    4d1e:	88 0f       	add	r24, r24
    4d20:	99 1f       	adc	r25, r25
    4d22:	0a 94       	dec	r0
    4d24:	e2 f7       	brpl	.-8      	; 0x4d1e <_turn_off+0x88>
    4d26:	80 95       	com	r24
    4d28:	82 23       	and	r24, r18
    4d2a:	8c 93       	st	X, r24
    4d2c:	08 95       	ret

00004d2e <_turn_on>:
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	fc 01       	movw	r30, r24
    4d32:	ee 0f       	add	r30, r30
    4d34:	ff 1f       	adc	r31, r31
    4d36:	e8 0f       	add	r30, r24
    4d38:	f9 1f       	adc	r31, r25
    4d3a:	ee 0f       	add	r30, r30
    4d3c:	ff 1f       	adc	r31, r31
    4d3e:	e5 57       	subi	r30, 0x75	; 117
    4d40:	f9 4e       	sbci	r31, 0xE9	; 233
    4d42:	23 81       	ldd	r18, Z+3	; 0x03
    4d44:	21 11       	cpse	r18, r1
    4d46:	20 c0       	rjmp	.+64     	; 0x4d88 <_turn_on+0x5a>
    4d48:	9c 01       	movw	r18, r24
    4d4a:	22 0f       	add	r18, r18
    4d4c:	33 1f       	adc	r19, r19
    4d4e:	f9 01       	movw	r30, r18
    4d50:	e8 0f       	add	r30, r24
    4d52:	f9 1f       	adc	r31, r25
    4d54:	ee 0f       	add	r30, r30
    4d56:	ff 1f       	adc	r31, r31
    4d58:	e5 57       	subi	r30, 0x75	; 117
    4d5a:	f9 4e       	sbci	r31, 0xE9	; 233
    4d5c:	a0 81       	ld	r26, Z
    4d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    4d60:	4c 91       	ld	r20, X
    4d62:	f9 01       	movw	r30, r18
    4d64:	e8 0f       	add	r30, r24
    4d66:	f9 1f       	adc	r31, r25
    4d68:	ee 0f       	add	r30, r30
    4d6a:	ff 1f       	adc	r31, r31
    4d6c:	e5 57       	subi	r30, 0x75	; 117
    4d6e:	f9 4e       	sbci	r31, 0xE9	; 233
    4d70:	81 e0       	ldi	r24, 0x01	; 1
    4d72:	90 e0       	ldi	r25, 0x00	; 0
    4d74:	02 80       	ldd	r0, Z+2	; 0x02
    4d76:	02 c0       	rjmp	.+4      	; 0x4d7c <_turn_on+0x4e>
    4d78:	88 0f       	add	r24, r24
    4d7a:	99 1f       	adc	r25, r25
    4d7c:	0a 94       	dec	r0
    4d7e:	e2 f7       	brpl	.-8      	; 0x4d78 <_turn_on+0x4a>
    4d80:	80 95       	com	r24
    4d82:	84 23       	and	r24, r20
    4d84:	8c 93       	st	X, r24
    4d86:	08 95       	ret
    4d88:	fc 01       	movw	r30, r24
    4d8a:	ee 0f       	add	r30, r30
    4d8c:	ff 1f       	adc	r31, r31
    4d8e:	df 01       	movw	r26, r30
    4d90:	a8 0f       	add	r26, r24
    4d92:	b9 1f       	adc	r27, r25
    4d94:	aa 0f       	add	r26, r26
    4d96:	bb 1f       	adc	r27, r27
    4d98:	a5 57       	subi	r26, 0x75	; 117
    4d9a:	b9 4e       	sbci	r27, 0xE9	; 233
    4d9c:	0d 90       	ld	r0, X+
    4d9e:	bc 91       	ld	r27, X
    4da0:	a0 2d       	mov	r26, r0
    4da2:	2c 91       	ld	r18, X
    4da4:	e8 0f       	add	r30, r24
    4da6:	f9 1f       	adc	r31, r25
    4da8:	ee 0f       	add	r30, r30
    4daa:	ff 1f       	adc	r31, r31
    4dac:	e5 57       	subi	r30, 0x75	; 117
    4dae:	f9 4e       	sbci	r31, 0xE9	; 233
    4db0:	81 e0       	ldi	r24, 0x01	; 1
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	02 80       	ldd	r0, Z+2	; 0x02
    4db6:	02 c0       	rjmp	.+4      	; 0x4dbc <_turn_on+0x8e>
    4db8:	88 0f       	add	r24, r24
    4dba:	99 1f       	adc	r25, r25
    4dbc:	0a 94       	dec	r0
    4dbe:	e2 f7       	brpl	.-8      	; 0x4db8 <_turn_on+0x8a>
    4dc0:	82 2b       	or	r24, r18
    4dc2:	8c 93       	st	X, r24
    4dc4:	08 95       	ret

00004dc6 <_hal_led_task>:
    4dc6:	cc 24       	eor	r12, r12
    4dc8:	c3 94       	inc	r12
    4dca:	d1 2c       	mov	r13, r1
    4dcc:	68 94       	set
    4dce:	bb 24       	eor	r11, r11
    4dd0:	b2 f8       	bld	r11, 2
    4dd2:	cb e8       	ldi	r28, 0x8B	; 139
    4dd4:	d6 e1       	ldi	r29, 0x16	; 22
    4dd6:	10 e0       	ldi	r17, 0x00	; 0
    4dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    4dda:	81 30       	cpi	r24, 0x01	; 1
    4ddc:	81 f0       	breq	.+32     	; 0x4dfe <_hal_led_task+0x38>
    4dde:	18 f1       	brcs	.+70     	; 0x4e26 <_hal_led_task+0x60>
    4de0:	82 30       	cpi	r24, 0x02	; 2
    4de2:	61 f5       	brne	.+88     	; 0x4e3c <_hal_led_task+0x76>
    4de4:	e8 81       	ld	r30, Y
    4de6:	f9 81       	ldd	r31, Y+1	; 0x01
    4de8:	20 81       	ld	r18, Z
    4dea:	c6 01       	movw	r24, r12
    4dec:	0a 80       	ldd	r0, Y+2	; 0x02
    4dee:	02 c0       	rjmp	.+4      	; 0x4df4 <_hal_led_task+0x2e>
    4df0:	88 0f       	add	r24, r24
    4df2:	99 1f       	adc	r25, r25
    4df4:	0a 94       	dec	r0
    4df6:	e2 f7       	brpl	.-8      	; 0x4df0 <_hal_led_task+0x2a>
    4df8:	82 27       	eor	r24, r18
    4dfa:	80 83       	st	Z, r24
    4dfc:	1f c0       	rjmp	.+62     	; 0x4e3c <_hal_led_task+0x76>
    4dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4e00:	8f 5f       	subi	r24, 0xFF	; 255
    4e02:	86 30       	cpi	r24, 0x06	; 6
    4e04:	10 f4       	brcc	.+4      	; 0x4e0a <_hal_led_task+0x44>
    4e06:	8d 83       	std	Y+5, r24	; 0x05
    4e08:	19 c0       	rjmp	.+50     	; 0x4e3c <_hal_led_task+0x76>
    4e0a:	1d 82       	std	Y+5, r1	; 0x05
    4e0c:	e8 81       	ld	r30, Y
    4e0e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e10:	20 81       	ld	r18, Z
    4e12:	c6 01       	movw	r24, r12
    4e14:	0a 80       	ldd	r0, Y+2	; 0x02
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <_hal_led_task+0x56>
    4e18:	88 0f       	add	r24, r24
    4e1a:	99 1f       	adc	r25, r25
    4e1c:	0a 94       	dec	r0
    4e1e:	e2 f7       	brpl	.-8      	; 0x4e18 <_hal_led_task+0x52>
    4e20:	82 27       	eor	r24, r18
    4e22:	80 83       	st	Z, r24
    4e24:	0b c0       	rjmp	.+22     	; 0x4e3c <_hal_led_task+0x76>
    4e26:	0d 81       	ldd	r16, Y+5	; 0x05
    4e28:	00 23       	and	r16, r16
    4e2a:	29 f0       	breq	.+10     	; 0x4e36 <_hal_led_task+0x70>
    4e2c:	81 2f       	mov	r24, r17
    4e2e:	7f df       	rcall	.-258    	; 0x4d2e <_turn_on>
    4e30:	01 50       	subi	r16, 0x01	; 1
    4e32:	0d 83       	std	Y+5, r16	; 0x05
    4e34:	03 c0       	rjmp	.+6      	; 0x4e3c <_hal_led_task+0x76>
    4e36:	bc 82       	std	Y+4, r11	; 0x04
    4e38:	81 2f       	mov	r24, r17
    4e3a:	2d df       	rcall	.-422    	; 0x4c96 <_turn_off>
    4e3c:	1f 5f       	subi	r17, 0xFF	; 255
    4e3e:	26 96       	adiw	r28, 0x06	; 6
    4e40:	14 30       	cpi	r17, 0x04	; 4
    4e42:	51 f6       	brne	.-108    	; 0x4dd8 <_hal_led_task+0x12>
    4e44:	6c e0       	ldi	r22, 0x0C	; 12
    4e46:	70 e0       	ldi	r23, 0x00	; 0
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <vTaskDelay>
    4e50:	c0 cf       	rjmp	.-128    	; 0x4dd2 <_hal_led_task+0xc>

00004e52 <status_leds_initialise>:
    4e52:	ef 92       	push	r14
    4e54:	ff 92       	push	r15
    4e56:	0f 93       	push	r16
    4e58:	1f 93       	push	r17
    4e5a:	cf 93       	push	r28
    4e5c:	df 93       	push	r29
    4e5e:	08 2f       	mov	r16, r24
    4e60:	80 e4       	ldi	r24, 0x40	; 64
    4e62:	87 b9       	out	0x07, r24	; 7
    4e64:	cb e8       	ldi	r28, 0x8B	; 139
    4e66:	d6 e1       	ldi	r29, 0x16	; 22
    4e68:	0f 2e       	mov	r0, r31
    4e6a:	f8 e2       	ldi	r31, 0x28	; 40
    4e6c:	ef 2e       	mov	r14, r31
    4e6e:	f1 2c       	mov	r15, r1
    4e70:	f0 2d       	mov	r31, r0
    4e72:	f9 82       	std	Y+1, r15	; 0x01
    4e74:	e8 82       	st	Y, r14
    4e76:	86 e0       	ldi	r24, 0x06	; 6
    4e78:	8a 83       	std	Y+2, r24	; 0x02
    4e7a:	1b 82       	std	Y+3, r1	; 0x03
    4e7c:	14 e0       	ldi	r17, 0x04	; 4
    4e7e:	1c 83       	std	Y+4, r17	; 0x04
    4e80:	80 e0       	ldi	r24, 0x00	; 0
    4e82:	09 df       	rcall	.-494    	; 0x4c96 <_turn_off>
    4e84:	80 e8       	ldi	r24, 0x80	; 128
    4e86:	87 b9       	out	0x07, r24	; 7
    4e88:	ff 82       	std	Y+7, r15	; 0x07
    4e8a:	ee 82       	std	Y+6, r14	; 0x06
    4e8c:	87 e0       	ldi	r24, 0x07	; 7
    4e8e:	88 87       	std	Y+8, r24	; 0x08
    4e90:	19 86       	std	Y+9, r1	; 0x09
    4e92:	1a 87       	std	Y+10, r17	; 0x0a
    4e94:	81 e0       	ldi	r24, 0x01	; 1
    4e96:	ff de       	rcall	.-514    	; 0x4c96 <_turn_off>
    4e98:	80 e2       	ldi	r24, 0x20	; 32
    4e9a:	83 bb       	out	0x13, r24	; 19
    4e9c:	84 e3       	ldi	r24, 0x34	; 52
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	9d 87       	std	Y+13, r25	; 0x0d
    4ea2:	8c 87       	std	Y+12, r24	; 0x0c
    4ea4:	85 e0       	ldi	r24, 0x05	; 5
    4ea6:	8e 87       	std	Y+14, r24	; 0x0e
    4ea8:	1f 86       	std	Y+15, r1	; 0x0f
    4eaa:	18 8b       	std	Y+16, r17	; 0x10
    4eac:	82 e0       	ldi	r24, 0x02	; 2
    4eae:	f3 de       	rcall	.-538    	; 0x4c96 <_turn_off>
    4eb0:	80 e1       	ldi	r24, 0x10	; 16
    4eb2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    4eb6:	82 e0       	ldi	r24, 0x02	; 2
    4eb8:	91 e0       	ldi	r25, 0x01	; 1
    4eba:	9b 8b       	std	Y+19, r25	; 0x13
    4ebc:	8a 8b       	std	Y+18, r24	; 0x12
    4ebe:	1c 8b       	std	Y+20, r17	; 0x14
    4ec0:	1d 8a       	std	Y+21, r1	; 0x15
    4ec2:	1e 8b       	std	Y+22, r17	; 0x16
    4ec4:	83 e0       	ldi	r24, 0x03	; 3
    4ec6:	e7 de       	rcall	.-562    	; 0x4c96 <_turn_off>
    4ec8:	e1 2c       	mov	r14, r1
    4eca:	f1 2c       	mov	r15, r1
    4ecc:	20 e0       	ldi	r18, 0x00	; 0
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	40 ec       	ldi	r20, 0xC0	; 192
    4ed2:	50 e0       	ldi	r21, 0x00	; 0
    4ed4:	69 e9       	ldi	r22, 0x99	; 153
    4ed6:	76 e0       	ldi	r23, 0x06	; 6
    4ed8:	83 ee       	ldi	r24, 0xE3	; 227
    4eda:	96 e2       	ldi	r25, 0x26	; 38
    4edc:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <xTaskCreate>
    4ee0:	df 91       	pop	r29
    4ee2:	cf 91       	pop	r28
    4ee4:	1f 91       	pop	r17
    4ee6:	0f 91       	pop	r16
    4ee8:	ff 90       	pop	r15
    4eea:	ef 90       	pop	r14
    4eec:	08 95       	ret

00004eee <status_leds_slowBlink>:
    4eee:	cf 93       	push	r28
    4ef0:	df 93       	push	r29
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	fc 01       	movw	r30, r24
    4ef6:	ee 0f       	add	r30, r30
    4ef8:	ff 1f       	adc	r31, r31
    4efa:	df 01       	movw	r26, r30
    4efc:	a8 0f       	add	r26, r24
    4efe:	b9 1f       	adc	r27, r25
    4f00:	aa 0f       	add	r26, r26
    4f02:	bb 1f       	adc	r27, r27
    4f04:	a5 57       	subi	r26, 0x75	; 117
    4f06:	b9 4e       	sbci	r27, 0xE9	; 233
    4f08:	cd 91       	ld	r28, X+
    4f0a:	dc 91       	ld	r29, X
    4f0c:	11 97       	sbiw	r26, 0x01	; 1
    4f0e:	48 81       	ld	r20, Y
    4f10:	21 e0       	ldi	r18, 0x01	; 1
    4f12:	30 e0       	ldi	r19, 0x00	; 0
    4f14:	12 96       	adiw	r26, 0x02	; 2
    4f16:	0c 90       	ld	r0, X
    4f18:	12 97       	sbiw	r26, 0x02	; 2
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <status_leds_slowBlink+0x32>
    4f1c:	22 0f       	add	r18, r18
    4f1e:	33 1f       	adc	r19, r19
    4f20:	0a 94       	dec	r0
    4f22:	e2 f7       	brpl	.-8      	; 0x4f1c <status_leds_slowBlink+0x2e>
    4f24:	24 27       	eor	r18, r20
    4f26:	28 83       	st	Y, r18
    4f28:	fd 01       	movw	r30, r26
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	84 83       	std	Z+4, r24	; 0x04
    4f2e:	df 91       	pop	r29
    4f30:	cf 91       	pop	r28
    4f32:	08 95       	ret

00004f34 <status_leds_fastBlink>:
    4f34:	cf 93       	push	r28
    4f36:	df 93       	push	r29
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	fc 01       	movw	r30, r24
    4f3c:	ee 0f       	add	r30, r30
    4f3e:	ff 1f       	adc	r31, r31
    4f40:	df 01       	movw	r26, r30
    4f42:	a8 0f       	add	r26, r24
    4f44:	b9 1f       	adc	r27, r25
    4f46:	aa 0f       	add	r26, r26
    4f48:	bb 1f       	adc	r27, r27
    4f4a:	a5 57       	subi	r26, 0x75	; 117
    4f4c:	b9 4e       	sbci	r27, 0xE9	; 233
    4f4e:	cd 91       	ld	r28, X+
    4f50:	dc 91       	ld	r29, X
    4f52:	11 97       	sbiw	r26, 0x01	; 1
    4f54:	48 81       	ld	r20, Y
    4f56:	21 e0       	ldi	r18, 0x01	; 1
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	12 96       	adiw	r26, 0x02	; 2
    4f5c:	0c 90       	ld	r0, X
    4f5e:	12 97       	sbiw	r26, 0x02	; 2
    4f60:	02 c0       	rjmp	.+4      	; 0x4f66 <status_leds_fastBlink+0x32>
    4f62:	22 0f       	add	r18, r18
    4f64:	33 1f       	adc	r19, r19
    4f66:	0a 94       	dec	r0
    4f68:	e2 f7       	brpl	.-8      	; 0x4f62 <status_leds_fastBlink+0x2e>
    4f6a:	24 27       	eor	r18, r20
    4f6c:	28 83       	st	Y, r18
    4f6e:	fd 01       	movw	r30, r26
    4f70:	82 e0       	ldi	r24, 0x02	; 2
    4f72:	84 83       	std	Z+4, r24	; 0x04
    4f74:	df 91       	pop	r29
    4f76:	cf 91       	pop	r28
    4f78:	08 95       	ret

00004f7a <status_leds_ledOn>:
    4f7a:	28 2f       	mov	r18, r24
    4f7c:	30 e0       	ldi	r19, 0x00	; 0
    4f7e:	f9 01       	movw	r30, r18
    4f80:	ee 0f       	add	r30, r30
    4f82:	ff 1f       	adc	r31, r31
    4f84:	e2 0f       	add	r30, r18
    4f86:	f3 1f       	adc	r31, r19
    4f88:	ee 0f       	add	r30, r30
    4f8a:	ff 1f       	adc	r31, r31
    4f8c:	e5 57       	subi	r30, 0x75	; 117
    4f8e:	f9 4e       	sbci	r31, 0xE9	; 233
    4f90:	93 e0       	ldi	r25, 0x03	; 3
    4f92:	94 83       	std	Z+4, r25	; 0x04
    4f94:	cc ce       	rjmp	.-616    	; 0x4d2e <_turn_on>
    4f96:	08 95       	ret

00004f98 <status_leds_ledOff>:
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	f9 01       	movw	r30, r18
    4f9e:	ee 0f       	add	r30, r30
    4fa0:	ff 1f       	adc	r31, r31
    4fa2:	e2 0f       	add	r30, r18
    4fa4:	f3 1f       	adc	r31, r19
    4fa6:	ee 0f       	add	r30, r30
    4fa8:	ff 1f       	adc	r31, r31
    4faa:	e5 57       	subi	r30, 0x75	; 117
    4fac:	f9 4e       	sbci	r31, 0xE9	; 233
    4fae:	94 e0       	ldi	r25, 0x04	; 4
    4fb0:	94 83       	std	Z+4, r25	; 0x04
    4fb2:	71 ce       	rjmp	.-798    	; 0x4c96 <_turn_off>
    4fb4:	08 95       	ret

00004fb6 <status_leds_longPuls>:
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	fc 01       	movw	r30, r24
    4fba:	ee 0f       	add	r30, r30
    4fbc:	ff 1f       	adc	r31, r31
    4fbe:	df 01       	movw	r26, r30
    4fc0:	a8 0f       	add	r26, r24
    4fc2:	b9 1f       	adc	r27, r25
    4fc4:	aa 0f       	add	r26, r26
    4fc6:	bb 1f       	adc	r27, r27
    4fc8:	a5 57       	subi	r26, 0x75	; 117
    4fca:	b9 4e       	sbci	r27, 0xE9	; 233
    4fcc:	26 e0       	ldi	r18, 0x06	; 6
    4fce:	15 96       	adiw	r26, 0x05	; 5
    4fd0:	2c 93       	st	X, r18
    4fd2:	15 97       	sbiw	r26, 0x05	; 5
    4fd4:	fd 01       	movw	r30, r26
    4fd6:	14 82       	std	Z+4, r1	; 0x04
    4fd8:	08 95       	ret

00004fda <status_leds_shortPuls>:
    4fda:	90 e0       	ldi	r25, 0x00	; 0
    4fdc:	fc 01       	movw	r30, r24
    4fde:	ee 0f       	add	r30, r30
    4fe0:	ff 1f       	adc	r31, r31
    4fe2:	df 01       	movw	r26, r30
    4fe4:	a8 0f       	add	r26, r24
    4fe6:	b9 1f       	adc	r27, r25
    4fe8:	aa 0f       	add	r26, r26
    4fea:	bb 1f       	adc	r27, r27
    4fec:	a5 57       	subi	r26, 0x75	; 117
    4fee:	b9 4e       	sbci	r27, 0xE9	; 233
    4ff0:	15 96       	adiw	r26, 0x05	; 5
    4ff2:	1c 92       	st	X, r1
    4ff4:	15 97       	sbiw	r26, 0x05	; 5
    4ff6:	fd 01       	movw	r30, r26
    4ff8:	14 82       	std	Z+4, r1	; 0x04
    4ffa:	08 95       	ret

00004ffc <_initTwiInterface>:
    4ffc:	80 91 b1 16 	lds	r24, 0x16B1	; 0x8016b1 <_twiIsInitiated>
    5000:	81 11       	cpse	r24, r1
    5002:	0c c0       	rjmp	.+24     	; 0x501c <_initTwiInterface+0x20>
    5004:	8c e0       	ldi	r24, 0x0C	; 12
    5006:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    500a:	8f ef       	ldi	r24, 0xFF	; 255
    500c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5010:	84 e0       	ldi	r24, 0x04	; 4
    5012:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	80 93 b1 16 	sts	0x16B1, r24	; 0x8016b1 <_twiIsInitiated>
    501c:	08 95       	ret

0000501e <twiCreate>:
    501e:	af 92       	push	r10
    5020:	bf 92       	push	r11
    5022:	cf 92       	push	r12
    5024:	df 92       	push	r13
    5026:	ef 92       	push	r14
    5028:	ff 92       	push	r15
    502a:	0f 93       	push	r16
    502c:	1f 93       	push	r17
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
    5032:	a8 2e       	mov	r10, r24
    5034:	b6 2e       	mov	r11, r22
    5036:	69 01       	movw	r12, r18
    5038:	7a 01       	movw	r14, r20
    503a:	84 e0       	ldi	r24, 0x04	; 4
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	9c d5       	rcall	.+2872   	; 0x5b78 <malloc>
    5040:	ec 01       	movw	r28, r24
    5042:	89 2b       	or	r24, r25
    5044:	61 f1       	breq	.+88     	; 0x509e <twiCreate+0x80>
    5046:	a8 82       	st	Y, r10
    5048:	81 e0       	ldi	r24, 0x01	; 1
    504a:	b8 12       	cpse	r11, r24
    504c:	12 c0       	rjmp	.+36     	; 0x5072 <twiCreate+0x54>
    504e:	c7 01       	movw	r24, r14
    5050:	b6 01       	movw	r22, r12
    5052:	20 ea       	ldi	r18, 0xA0	; 160
    5054:	36 e8       	ldi	r19, 0x86	; 134
    5056:	41 e0       	ldi	r20, 0x01	; 1
    5058:	50 e0       	ldi	r21, 0x00	; 0
    505a:	36 d5       	rcall	.+2668   	; 0x5ac8 <__udivmodsi4>
    505c:	da 01       	movw	r26, r20
    505e:	c9 01       	movw	r24, r18
    5060:	40 97       	sbiw	r24, 0x10	; 16
    5062:	a1 09       	sbc	r26, r1
    5064:	b1 09       	sbc	r27, r1
    5066:	b6 95       	lsr	r27
    5068:	a7 95       	ror	r26
    506a:	97 95       	ror	r25
    506c:	87 95       	ror	r24
    506e:	89 83       	std	Y+1, r24	; 0x01
    5070:	11 c0       	rjmp	.+34     	; 0x5094 <twiCreate+0x76>
    5072:	c7 01       	movw	r24, r14
    5074:	b6 01       	movw	r22, r12
    5076:	20 e8       	ldi	r18, 0x80	; 128
    5078:	3a e1       	ldi	r19, 0x1A	; 26
    507a:	46 e0       	ldi	r20, 0x06	; 6
    507c:	50 e0       	ldi	r21, 0x00	; 0
    507e:	24 d5       	rcall	.+2632   	; 0x5ac8 <__udivmodsi4>
    5080:	da 01       	movw	r26, r20
    5082:	c9 01       	movw	r24, r18
    5084:	40 97       	sbiw	r24, 0x10	; 16
    5086:	a1 09       	sbc	r26, r1
    5088:	b1 09       	sbc	r27, r1
    508a:	b6 95       	lsr	r27
    508c:	a7 95       	ror	r26
    508e:	97 95       	ror	r25
    5090:	87 95       	ror	r24
    5092:	89 83       	std	Y+1, r24	; 0x01
    5094:	1b 83       	std	Y+3, r17	; 0x03
    5096:	0a 83       	std	Y+2, r16	; 0x02
    5098:	8c 2f       	mov	r24, r28
    509a:	9d 2f       	mov	r25, r29
    509c:	02 c0       	rjmp	.+4      	; 0x50a2 <twiCreate+0x84>
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	df 91       	pop	r29
    50a4:	cf 91       	pop	r28
    50a6:	1f 91       	pop	r17
    50a8:	0f 91       	pop	r16
    50aa:	ff 90       	pop	r15
    50ac:	ef 90       	pop	r14
    50ae:	df 90       	pop	r13
    50b0:	cf 90       	pop	r12
    50b2:	bf 90       	pop	r11
    50b4:	af 90       	pop	r10
    50b6:	08 95       	ret

000050b8 <twiIsBusy>:
    50b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    50bc:	81 70       	andi	r24, 0x01	; 1
    50be:	08 95       	ret

000050c0 <twiTransmit>:
    50c0:	ff 92       	push	r15
    50c2:	0f 93       	push	r16
    50c4:	1f 93       	push	r17
    50c6:	cf 93       	push	r28
    50c8:	df 93       	push	r29
    50ca:	00 97       	sbiw	r24, 0x00	; 0
    50cc:	d1 f1       	breq	.+116    	; 0x5142 <twiTransmit+0x82>
    50ce:	4a 30       	cpi	r20, 0x0A	; 10
    50d0:	d0 f5       	brcc	.+116    	; 0x5146 <twiTransmit+0x86>
    50d2:	f4 2e       	mov	r15, r20
    50d4:	8b 01       	movw	r16, r22
    50d6:	ec 01       	movw	r28, r24
    50d8:	ef df       	rcall	.-34     	; 0x50b8 <twiIsBusy>
    50da:	81 11       	cpse	r24, r1
    50dc:	36 c0       	rjmp	.+108    	; 0x514a <twiTransmit+0x8a>
    50de:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <_twiCurrentHandler>
    50e2:	90 91 a5 16 	lds	r25, 0x16A5	; 0x8016a5 <_twiCurrentHandler+0x1>
    50e6:	c8 17       	cp	r28, r24
    50e8:	d9 07       	cpc	r29, r25
    50ea:	41 f0       	breq	.+16     	; 0x50fc <twiTransmit+0x3c>
    50ec:	87 df       	rcall	.-242    	; 0x4ffc <_initTwiInterface>
    50ee:	89 81       	ldd	r24, Y+1	; 0x01
    50f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    50f4:	d0 93 a5 16 	sts	0x16A5, r29	; 0x8016a5 <_twiCurrentHandler+0x1>
    50f8:	c0 93 a4 16 	sts	0x16A4, r28	; 0x8016a4 <_twiCurrentHandler>
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	8f 0d       	add	r24, r15
    5100:	80 93 a6 16 	sts	0x16A6, r24	; 0x8016a6 <_twiMessageLen>
    5104:	88 81       	ld	r24, Y
    5106:	88 0f       	add	r24, r24
    5108:	80 93 a7 16 	sts	0x16A7, r24	; 0x8016a7 <_twiMessageBuffer>
    510c:	ff 20       	and	r15, r15
    510e:	89 f0       	breq	.+34     	; 0x5132 <twiTransmit+0x72>
    5110:	f8 01       	movw	r30, r16
    5112:	a8 ea       	ldi	r26, 0xA8	; 168
    5114:	b6 e1       	ldi	r27, 0x16	; 22
    5116:	4f ef       	ldi	r20, 0xFF	; 255
    5118:	4f 0d       	add	r20, r15
    511a:	64 2f       	mov	r22, r20
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	cb 01       	movw	r24, r22
    5120:	01 96       	adiw	r24, 0x01	; 1
    5122:	b8 01       	movw	r22, r16
    5124:	68 0f       	add	r22, r24
    5126:	79 1f       	adc	r23, r25
    5128:	81 91       	ld	r24, Z+
    512a:	8d 93       	st	X+, r24
    512c:	e6 17       	cp	r30, r22
    512e:	f7 07       	cpc	r31, r23
    5130:	d9 f7       	brne	.-10     	; 0x5128 <twiTransmit+0x68>
    5132:	88 ef       	ldi	r24, 0xF8	; 248
    5134:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5138:	85 ea       	ldi	r24, 0xA5	; 165
    513a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    513e:	84 e0       	ldi	r24, 0x04	; 4
    5140:	05 c0       	rjmp	.+10     	; 0x514c <twiTransmit+0x8c>
    5142:	86 e0       	ldi	r24, 0x06	; 6
    5144:	03 c0       	rjmp	.+6      	; 0x514c <twiTransmit+0x8c>
    5146:	87 e0       	ldi	r24, 0x07	; 7
    5148:	01 c0       	rjmp	.+2      	; 0x514c <twiTransmit+0x8c>
    514a:	82 e0       	ldi	r24, 0x02	; 2
    514c:	df 91       	pop	r29
    514e:	cf 91       	pop	r28
    5150:	1f 91       	pop	r17
    5152:	0f 91       	pop	r16
    5154:	ff 90       	pop	r15
    5156:	08 95       	ret

00005158 <twiReceive>:
    5158:	1f 93       	push	r17
    515a:	cf 93       	push	r28
    515c:	df 93       	push	r29
    515e:	00 97       	sbiw	r24, 0x00	; 0
    5160:	29 f1       	breq	.+74     	; 0x51ac <twiReceive+0x54>
    5162:	6b 30       	cpi	r22, 0x0B	; 11
    5164:	28 f5       	brcc	.+74     	; 0x51b0 <twiReceive+0x58>
    5166:	16 2f       	mov	r17, r22
    5168:	ec 01       	movw	r28, r24
    516a:	a6 df       	rcall	.-180    	; 0x50b8 <twiIsBusy>
    516c:	81 11       	cpse	r24, r1
    516e:	22 c0       	rjmp	.+68     	; 0x51b4 <twiReceive+0x5c>
    5170:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <_twiCurrentHandler>
    5174:	90 91 a5 16 	lds	r25, 0x16A5	; 0x8016a5 <_twiCurrentHandler+0x1>
    5178:	c8 17       	cp	r28, r24
    517a:	d9 07       	cpc	r29, r25
    517c:	41 f0       	breq	.+16     	; 0x518e <twiReceive+0x36>
    517e:	3e df       	rcall	.-388    	; 0x4ffc <_initTwiInterface>
    5180:	89 81       	ldd	r24, Y+1	; 0x01
    5182:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5186:	d0 93 a5 16 	sts	0x16A5, r29	; 0x8016a5 <_twiCurrentHandler+0x1>
    518a:	c0 93 a4 16 	sts	0x16A4, r28	; 0x8016a4 <_twiCurrentHandler>
    518e:	10 93 a6 16 	sts	0x16A6, r17	; 0x8016a6 <_twiMessageLen>
    5192:	88 81       	ld	r24, Y
    5194:	88 0f       	add	r24, r24
    5196:	81 60       	ori	r24, 0x01	; 1
    5198:	80 93 a7 16 	sts	0x16A7, r24	; 0x8016a7 <_twiMessageBuffer>
    519c:	88 ef       	ldi	r24, 0xF8	; 248
    519e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    51a2:	85 ea       	ldi	r24, 0xA5	; 165
    51a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    51a8:	85 e0       	ldi	r24, 0x05	; 5
    51aa:	05 c0       	rjmp	.+10     	; 0x51b6 <twiReceive+0x5e>
    51ac:	86 e0       	ldi	r24, 0x06	; 6
    51ae:	03 c0       	rjmp	.+6      	; 0x51b6 <twiReceive+0x5e>
    51b0:	87 e0       	ldi	r24, 0x07	; 7
    51b2:	01 c0       	rjmp	.+2      	; 0x51b6 <twiReceive+0x5e>
    51b4:	82 e0       	ldi	r24, 0x02	; 2
    51b6:	df 91       	pop	r29
    51b8:	cf 91       	pop	r28
    51ba:	1f 91       	pop	r17
    51bc:	08 95       	ret

000051be <__vector_39>:
    51be:	1f 92       	push	r1
    51c0:	0f 92       	push	r0
    51c2:	0f b6       	in	r0, 0x3f	; 63
    51c4:	0f 92       	push	r0
    51c6:	11 24       	eor	r1, r1
    51c8:	0b b6       	in	r0, 0x3b	; 59
    51ca:	0f 92       	push	r0
    51cc:	2f 93       	push	r18
    51ce:	3f 93       	push	r19
    51d0:	4f 93       	push	r20
    51d2:	5f 93       	push	r21
    51d4:	6f 93       	push	r22
    51d6:	7f 93       	push	r23
    51d8:	8f 93       	push	r24
    51da:	9f 93       	push	r25
    51dc:	af 93       	push	r26
    51de:	bf 93       	push	r27
    51e0:	ef 93       	push	r30
    51e2:	ff 93       	push	r31
    51e4:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    51e8:	8e 2f       	mov	r24, r30
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	fc 01       	movw	r30, r24
    51ee:	38 97       	sbiw	r30, 0x08	; 8
    51f0:	e1 35       	cpi	r30, 0x51	; 81
    51f2:	f1 05       	cpc	r31, r1
    51f4:	08 f0       	brcs	.+2      	; 0x51f8 <__vector_39+0x3a>
    51f6:	75 c0       	rjmp	.+234    	; 0x52e2 <__vector_39+0x124>
    51f8:	88 27       	eor	r24, r24
    51fa:	e4 58       	subi	r30, 0x84	; 132
    51fc:	ff 4f       	sbci	r31, 0xFF	; 255
    51fe:	8f 4f       	sbci	r24, 0xFF	; 255
    5200:	85 c4       	rjmp	.+2314   	; 0x5b0c <__tablejump2__>
    5202:	10 92 a3 16 	sts	0x16A3, r1	; 0x8016a3 <_index.1885>
    5206:	e0 91 a3 16 	lds	r30, 0x16A3	; 0x8016a3 <_index.1885>
    520a:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <_twiMessageLen>
    520e:	e8 17       	cp	r30, r24
    5210:	70 f4       	brcc	.+28     	; 0x522e <__vector_39+0x70>
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	8e 0f       	add	r24, r30
    5216:	80 93 a3 16 	sts	0x16A3, r24	; 0x8016a3 <_index.1885>
    521a:	f0 e0       	ldi	r31, 0x00	; 0
    521c:	e9 55       	subi	r30, 0x59	; 89
    521e:	f9 4e       	sbci	r31, 0xE9	; 233
    5220:	80 81       	ld	r24, Z
    5222:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5226:	85 e8       	ldi	r24, 0x85	; 133
    5228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    522c:	72 c0       	rjmp	.+228    	; 0x5312 <__vector_39+0x154>
    522e:	84 e9       	ldi	r24, 0x94	; 148
    5230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5234:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <_twiCurrentHandler>
    5238:	90 91 a5 16 	lds	r25, 0x16A5	; 0x8016a5 <_twiCurrentHandler+0x1>
    523c:	dc 01       	movw	r26, r24
    523e:	12 96       	adiw	r26, 0x02	; 2
    5240:	ed 91       	ld	r30, X+
    5242:	fc 91       	ld	r31, X
    5244:	13 97       	sbiw	r26, 0x03	; 3
    5246:	30 97       	sbiw	r30, 0x00	; 0
    5248:	09 f4       	brne	.+2      	; 0x524c <__vector_39+0x8e>
    524a:	63 c0       	rjmp	.+198    	; 0x5312 <__vector_39+0x154>
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	40 e0       	ldi	r20, 0x00	; 0
    5250:	50 e0       	ldi	r21, 0x00	; 0
    5252:	64 e0       	ldi	r22, 0x04	; 4
    5254:	19 95       	eicall
    5256:	5d c0       	rjmp	.+186    	; 0x5312 <__vector_39+0x154>
    5258:	e0 91 a3 16 	lds	r30, 0x16A3	; 0x8016a3 <_index.1885>
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	8e 0f       	add	r24, r30
    5260:	80 93 a3 16 	sts	0x16A3, r24	; 0x8016a3 <_index.1885>
    5264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5268:	f0 e0       	ldi	r31, 0x00	; 0
    526a:	e9 55       	subi	r30, 0x59	; 89
    526c:	f9 4e       	sbci	r31, 0xE9	; 233
    526e:	80 83       	st	Z, r24
    5270:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5274:	80 34       	cpi	r24, 0x40	; 64
    5276:	11 f4       	brne	.+4      	; 0x527c <__vector_39+0xbe>
    5278:	10 92 a3 16 	sts	0x16A3, r1	; 0x8016a3 <_index.1885>
    527c:	20 91 a3 16 	lds	r18, 0x16A3	; 0x8016a3 <_index.1885>
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	80 91 a6 16 	lds	r24, 0x16A6	; 0x8016a6 <_twiMessageLen>
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	28 17       	cp	r18, r24
    528c:	39 07       	cpc	r19, r25
    528e:	24 f4       	brge	.+8      	; 0x5298 <__vector_39+0xda>
    5290:	85 ec       	ldi	r24, 0xC5	; 197
    5292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5296:	3d c0       	rjmp	.+122    	; 0x5312 <__vector_39+0x154>
    5298:	85 e8       	ldi	r24, 0x85	; 133
    529a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    529e:	39 c0       	rjmp	.+114    	; 0x5312 <__vector_39+0x154>
    52a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    52a4:	e0 91 a3 16 	lds	r30, 0x16A3	; 0x8016a3 <_index.1885>
    52a8:	f0 e0       	ldi	r31, 0x00	; 0
    52aa:	e9 55       	subi	r30, 0x59	; 89
    52ac:	f9 4e       	sbci	r31, 0xE9	; 233
    52ae:	80 83       	st	Z, r24
    52b0:	84 e9       	ldi	r24, 0x94	; 148
    52b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52b6:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <_twiCurrentHandler>
    52ba:	90 91 a5 16 	lds	r25, 0x16A5	; 0x8016a5 <_twiCurrentHandler+0x1>
    52be:	dc 01       	movw	r26, r24
    52c0:	12 96       	adiw	r26, 0x02	; 2
    52c2:	ed 91       	ld	r30, X+
    52c4:	fc 91       	ld	r31, X
    52c6:	13 97       	sbiw	r26, 0x03	; 3
    52c8:	30 97       	sbiw	r30, 0x00	; 0
    52ca:	19 f1       	breq	.+70     	; 0x5312 <__vector_39+0x154>
    52cc:	20 91 a6 16 	lds	r18, 0x16A6	; 0x8016a6 <_twiMessageLen>
    52d0:	47 ea       	ldi	r20, 0xA7	; 167
    52d2:	56 e1       	ldi	r21, 0x16	; 22
    52d4:	65 e0       	ldi	r22, 0x05	; 5
    52d6:	19 95       	eicall
    52d8:	1c c0       	rjmp	.+56     	; 0x5312 <__vector_39+0x154>
    52da:	85 ea       	ldi	r24, 0xA5	; 165
    52dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52e0:	18 c0       	rjmp	.+48     	; 0x5312 <__vector_39+0x154>
    52e2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    52e6:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    52ea:	84 e0       	ldi	r24, 0x04	; 4
    52ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    52f0:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <_twiCurrentHandler>
    52f4:	90 91 a5 16 	lds	r25, 0x16A5	; 0x8016a5 <_twiCurrentHandler+0x1>
    52f8:	dc 01       	movw	r26, r24
    52fa:	12 96       	adiw	r26, 0x02	; 2
    52fc:	ed 91       	ld	r30, X+
    52fe:	fc 91       	ld	r31, X
    5300:	13 97       	sbiw	r26, 0x03	; 3
    5302:	30 97       	sbiw	r30, 0x00	; 0
    5304:	31 f0       	breq	.+12     	; 0x5312 <__vector_39+0x154>
    5306:	20 e0       	ldi	r18, 0x00	; 0
    5308:	40 e0       	ldi	r20, 0x00	; 0
    530a:	50 e0       	ldi	r21, 0x00	; 0
    530c:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5310:	19 95       	eicall
    5312:	ff 91       	pop	r31
    5314:	ef 91       	pop	r30
    5316:	bf 91       	pop	r27
    5318:	af 91       	pop	r26
    531a:	9f 91       	pop	r25
    531c:	8f 91       	pop	r24
    531e:	7f 91       	pop	r23
    5320:	6f 91       	pop	r22
    5322:	5f 91       	pop	r21
    5324:	4f 91       	pop	r20
    5326:	3f 91       	pop	r19
    5328:	2f 91       	pop	r18
    532a:	0f 90       	pop	r0
    532c:	0b be       	out	0x3b, r0	; 59
    532e:	0f 90       	pop	r0
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	0f 90       	pop	r0
    5334:	1f 90       	pop	r1
    5336:	18 95       	reti

00005338 <fifo_init>:
    5338:	fc 01       	movw	r30, r24
    533a:	41 11       	cpse	r20, r1
    533c:	01 c0       	rjmp	.+2      	; 0x5340 <fifo_init+0x8>
    533e:	3d d5       	rcall	.+2682   	; 0x5dba <abort>
    5340:	84 2f       	mov	r24, r20
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	9c 01       	movw	r18, r24
    5346:	21 50       	subi	r18, 0x01	; 1
    5348:	31 09       	sbc	r19, r1
    534a:	82 23       	and	r24, r18
    534c:	93 23       	and	r25, r19
    534e:	89 2b       	or	r24, r25
    5350:	09 f0       	breq	.+2      	; 0x5354 <fifo_init+0x1c>
    5352:	33 d5       	rcall	.+2662   	; 0x5dba <abort>
    5354:	41 38       	cpi	r20, 0x81	; 129
    5356:	08 f0       	brcs	.+2      	; 0x535a <fifo_init+0x22>
    5358:	30 d5       	rcall	.+2656   	; 0x5dba <abort>
    535a:	12 82       	std	Z+2, r1	; 0x02
    535c:	13 82       	std	Z+3, r1	; 0x03
    535e:	44 83       	std	Z+4, r20	; 0x04
    5360:	44 0f       	add	r20, r20
    5362:	41 50       	subi	r20, 0x01	; 1
    5364:	45 83       	std	Z+5, r20	; 0x05
    5366:	71 83       	std	Z+1, r23	; 0x01
    5368:	60 83       	st	Z, r22
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	08 95       	ret

00005370 <__subsf3>:
    5370:	50 58       	subi	r21, 0x80	; 128

00005372 <__addsf3>:
    5372:	bb 27       	eor	r27, r27
    5374:	aa 27       	eor	r26, r26
    5376:	0e d0       	rcall	.+28     	; 0x5394 <__addsf3x>
    5378:	89 c1       	rjmp	.+786    	; 0x568c <__fp_round>
    537a:	7a d1       	rcall	.+756    	; 0x5670 <__fp_pscA>
    537c:	30 f0       	brcs	.+12     	; 0x538a <__addsf3+0x18>
    537e:	7f d1       	rcall	.+766    	; 0x567e <__fp_pscB>
    5380:	20 f0       	brcs	.+8      	; 0x538a <__addsf3+0x18>
    5382:	31 f4       	brne	.+12     	; 0x5390 <__addsf3+0x1e>
    5384:	9f 3f       	cpi	r25, 0xFF	; 255
    5386:	11 f4       	brne	.+4      	; 0x538c <__addsf3+0x1a>
    5388:	1e f4       	brtc	.+6      	; 0x5390 <__addsf3+0x1e>
    538a:	6f c1       	rjmp	.+734    	; 0x566a <__fp_nan>
    538c:	0e f4       	brtc	.+2      	; 0x5390 <__addsf3+0x1e>
    538e:	e0 95       	com	r30
    5390:	e7 fb       	bst	r30, 7
    5392:	3c c1       	rjmp	.+632    	; 0x560c <__fp_inf>

00005394 <__addsf3x>:
    5394:	e9 2f       	mov	r30, r25
    5396:	8b d1       	rcall	.+790    	; 0x56ae <__fp_split3>
    5398:	80 f3       	brcs	.-32     	; 0x537a <__addsf3+0x8>
    539a:	ba 17       	cp	r27, r26
    539c:	62 07       	cpc	r22, r18
    539e:	73 07       	cpc	r23, r19
    53a0:	84 07       	cpc	r24, r20
    53a2:	95 07       	cpc	r25, r21
    53a4:	18 f0       	brcs	.+6      	; 0x53ac <__addsf3x+0x18>
    53a6:	71 f4       	brne	.+28     	; 0x53c4 <__addsf3x+0x30>
    53a8:	9e f5       	brtc	.+102    	; 0x5410 <__addsf3x+0x7c>
    53aa:	ba c1       	rjmp	.+884    	; 0x5720 <__fp_zero>
    53ac:	0e f4       	brtc	.+2      	; 0x53b0 <__addsf3x+0x1c>
    53ae:	e0 95       	com	r30
    53b0:	0b 2e       	mov	r0, r27
    53b2:	ba 2f       	mov	r27, r26
    53b4:	a0 2d       	mov	r26, r0
    53b6:	0b 01       	movw	r0, r22
    53b8:	b9 01       	movw	r22, r18
    53ba:	90 01       	movw	r18, r0
    53bc:	0c 01       	movw	r0, r24
    53be:	ca 01       	movw	r24, r20
    53c0:	a0 01       	movw	r20, r0
    53c2:	11 24       	eor	r1, r1
    53c4:	ff 27       	eor	r31, r31
    53c6:	59 1b       	sub	r21, r25
    53c8:	99 f0       	breq	.+38     	; 0x53f0 <__addsf3x+0x5c>
    53ca:	59 3f       	cpi	r21, 0xF9	; 249
    53cc:	50 f4       	brcc	.+20     	; 0x53e2 <__addsf3x+0x4e>
    53ce:	50 3e       	cpi	r21, 0xE0	; 224
    53d0:	68 f1       	brcs	.+90     	; 0x542c <__addsf3x+0x98>
    53d2:	1a 16       	cp	r1, r26
    53d4:	f0 40       	sbci	r31, 0x00	; 0
    53d6:	a2 2f       	mov	r26, r18
    53d8:	23 2f       	mov	r18, r19
    53da:	34 2f       	mov	r19, r20
    53dc:	44 27       	eor	r20, r20
    53de:	58 5f       	subi	r21, 0xF8	; 248
    53e0:	f3 cf       	rjmp	.-26     	; 0x53c8 <__addsf3x+0x34>
    53e2:	46 95       	lsr	r20
    53e4:	37 95       	ror	r19
    53e6:	27 95       	ror	r18
    53e8:	a7 95       	ror	r26
    53ea:	f0 40       	sbci	r31, 0x00	; 0
    53ec:	53 95       	inc	r21
    53ee:	c9 f7       	brne	.-14     	; 0x53e2 <__addsf3x+0x4e>
    53f0:	7e f4       	brtc	.+30     	; 0x5410 <__addsf3x+0x7c>
    53f2:	1f 16       	cp	r1, r31
    53f4:	ba 0b       	sbc	r27, r26
    53f6:	62 0b       	sbc	r22, r18
    53f8:	73 0b       	sbc	r23, r19
    53fa:	84 0b       	sbc	r24, r20
    53fc:	ba f0       	brmi	.+46     	; 0x542c <__addsf3x+0x98>
    53fe:	91 50       	subi	r25, 0x01	; 1
    5400:	a1 f0       	breq	.+40     	; 0x542a <__addsf3x+0x96>
    5402:	ff 0f       	add	r31, r31
    5404:	bb 1f       	adc	r27, r27
    5406:	66 1f       	adc	r22, r22
    5408:	77 1f       	adc	r23, r23
    540a:	88 1f       	adc	r24, r24
    540c:	c2 f7       	brpl	.-16     	; 0x53fe <__addsf3x+0x6a>
    540e:	0e c0       	rjmp	.+28     	; 0x542c <__addsf3x+0x98>
    5410:	ba 0f       	add	r27, r26
    5412:	62 1f       	adc	r22, r18
    5414:	73 1f       	adc	r23, r19
    5416:	84 1f       	adc	r24, r20
    5418:	48 f4       	brcc	.+18     	; 0x542c <__addsf3x+0x98>
    541a:	87 95       	ror	r24
    541c:	77 95       	ror	r23
    541e:	67 95       	ror	r22
    5420:	b7 95       	ror	r27
    5422:	f7 95       	ror	r31
    5424:	9e 3f       	cpi	r25, 0xFE	; 254
    5426:	08 f0       	brcs	.+2      	; 0x542a <__addsf3x+0x96>
    5428:	b3 cf       	rjmp	.-154    	; 0x5390 <__addsf3+0x1e>
    542a:	93 95       	inc	r25
    542c:	88 0f       	add	r24, r24
    542e:	08 f0       	brcs	.+2      	; 0x5432 <__addsf3x+0x9e>
    5430:	99 27       	eor	r25, r25
    5432:	ee 0f       	add	r30, r30
    5434:	97 95       	ror	r25
    5436:	87 95       	ror	r24
    5438:	08 95       	ret

0000543a <__divsf3>:
    543a:	0c d0       	rcall	.+24     	; 0x5454 <__divsf3x>
    543c:	27 c1       	rjmp	.+590    	; 0x568c <__fp_round>
    543e:	1f d1       	rcall	.+574    	; 0x567e <__fp_pscB>
    5440:	40 f0       	brcs	.+16     	; 0x5452 <__divsf3+0x18>
    5442:	16 d1       	rcall	.+556    	; 0x5670 <__fp_pscA>
    5444:	30 f0       	brcs	.+12     	; 0x5452 <__divsf3+0x18>
    5446:	21 f4       	brne	.+8      	; 0x5450 <__divsf3+0x16>
    5448:	5f 3f       	cpi	r21, 0xFF	; 255
    544a:	19 f0       	breq	.+6      	; 0x5452 <__divsf3+0x18>
    544c:	df c0       	rjmp	.+446    	; 0x560c <__fp_inf>
    544e:	51 11       	cpse	r21, r1
    5450:	68 c1       	rjmp	.+720    	; 0x5722 <__fp_szero>
    5452:	0b c1       	rjmp	.+534    	; 0x566a <__fp_nan>

00005454 <__divsf3x>:
    5454:	2c d1       	rcall	.+600    	; 0x56ae <__fp_split3>
    5456:	98 f3       	brcs	.-26     	; 0x543e <__divsf3+0x4>

00005458 <__divsf3_pse>:
    5458:	99 23       	and	r25, r25
    545a:	c9 f3       	breq	.-14     	; 0x544e <__divsf3+0x14>
    545c:	55 23       	and	r21, r21
    545e:	b1 f3       	breq	.-20     	; 0x544c <__divsf3+0x12>
    5460:	95 1b       	sub	r25, r21
    5462:	55 0b       	sbc	r21, r21
    5464:	bb 27       	eor	r27, r27
    5466:	aa 27       	eor	r26, r26
    5468:	62 17       	cp	r22, r18
    546a:	73 07       	cpc	r23, r19
    546c:	84 07       	cpc	r24, r20
    546e:	38 f0       	brcs	.+14     	; 0x547e <__divsf3_pse+0x26>
    5470:	9f 5f       	subi	r25, 0xFF	; 255
    5472:	5f 4f       	sbci	r21, 0xFF	; 255
    5474:	22 0f       	add	r18, r18
    5476:	33 1f       	adc	r19, r19
    5478:	44 1f       	adc	r20, r20
    547a:	aa 1f       	adc	r26, r26
    547c:	a9 f3       	breq	.-22     	; 0x5468 <__divsf3_pse+0x10>
    547e:	33 d0       	rcall	.+102    	; 0x54e6 <__divsf3_pse+0x8e>
    5480:	0e 2e       	mov	r0, r30
    5482:	3a f0       	brmi	.+14     	; 0x5492 <__divsf3_pse+0x3a>
    5484:	e0 e8       	ldi	r30, 0x80	; 128
    5486:	30 d0       	rcall	.+96     	; 0x54e8 <__divsf3_pse+0x90>
    5488:	91 50       	subi	r25, 0x01	; 1
    548a:	50 40       	sbci	r21, 0x00	; 0
    548c:	e6 95       	lsr	r30
    548e:	00 1c       	adc	r0, r0
    5490:	ca f7       	brpl	.-14     	; 0x5484 <__divsf3_pse+0x2c>
    5492:	29 d0       	rcall	.+82     	; 0x54e6 <__divsf3_pse+0x8e>
    5494:	fe 2f       	mov	r31, r30
    5496:	27 d0       	rcall	.+78     	; 0x54e6 <__divsf3_pse+0x8e>
    5498:	66 0f       	add	r22, r22
    549a:	77 1f       	adc	r23, r23
    549c:	88 1f       	adc	r24, r24
    549e:	bb 1f       	adc	r27, r27
    54a0:	26 17       	cp	r18, r22
    54a2:	37 07       	cpc	r19, r23
    54a4:	48 07       	cpc	r20, r24
    54a6:	ab 07       	cpc	r26, r27
    54a8:	b0 e8       	ldi	r27, 0x80	; 128
    54aa:	09 f0       	breq	.+2      	; 0x54ae <__divsf3_pse+0x56>
    54ac:	bb 0b       	sbc	r27, r27
    54ae:	80 2d       	mov	r24, r0
    54b0:	bf 01       	movw	r22, r30
    54b2:	ff 27       	eor	r31, r31
    54b4:	93 58       	subi	r25, 0x83	; 131
    54b6:	5f 4f       	sbci	r21, 0xFF	; 255
    54b8:	2a f0       	brmi	.+10     	; 0x54c4 <__divsf3_pse+0x6c>
    54ba:	9e 3f       	cpi	r25, 0xFE	; 254
    54bc:	51 05       	cpc	r21, r1
    54be:	68 f0       	brcs	.+26     	; 0x54da <__divsf3_pse+0x82>
    54c0:	a5 c0       	rjmp	.+330    	; 0x560c <__fp_inf>
    54c2:	2f c1       	rjmp	.+606    	; 0x5722 <__fp_szero>
    54c4:	5f 3f       	cpi	r21, 0xFF	; 255
    54c6:	ec f3       	brlt	.-6      	; 0x54c2 <__divsf3_pse+0x6a>
    54c8:	98 3e       	cpi	r25, 0xE8	; 232
    54ca:	dc f3       	brlt	.-10     	; 0x54c2 <__divsf3_pse+0x6a>
    54cc:	86 95       	lsr	r24
    54ce:	77 95       	ror	r23
    54d0:	67 95       	ror	r22
    54d2:	b7 95       	ror	r27
    54d4:	f7 95       	ror	r31
    54d6:	9f 5f       	subi	r25, 0xFF	; 255
    54d8:	c9 f7       	brne	.-14     	; 0x54cc <__divsf3_pse+0x74>
    54da:	88 0f       	add	r24, r24
    54dc:	91 1d       	adc	r25, r1
    54de:	96 95       	lsr	r25
    54e0:	87 95       	ror	r24
    54e2:	97 f9       	bld	r25, 7
    54e4:	08 95       	ret
    54e6:	e1 e0       	ldi	r30, 0x01	; 1
    54e8:	66 0f       	add	r22, r22
    54ea:	77 1f       	adc	r23, r23
    54ec:	88 1f       	adc	r24, r24
    54ee:	bb 1f       	adc	r27, r27
    54f0:	62 17       	cp	r22, r18
    54f2:	73 07       	cpc	r23, r19
    54f4:	84 07       	cpc	r24, r20
    54f6:	ba 07       	cpc	r27, r26
    54f8:	20 f0       	brcs	.+8      	; 0x5502 <__divsf3_pse+0xaa>
    54fa:	62 1b       	sub	r22, r18
    54fc:	73 0b       	sbc	r23, r19
    54fe:	84 0b       	sbc	r24, r20
    5500:	ba 0b       	sbc	r27, r26
    5502:	ee 1f       	adc	r30, r30
    5504:	88 f7       	brcc	.-30     	; 0x54e8 <__divsf3_pse+0x90>
    5506:	e0 95       	com	r30
    5508:	08 95       	ret

0000550a <__fixsfsi>:
    550a:	04 d0       	rcall	.+8      	; 0x5514 <__fixunssfsi>
    550c:	68 94       	set
    550e:	b1 11       	cpse	r27, r1
    5510:	08 c1       	rjmp	.+528    	; 0x5722 <__fp_szero>
    5512:	08 95       	ret

00005514 <__fixunssfsi>:
    5514:	d4 d0       	rcall	.+424    	; 0x56be <__fp_splitA>
    5516:	88 f0       	brcs	.+34     	; 0x553a <__fixunssfsi+0x26>
    5518:	9f 57       	subi	r25, 0x7F	; 127
    551a:	90 f0       	brcs	.+36     	; 0x5540 <__fixunssfsi+0x2c>
    551c:	b9 2f       	mov	r27, r25
    551e:	99 27       	eor	r25, r25
    5520:	b7 51       	subi	r27, 0x17	; 23
    5522:	a0 f0       	brcs	.+40     	; 0x554c <__fixunssfsi+0x38>
    5524:	d1 f0       	breq	.+52     	; 0x555a <__fixunssfsi+0x46>
    5526:	66 0f       	add	r22, r22
    5528:	77 1f       	adc	r23, r23
    552a:	88 1f       	adc	r24, r24
    552c:	99 1f       	adc	r25, r25
    552e:	1a f0       	brmi	.+6      	; 0x5536 <__fixunssfsi+0x22>
    5530:	ba 95       	dec	r27
    5532:	c9 f7       	brne	.-14     	; 0x5526 <__fixunssfsi+0x12>
    5534:	12 c0       	rjmp	.+36     	; 0x555a <__fixunssfsi+0x46>
    5536:	b1 30       	cpi	r27, 0x01	; 1
    5538:	81 f0       	breq	.+32     	; 0x555a <__fixunssfsi+0x46>
    553a:	f2 d0       	rcall	.+484    	; 0x5720 <__fp_zero>
    553c:	b1 e0       	ldi	r27, 0x01	; 1
    553e:	08 95       	ret
    5540:	ef c0       	rjmp	.+478    	; 0x5720 <__fp_zero>
    5542:	67 2f       	mov	r22, r23
    5544:	78 2f       	mov	r23, r24
    5546:	88 27       	eor	r24, r24
    5548:	b8 5f       	subi	r27, 0xF8	; 248
    554a:	39 f0       	breq	.+14     	; 0x555a <__fixunssfsi+0x46>
    554c:	b9 3f       	cpi	r27, 0xF9	; 249
    554e:	cc f3       	brlt	.-14     	; 0x5542 <__fixunssfsi+0x2e>
    5550:	86 95       	lsr	r24
    5552:	77 95       	ror	r23
    5554:	67 95       	ror	r22
    5556:	b3 95       	inc	r27
    5558:	d9 f7       	brne	.-10     	; 0x5550 <__fixunssfsi+0x3c>
    555a:	3e f4       	brtc	.+14     	; 0x556a <__fixunssfsi+0x56>
    555c:	90 95       	com	r25
    555e:	80 95       	com	r24
    5560:	70 95       	com	r23
    5562:	61 95       	neg	r22
    5564:	7f 4f       	sbci	r23, 0xFF	; 255
    5566:	8f 4f       	sbci	r24, 0xFF	; 255
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	08 95       	ret

0000556c <__floatunsisf>:
    556c:	e8 94       	clt
    556e:	09 c0       	rjmp	.+18     	; 0x5582 <__floatsisf+0x12>

00005570 <__floatsisf>:
    5570:	97 fb       	bst	r25, 7
    5572:	3e f4       	brtc	.+14     	; 0x5582 <__floatsisf+0x12>
    5574:	90 95       	com	r25
    5576:	80 95       	com	r24
    5578:	70 95       	com	r23
    557a:	61 95       	neg	r22
    557c:	7f 4f       	sbci	r23, 0xFF	; 255
    557e:	8f 4f       	sbci	r24, 0xFF	; 255
    5580:	9f 4f       	sbci	r25, 0xFF	; 255
    5582:	99 23       	and	r25, r25
    5584:	a9 f0       	breq	.+42     	; 0x55b0 <__floatsisf+0x40>
    5586:	f9 2f       	mov	r31, r25
    5588:	96 e9       	ldi	r25, 0x96	; 150
    558a:	bb 27       	eor	r27, r27
    558c:	93 95       	inc	r25
    558e:	f6 95       	lsr	r31
    5590:	87 95       	ror	r24
    5592:	77 95       	ror	r23
    5594:	67 95       	ror	r22
    5596:	b7 95       	ror	r27
    5598:	f1 11       	cpse	r31, r1
    559a:	f8 cf       	rjmp	.-16     	; 0x558c <__floatsisf+0x1c>
    559c:	fa f4       	brpl	.+62     	; 0x55dc <__floatsisf+0x6c>
    559e:	bb 0f       	add	r27, r27
    55a0:	11 f4       	brne	.+4      	; 0x55a6 <__floatsisf+0x36>
    55a2:	60 ff       	sbrs	r22, 0
    55a4:	1b c0       	rjmp	.+54     	; 0x55dc <__floatsisf+0x6c>
    55a6:	6f 5f       	subi	r22, 0xFF	; 255
    55a8:	7f 4f       	sbci	r23, 0xFF	; 255
    55aa:	8f 4f       	sbci	r24, 0xFF	; 255
    55ac:	9f 4f       	sbci	r25, 0xFF	; 255
    55ae:	16 c0       	rjmp	.+44     	; 0x55dc <__floatsisf+0x6c>
    55b0:	88 23       	and	r24, r24
    55b2:	11 f0       	breq	.+4      	; 0x55b8 <__floatsisf+0x48>
    55b4:	96 e9       	ldi	r25, 0x96	; 150
    55b6:	11 c0       	rjmp	.+34     	; 0x55da <__floatsisf+0x6a>
    55b8:	77 23       	and	r23, r23
    55ba:	21 f0       	breq	.+8      	; 0x55c4 <__floatsisf+0x54>
    55bc:	9e e8       	ldi	r25, 0x8E	; 142
    55be:	87 2f       	mov	r24, r23
    55c0:	76 2f       	mov	r23, r22
    55c2:	05 c0       	rjmp	.+10     	; 0x55ce <__floatsisf+0x5e>
    55c4:	66 23       	and	r22, r22
    55c6:	71 f0       	breq	.+28     	; 0x55e4 <__floatsisf+0x74>
    55c8:	96 e8       	ldi	r25, 0x86	; 134
    55ca:	86 2f       	mov	r24, r22
    55cc:	70 e0       	ldi	r23, 0x00	; 0
    55ce:	60 e0       	ldi	r22, 0x00	; 0
    55d0:	2a f0       	brmi	.+10     	; 0x55dc <__floatsisf+0x6c>
    55d2:	9a 95       	dec	r25
    55d4:	66 0f       	add	r22, r22
    55d6:	77 1f       	adc	r23, r23
    55d8:	88 1f       	adc	r24, r24
    55da:	da f7       	brpl	.-10     	; 0x55d2 <__floatsisf+0x62>
    55dc:	88 0f       	add	r24, r24
    55de:	96 95       	lsr	r25
    55e0:	87 95       	ror	r24
    55e2:	97 f9       	bld	r25, 7
    55e4:	08 95       	ret

000055e6 <floor>:
    55e6:	85 d0       	rcall	.+266    	; 0x56f2 <__fp_trunc>
    55e8:	80 f0       	brcs	.+32     	; 0x560a <floor+0x24>
    55ea:	9f 37       	cpi	r25, 0x7F	; 127
    55ec:	40 f4       	brcc	.+16     	; 0x55fe <floor+0x18>
    55ee:	91 11       	cpse	r25, r1
    55f0:	0e f0       	brts	.+2      	; 0x55f4 <floor+0xe>
    55f2:	97 c0       	rjmp	.+302    	; 0x5722 <__fp_szero>
    55f4:	60 e0       	ldi	r22, 0x00	; 0
    55f6:	70 e0       	ldi	r23, 0x00	; 0
    55f8:	80 e8       	ldi	r24, 0x80	; 128
    55fa:	9f eb       	ldi	r25, 0xBF	; 191
    55fc:	08 95       	ret
    55fe:	26 f4       	brtc	.+8      	; 0x5608 <floor+0x22>
    5600:	1b 16       	cp	r1, r27
    5602:	61 1d       	adc	r22, r1
    5604:	71 1d       	adc	r23, r1
    5606:	81 1d       	adc	r24, r1
    5608:	07 c0       	rjmp	.+14     	; 0x5618 <__fp_mintl>
    560a:	21 c0       	rjmp	.+66     	; 0x564e <__fp_mpack>

0000560c <__fp_inf>:
    560c:	97 f9       	bld	r25, 7
    560e:	9f 67       	ori	r25, 0x7F	; 127
    5610:	80 e8       	ldi	r24, 0x80	; 128
    5612:	70 e0       	ldi	r23, 0x00	; 0
    5614:	60 e0       	ldi	r22, 0x00	; 0
    5616:	08 95       	ret

00005618 <__fp_mintl>:
    5618:	88 23       	and	r24, r24
    561a:	71 f4       	brne	.+28     	; 0x5638 <__fp_mintl+0x20>
    561c:	77 23       	and	r23, r23
    561e:	21 f0       	breq	.+8      	; 0x5628 <__fp_mintl+0x10>
    5620:	98 50       	subi	r25, 0x08	; 8
    5622:	87 2b       	or	r24, r23
    5624:	76 2f       	mov	r23, r22
    5626:	07 c0       	rjmp	.+14     	; 0x5636 <__fp_mintl+0x1e>
    5628:	66 23       	and	r22, r22
    562a:	11 f4       	brne	.+4      	; 0x5630 <__fp_mintl+0x18>
    562c:	99 27       	eor	r25, r25
    562e:	0d c0       	rjmp	.+26     	; 0x564a <__fp_mintl+0x32>
    5630:	90 51       	subi	r25, 0x10	; 16
    5632:	86 2b       	or	r24, r22
    5634:	70 e0       	ldi	r23, 0x00	; 0
    5636:	60 e0       	ldi	r22, 0x00	; 0
    5638:	2a f0       	brmi	.+10     	; 0x5644 <__fp_mintl+0x2c>
    563a:	9a 95       	dec	r25
    563c:	66 0f       	add	r22, r22
    563e:	77 1f       	adc	r23, r23
    5640:	88 1f       	adc	r24, r24
    5642:	da f7       	brpl	.-10     	; 0x563a <__fp_mintl+0x22>
    5644:	88 0f       	add	r24, r24
    5646:	96 95       	lsr	r25
    5648:	87 95       	ror	r24
    564a:	97 f9       	bld	r25, 7
    564c:	08 95       	ret

0000564e <__fp_mpack>:
    564e:	9f 3f       	cpi	r25, 0xFF	; 255
    5650:	31 f0       	breq	.+12     	; 0x565e <__fp_mpack_finite+0xc>

00005652 <__fp_mpack_finite>:
    5652:	91 50       	subi	r25, 0x01	; 1
    5654:	20 f4       	brcc	.+8      	; 0x565e <__fp_mpack_finite+0xc>
    5656:	87 95       	ror	r24
    5658:	77 95       	ror	r23
    565a:	67 95       	ror	r22
    565c:	b7 95       	ror	r27
    565e:	88 0f       	add	r24, r24
    5660:	91 1d       	adc	r25, r1
    5662:	96 95       	lsr	r25
    5664:	87 95       	ror	r24
    5666:	97 f9       	bld	r25, 7
    5668:	08 95       	ret

0000566a <__fp_nan>:
    566a:	9f ef       	ldi	r25, 0xFF	; 255
    566c:	80 ec       	ldi	r24, 0xC0	; 192
    566e:	08 95       	ret

00005670 <__fp_pscA>:
    5670:	00 24       	eor	r0, r0
    5672:	0a 94       	dec	r0
    5674:	16 16       	cp	r1, r22
    5676:	17 06       	cpc	r1, r23
    5678:	18 06       	cpc	r1, r24
    567a:	09 06       	cpc	r0, r25
    567c:	08 95       	ret

0000567e <__fp_pscB>:
    567e:	00 24       	eor	r0, r0
    5680:	0a 94       	dec	r0
    5682:	12 16       	cp	r1, r18
    5684:	13 06       	cpc	r1, r19
    5686:	14 06       	cpc	r1, r20
    5688:	05 06       	cpc	r0, r21
    568a:	08 95       	ret

0000568c <__fp_round>:
    568c:	09 2e       	mov	r0, r25
    568e:	03 94       	inc	r0
    5690:	00 0c       	add	r0, r0
    5692:	11 f4       	brne	.+4      	; 0x5698 <__fp_round+0xc>
    5694:	88 23       	and	r24, r24
    5696:	52 f0       	brmi	.+20     	; 0x56ac <__fp_round+0x20>
    5698:	bb 0f       	add	r27, r27
    569a:	40 f4       	brcc	.+16     	; 0x56ac <__fp_round+0x20>
    569c:	bf 2b       	or	r27, r31
    569e:	11 f4       	brne	.+4      	; 0x56a4 <__fp_round+0x18>
    56a0:	60 ff       	sbrs	r22, 0
    56a2:	04 c0       	rjmp	.+8      	; 0x56ac <__fp_round+0x20>
    56a4:	6f 5f       	subi	r22, 0xFF	; 255
    56a6:	7f 4f       	sbci	r23, 0xFF	; 255
    56a8:	8f 4f       	sbci	r24, 0xFF	; 255
    56aa:	9f 4f       	sbci	r25, 0xFF	; 255
    56ac:	08 95       	ret

000056ae <__fp_split3>:
    56ae:	57 fd       	sbrc	r21, 7
    56b0:	90 58       	subi	r25, 0x80	; 128
    56b2:	44 0f       	add	r20, r20
    56b4:	55 1f       	adc	r21, r21
    56b6:	59 f0       	breq	.+22     	; 0x56ce <__fp_splitA+0x10>
    56b8:	5f 3f       	cpi	r21, 0xFF	; 255
    56ba:	71 f0       	breq	.+28     	; 0x56d8 <__fp_splitA+0x1a>
    56bc:	47 95       	ror	r20

000056be <__fp_splitA>:
    56be:	88 0f       	add	r24, r24
    56c0:	97 fb       	bst	r25, 7
    56c2:	99 1f       	adc	r25, r25
    56c4:	61 f0       	breq	.+24     	; 0x56de <__fp_splitA+0x20>
    56c6:	9f 3f       	cpi	r25, 0xFF	; 255
    56c8:	79 f0       	breq	.+30     	; 0x56e8 <__fp_splitA+0x2a>
    56ca:	87 95       	ror	r24
    56cc:	08 95       	ret
    56ce:	12 16       	cp	r1, r18
    56d0:	13 06       	cpc	r1, r19
    56d2:	14 06       	cpc	r1, r20
    56d4:	55 1f       	adc	r21, r21
    56d6:	f2 cf       	rjmp	.-28     	; 0x56bc <__fp_split3+0xe>
    56d8:	46 95       	lsr	r20
    56da:	f1 df       	rcall	.-30     	; 0x56be <__fp_splitA>
    56dc:	08 c0       	rjmp	.+16     	; 0x56ee <__fp_splitA+0x30>
    56de:	16 16       	cp	r1, r22
    56e0:	17 06       	cpc	r1, r23
    56e2:	18 06       	cpc	r1, r24
    56e4:	99 1f       	adc	r25, r25
    56e6:	f1 cf       	rjmp	.-30     	; 0x56ca <__fp_splitA+0xc>
    56e8:	86 95       	lsr	r24
    56ea:	71 05       	cpc	r23, r1
    56ec:	61 05       	cpc	r22, r1
    56ee:	08 94       	sec
    56f0:	08 95       	ret

000056f2 <__fp_trunc>:
    56f2:	e5 df       	rcall	.-54     	; 0x56be <__fp_splitA>
    56f4:	a0 f0       	brcs	.+40     	; 0x571e <__fp_trunc+0x2c>
    56f6:	be e7       	ldi	r27, 0x7E	; 126
    56f8:	b9 17       	cp	r27, r25
    56fa:	88 f4       	brcc	.+34     	; 0x571e <__fp_trunc+0x2c>
    56fc:	bb 27       	eor	r27, r27
    56fe:	9f 38       	cpi	r25, 0x8F	; 143
    5700:	60 f4       	brcc	.+24     	; 0x571a <__fp_trunc+0x28>
    5702:	16 16       	cp	r1, r22
    5704:	b1 1d       	adc	r27, r1
    5706:	67 2f       	mov	r22, r23
    5708:	78 2f       	mov	r23, r24
    570a:	88 27       	eor	r24, r24
    570c:	98 5f       	subi	r25, 0xF8	; 248
    570e:	f7 cf       	rjmp	.-18     	; 0x56fe <__fp_trunc+0xc>
    5710:	86 95       	lsr	r24
    5712:	77 95       	ror	r23
    5714:	67 95       	ror	r22
    5716:	b1 1d       	adc	r27, r1
    5718:	93 95       	inc	r25
    571a:	96 39       	cpi	r25, 0x96	; 150
    571c:	c8 f3       	brcs	.-14     	; 0x5710 <__fp_trunc+0x1e>
    571e:	08 95       	ret

00005720 <__fp_zero>:
    5720:	e8 94       	clt

00005722 <__fp_szero>:
    5722:	bb 27       	eor	r27, r27
    5724:	66 27       	eor	r22, r22
    5726:	77 27       	eor	r23, r23
    5728:	cb 01       	movw	r24, r22
    572a:	97 f9       	bld	r25, 7
    572c:	08 95       	ret

0000572e <__mulsf3>:
    572e:	0b d0       	rcall	.+22     	; 0x5746 <__mulsf3x>
    5730:	ad cf       	rjmp	.-166    	; 0x568c <__fp_round>
    5732:	9e df       	rcall	.-196    	; 0x5670 <__fp_pscA>
    5734:	28 f0       	brcs	.+10     	; 0x5740 <__mulsf3+0x12>
    5736:	a3 df       	rcall	.-186    	; 0x567e <__fp_pscB>
    5738:	18 f0       	brcs	.+6      	; 0x5740 <__mulsf3+0x12>
    573a:	95 23       	and	r25, r21
    573c:	09 f0       	breq	.+2      	; 0x5740 <__mulsf3+0x12>
    573e:	66 cf       	rjmp	.-308    	; 0x560c <__fp_inf>
    5740:	94 cf       	rjmp	.-216    	; 0x566a <__fp_nan>
    5742:	11 24       	eor	r1, r1
    5744:	ee cf       	rjmp	.-36     	; 0x5722 <__fp_szero>

00005746 <__mulsf3x>:
    5746:	b3 df       	rcall	.-154    	; 0x56ae <__fp_split3>
    5748:	a0 f3       	brcs	.-24     	; 0x5732 <__mulsf3+0x4>

0000574a <__mulsf3_pse>:
    574a:	95 9f       	mul	r25, r21
    574c:	d1 f3       	breq	.-12     	; 0x5742 <__mulsf3+0x14>
    574e:	95 0f       	add	r25, r21
    5750:	50 e0       	ldi	r21, 0x00	; 0
    5752:	55 1f       	adc	r21, r21
    5754:	62 9f       	mul	r22, r18
    5756:	f0 01       	movw	r30, r0
    5758:	72 9f       	mul	r23, r18
    575a:	bb 27       	eor	r27, r27
    575c:	f0 0d       	add	r31, r0
    575e:	b1 1d       	adc	r27, r1
    5760:	63 9f       	mul	r22, r19
    5762:	aa 27       	eor	r26, r26
    5764:	f0 0d       	add	r31, r0
    5766:	b1 1d       	adc	r27, r1
    5768:	aa 1f       	adc	r26, r26
    576a:	64 9f       	mul	r22, r20
    576c:	66 27       	eor	r22, r22
    576e:	b0 0d       	add	r27, r0
    5770:	a1 1d       	adc	r26, r1
    5772:	66 1f       	adc	r22, r22
    5774:	82 9f       	mul	r24, r18
    5776:	22 27       	eor	r18, r18
    5778:	b0 0d       	add	r27, r0
    577a:	a1 1d       	adc	r26, r1
    577c:	62 1f       	adc	r22, r18
    577e:	73 9f       	mul	r23, r19
    5780:	b0 0d       	add	r27, r0
    5782:	a1 1d       	adc	r26, r1
    5784:	62 1f       	adc	r22, r18
    5786:	83 9f       	mul	r24, r19
    5788:	a0 0d       	add	r26, r0
    578a:	61 1d       	adc	r22, r1
    578c:	22 1f       	adc	r18, r18
    578e:	74 9f       	mul	r23, r20
    5790:	33 27       	eor	r19, r19
    5792:	a0 0d       	add	r26, r0
    5794:	61 1d       	adc	r22, r1
    5796:	23 1f       	adc	r18, r19
    5798:	84 9f       	mul	r24, r20
    579a:	60 0d       	add	r22, r0
    579c:	21 1d       	adc	r18, r1
    579e:	82 2f       	mov	r24, r18
    57a0:	76 2f       	mov	r23, r22
    57a2:	6a 2f       	mov	r22, r26
    57a4:	11 24       	eor	r1, r1
    57a6:	9f 57       	subi	r25, 0x7F	; 127
    57a8:	50 40       	sbci	r21, 0x00	; 0
    57aa:	8a f0       	brmi	.+34     	; 0x57ce <__mulsf3_pse+0x84>
    57ac:	e1 f0       	breq	.+56     	; 0x57e6 <__mulsf3_pse+0x9c>
    57ae:	88 23       	and	r24, r24
    57b0:	4a f0       	brmi	.+18     	; 0x57c4 <__mulsf3_pse+0x7a>
    57b2:	ee 0f       	add	r30, r30
    57b4:	ff 1f       	adc	r31, r31
    57b6:	bb 1f       	adc	r27, r27
    57b8:	66 1f       	adc	r22, r22
    57ba:	77 1f       	adc	r23, r23
    57bc:	88 1f       	adc	r24, r24
    57be:	91 50       	subi	r25, 0x01	; 1
    57c0:	50 40       	sbci	r21, 0x00	; 0
    57c2:	a9 f7       	brne	.-22     	; 0x57ae <__mulsf3_pse+0x64>
    57c4:	9e 3f       	cpi	r25, 0xFE	; 254
    57c6:	51 05       	cpc	r21, r1
    57c8:	70 f0       	brcs	.+28     	; 0x57e6 <__mulsf3_pse+0x9c>
    57ca:	20 cf       	rjmp	.-448    	; 0x560c <__fp_inf>
    57cc:	aa cf       	rjmp	.-172    	; 0x5722 <__fp_szero>
    57ce:	5f 3f       	cpi	r21, 0xFF	; 255
    57d0:	ec f3       	brlt	.-6      	; 0x57cc <__mulsf3_pse+0x82>
    57d2:	98 3e       	cpi	r25, 0xE8	; 232
    57d4:	dc f3       	brlt	.-10     	; 0x57cc <__mulsf3_pse+0x82>
    57d6:	86 95       	lsr	r24
    57d8:	77 95       	ror	r23
    57da:	67 95       	ror	r22
    57dc:	b7 95       	ror	r27
    57de:	f7 95       	ror	r31
    57e0:	e7 95       	ror	r30
    57e2:	9f 5f       	subi	r25, 0xFF	; 255
    57e4:	c1 f7       	brne	.-16     	; 0x57d6 <__mulsf3_pse+0x8c>
    57e6:	fe 2b       	or	r31, r30
    57e8:	88 0f       	add	r24, r24
    57ea:	91 1d       	adc	r25, r1
    57ec:	96 95       	lsr	r25
    57ee:	87 95       	ror	r24
    57f0:	97 f9       	bld	r25, 7
    57f2:	08 95       	ret

000057f4 <pow>:
    57f4:	fa 01       	movw	r30, r20
    57f6:	ee 0f       	add	r30, r30
    57f8:	ff 1f       	adc	r31, r31
    57fa:	30 96       	adiw	r30, 0x00	; 0
    57fc:	21 05       	cpc	r18, r1
    57fe:	31 05       	cpc	r19, r1
    5800:	99 f1       	breq	.+102    	; 0x5868 <pow+0x74>
    5802:	61 15       	cp	r22, r1
    5804:	71 05       	cpc	r23, r1
    5806:	61 f4       	brne	.+24     	; 0x5820 <pow+0x2c>
    5808:	80 38       	cpi	r24, 0x80	; 128
    580a:	bf e3       	ldi	r27, 0x3F	; 63
    580c:	9b 07       	cpc	r25, r27
    580e:	49 f1       	breq	.+82     	; 0x5862 <pow+0x6e>
    5810:	68 94       	set
    5812:	90 38       	cpi	r25, 0x80	; 128
    5814:	81 05       	cpc	r24, r1
    5816:	61 f0       	breq	.+24     	; 0x5830 <pow+0x3c>
    5818:	80 38       	cpi	r24, 0x80	; 128
    581a:	bf ef       	ldi	r27, 0xFF	; 255
    581c:	9b 07       	cpc	r25, r27
    581e:	41 f0       	breq	.+16     	; 0x5830 <pow+0x3c>
    5820:	99 23       	and	r25, r25
    5822:	42 f5       	brpl	.+80     	; 0x5874 <pow+0x80>
    5824:	ff 3f       	cpi	r31, 0xFF	; 255
    5826:	e1 05       	cpc	r30, r1
    5828:	31 05       	cpc	r19, r1
    582a:	21 05       	cpc	r18, r1
    582c:	11 f1       	breq	.+68     	; 0x5872 <pow+0x7e>
    582e:	e8 94       	clt
    5830:	08 94       	sec
    5832:	e7 95       	ror	r30
    5834:	d9 01       	movw	r26, r18
    5836:	aa 23       	and	r26, r26
    5838:	29 f4       	brne	.+10     	; 0x5844 <pow+0x50>
    583a:	ab 2f       	mov	r26, r27
    583c:	be 2f       	mov	r27, r30
    583e:	f8 5f       	subi	r31, 0xF8	; 248
    5840:	d0 f3       	brcs	.-12     	; 0x5836 <pow+0x42>
    5842:	10 c0       	rjmp	.+32     	; 0x5864 <pow+0x70>
    5844:	ff 5f       	subi	r31, 0xFF	; 255
    5846:	70 f4       	brcc	.+28     	; 0x5864 <pow+0x70>
    5848:	a6 95       	lsr	r26
    584a:	e0 f7       	brcc	.-8      	; 0x5844 <pow+0x50>
    584c:	f7 39       	cpi	r31, 0x97	; 151
    584e:	50 f0       	brcs	.+20     	; 0x5864 <pow+0x70>
    5850:	19 f0       	breq	.+6      	; 0x5858 <pow+0x64>
    5852:	ff 3a       	cpi	r31, 0xAF	; 175
    5854:	38 f4       	brcc	.+14     	; 0x5864 <pow+0x70>
    5856:	9f 77       	andi	r25, 0x7F	; 127
    5858:	9f 93       	push	r25
    585a:	0c d0       	rcall	.+24     	; 0x5874 <pow+0x80>
    585c:	0f 90       	pop	r0
    585e:	07 fc       	sbrc	r0, 7
    5860:	90 58       	subi	r25, 0x80	; 128
    5862:	08 95       	ret
    5864:	3e f0       	brts	.+14     	; 0x5874 <pow+0x80>
    5866:	01 cf       	rjmp	.-510    	; 0x566a <__fp_nan>
    5868:	60 e0       	ldi	r22, 0x00	; 0
    586a:	70 e0       	ldi	r23, 0x00	; 0
    586c:	80 e8       	ldi	r24, 0x80	; 128
    586e:	9f e3       	ldi	r25, 0x3F	; 63
    5870:	08 95       	ret
    5872:	4f e7       	ldi	r20, 0x7F	; 127
    5874:	9f 77       	andi	r25, 0x7F	; 127
    5876:	5f 93       	push	r21
    5878:	4f 93       	push	r20
    587a:	3f 93       	push	r19
    587c:	2f 93       	push	r18
    587e:	9e d0       	rcall	.+316    	; 0x59bc <log>
    5880:	2f 91       	pop	r18
    5882:	3f 91       	pop	r19
    5884:	4f 91       	pop	r20
    5886:	5f 91       	pop	r21
    5888:	52 df       	rcall	.-348    	; 0x572e <__mulsf3>
    588a:	05 c0       	rjmp	.+10     	; 0x5896 <exp>
    588c:	19 f4       	brne	.+6      	; 0x5894 <pow+0xa0>
    588e:	0e f0       	brts	.+2      	; 0x5892 <pow+0x9e>
    5890:	bd ce       	rjmp	.-646    	; 0x560c <__fp_inf>
    5892:	46 cf       	rjmp	.-372    	; 0x5720 <__fp_zero>
    5894:	ea ce       	rjmp	.-556    	; 0x566a <__fp_nan>

00005896 <exp>:
    5896:	13 df       	rcall	.-474    	; 0x56be <__fp_splitA>
    5898:	c8 f3       	brcs	.-14     	; 0x588c <pow+0x98>
    589a:	96 38       	cpi	r25, 0x86	; 134
    589c:	c0 f7       	brcc	.-16     	; 0x588e <pow+0x9a>
    589e:	07 f8       	bld	r0, 7
    58a0:	0f 92       	push	r0
    58a2:	e8 94       	clt
    58a4:	2b e3       	ldi	r18, 0x3B	; 59
    58a6:	3a ea       	ldi	r19, 0xAA	; 170
    58a8:	48 eb       	ldi	r20, 0xB8	; 184
    58aa:	5f e7       	ldi	r21, 0x7F	; 127
    58ac:	4e df       	rcall	.-356    	; 0x574a <__mulsf3_pse>
    58ae:	0f 92       	push	r0
    58b0:	0f 92       	push	r0
    58b2:	0f 92       	push	r0
    58b4:	4d b7       	in	r20, 0x3d	; 61
    58b6:	5e b7       	in	r21, 0x3e	; 62
    58b8:	0f 92       	push	r0
    58ba:	c0 d0       	rcall	.+384    	; 0x5a3c <modf>
    58bc:	ea e9       	ldi	r30, 0x9A	; 154
    58be:	f1 e0       	ldi	r31, 0x01	; 1
    58c0:	16 d0       	rcall	.+44     	; 0x58ee <__fp_powser>
    58c2:	4f 91       	pop	r20
    58c4:	5f 91       	pop	r21
    58c6:	ef 91       	pop	r30
    58c8:	ff 91       	pop	r31
    58ca:	e5 95       	asr	r30
    58cc:	ee 1f       	adc	r30, r30
    58ce:	ff 1f       	adc	r31, r31
    58d0:	49 f0       	breq	.+18     	; 0x58e4 <exp+0x4e>
    58d2:	fe 57       	subi	r31, 0x7E	; 126
    58d4:	e0 68       	ori	r30, 0x80	; 128
    58d6:	44 27       	eor	r20, r20
    58d8:	ee 0f       	add	r30, r30
    58da:	44 1f       	adc	r20, r20
    58dc:	fa 95       	dec	r31
    58de:	e1 f7       	brne	.-8      	; 0x58d8 <exp+0x42>
    58e0:	41 95       	neg	r20
    58e2:	55 0b       	sbc	r21, r21
    58e4:	32 d0       	rcall	.+100    	; 0x594a <ldexp>
    58e6:	0f 90       	pop	r0
    58e8:	07 fe       	sbrs	r0, 7
    58ea:	26 c0       	rjmp	.+76     	; 0x5938 <inverse>
    58ec:	08 95       	ret

000058ee <__fp_powser>:
    58ee:	df 93       	push	r29
    58f0:	cf 93       	push	r28
    58f2:	1f 93       	push	r17
    58f4:	0f 93       	push	r16
    58f6:	ff 92       	push	r15
    58f8:	ef 92       	push	r14
    58fa:	df 92       	push	r13
    58fc:	7b 01       	movw	r14, r22
    58fe:	8c 01       	movw	r16, r24
    5900:	68 94       	set
    5902:	05 c0       	rjmp	.+10     	; 0x590e <__fp_powser+0x20>
    5904:	da 2e       	mov	r13, r26
    5906:	ef 01       	movw	r28, r30
    5908:	1e df       	rcall	.-452    	; 0x5746 <__mulsf3x>
    590a:	fe 01       	movw	r30, r28
    590c:	e8 94       	clt
    590e:	a5 91       	lpm	r26, Z+
    5910:	25 91       	lpm	r18, Z+
    5912:	35 91       	lpm	r19, Z+
    5914:	45 91       	lpm	r20, Z+
    5916:	55 91       	lpm	r21, Z+
    5918:	ae f3       	brts	.-22     	; 0x5904 <__fp_powser+0x16>
    591a:	ef 01       	movw	r28, r30
    591c:	3b dd       	rcall	.-1418   	; 0x5394 <__addsf3x>
    591e:	fe 01       	movw	r30, r28
    5920:	97 01       	movw	r18, r14
    5922:	a8 01       	movw	r20, r16
    5924:	da 94       	dec	r13
    5926:	79 f7       	brne	.-34     	; 0x5906 <__fp_powser+0x18>
    5928:	df 90       	pop	r13
    592a:	ef 90       	pop	r14
    592c:	ff 90       	pop	r15
    592e:	0f 91       	pop	r16
    5930:	1f 91       	pop	r17
    5932:	cf 91       	pop	r28
    5934:	df 91       	pop	r29
    5936:	08 95       	ret

00005938 <inverse>:
    5938:	9b 01       	movw	r18, r22
    593a:	ac 01       	movw	r20, r24
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	70 e0       	ldi	r23, 0x00	; 0
    5940:	80 e8       	ldi	r24, 0x80	; 128
    5942:	9f e3       	ldi	r25, 0x3F	; 63
    5944:	7a cd       	rjmp	.-1292   	; 0x543a <__divsf3>
    5946:	62 ce       	rjmp	.-828    	; 0x560c <__fp_inf>
    5948:	82 ce       	rjmp	.-764    	; 0x564e <__fp_mpack>

0000594a <ldexp>:
    594a:	b9 de       	rcall	.-654    	; 0x56be <__fp_splitA>
    594c:	e8 f3       	brcs	.-6      	; 0x5948 <inverse+0x10>
    594e:	99 23       	and	r25, r25
    5950:	d9 f3       	breq	.-10     	; 0x5948 <inverse+0x10>
    5952:	94 0f       	add	r25, r20
    5954:	51 1d       	adc	r21, r1
    5956:	bb f3       	brvs	.-18     	; 0x5946 <inverse+0xe>
    5958:	91 50       	subi	r25, 0x01	; 1
    595a:	50 40       	sbci	r21, 0x00	; 0
    595c:	94 f0       	brlt	.+36     	; 0x5982 <ldexp+0x38>
    595e:	59 f0       	breq	.+22     	; 0x5976 <ldexp+0x2c>
    5960:	88 23       	and	r24, r24
    5962:	32 f0       	brmi	.+12     	; 0x5970 <ldexp+0x26>
    5964:	66 0f       	add	r22, r22
    5966:	77 1f       	adc	r23, r23
    5968:	88 1f       	adc	r24, r24
    596a:	91 50       	subi	r25, 0x01	; 1
    596c:	50 40       	sbci	r21, 0x00	; 0
    596e:	c1 f7       	brne	.-16     	; 0x5960 <ldexp+0x16>
    5970:	9e 3f       	cpi	r25, 0xFE	; 254
    5972:	51 05       	cpc	r21, r1
    5974:	44 f7       	brge	.-48     	; 0x5946 <inverse+0xe>
    5976:	88 0f       	add	r24, r24
    5978:	91 1d       	adc	r25, r1
    597a:	96 95       	lsr	r25
    597c:	87 95       	ror	r24
    597e:	97 f9       	bld	r25, 7
    5980:	08 95       	ret
    5982:	5f 3f       	cpi	r21, 0xFF	; 255
    5984:	ac f0       	brlt	.+42     	; 0x59b0 <ldexp+0x66>
    5986:	98 3e       	cpi	r25, 0xE8	; 232
    5988:	9c f0       	brlt	.+38     	; 0x59b0 <ldexp+0x66>
    598a:	bb 27       	eor	r27, r27
    598c:	86 95       	lsr	r24
    598e:	77 95       	ror	r23
    5990:	67 95       	ror	r22
    5992:	b7 95       	ror	r27
    5994:	08 f4       	brcc	.+2      	; 0x5998 <ldexp+0x4e>
    5996:	b1 60       	ori	r27, 0x01	; 1
    5998:	93 95       	inc	r25
    599a:	c1 f7       	brne	.-16     	; 0x598c <ldexp+0x42>
    599c:	bb 0f       	add	r27, r27
    599e:	58 f7       	brcc	.-42     	; 0x5976 <ldexp+0x2c>
    59a0:	11 f4       	brne	.+4      	; 0x59a6 <ldexp+0x5c>
    59a2:	60 ff       	sbrs	r22, 0
    59a4:	e8 cf       	rjmp	.-48     	; 0x5976 <ldexp+0x2c>
    59a6:	6f 5f       	subi	r22, 0xFF	; 255
    59a8:	7f 4f       	sbci	r23, 0xFF	; 255
    59aa:	8f 4f       	sbci	r24, 0xFF	; 255
    59ac:	9f 4f       	sbci	r25, 0xFF	; 255
    59ae:	e3 cf       	rjmp	.-58     	; 0x5976 <ldexp+0x2c>
    59b0:	b8 ce       	rjmp	.-656    	; 0x5722 <__fp_szero>
    59b2:	0e f0       	brts	.+2      	; 0x59b6 <ldexp+0x6c>
    59b4:	4c ce       	rjmp	.-872    	; 0x564e <__fp_mpack>
    59b6:	59 ce       	rjmp	.-846    	; 0x566a <__fp_nan>
    59b8:	68 94       	set
    59ba:	28 ce       	rjmp	.-944    	; 0x560c <__fp_inf>

000059bc <log>:
    59bc:	80 de       	rcall	.-768    	; 0x56be <__fp_splitA>
    59be:	c8 f3       	brcs	.-14     	; 0x59b2 <ldexp+0x68>
    59c0:	99 23       	and	r25, r25
    59c2:	d1 f3       	breq	.-12     	; 0x59b8 <ldexp+0x6e>
    59c4:	c6 f3       	brts	.-16     	; 0x59b6 <ldexp+0x6c>
    59c6:	df 93       	push	r29
    59c8:	cf 93       	push	r28
    59ca:	1f 93       	push	r17
    59cc:	0f 93       	push	r16
    59ce:	ff 92       	push	r15
    59d0:	c9 2f       	mov	r28, r25
    59d2:	dd 27       	eor	r29, r29
    59d4:	88 23       	and	r24, r24
    59d6:	2a f0       	brmi	.+10     	; 0x59e2 <log+0x26>
    59d8:	21 97       	sbiw	r28, 0x01	; 1
    59da:	66 0f       	add	r22, r22
    59dc:	77 1f       	adc	r23, r23
    59de:	88 1f       	adc	r24, r24
    59e0:	da f7       	brpl	.-10     	; 0x59d8 <log+0x1c>
    59e2:	20 e0       	ldi	r18, 0x00	; 0
    59e4:	30 e0       	ldi	r19, 0x00	; 0
    59e6:	40 e8       	ldi	r20, 0x80	; 128
    59e8:	5f eb       	ldi	r21, 0xBF	; 191
    59ea:	9f e3       	ldi	r25, 0x3F	; 63
    59ec:	88 39       	cpi	r24, 0x98	; 152
    59ee:	20 f0       	brcs	.+8      	; 0x59f8 <log+0x3c>
    59f0:	80 3e       	cpi	r24, 0xE0	; 224
    59f2:	30 f0       	brcs	.+12     	; 0x5a00 <log+0x44>
    59f4:	21 96       	adiw	r28, 0x01	; 1
    59f6:	8f 77       	andi	r24, 0x7F	; 127
    59f8:	bc dc       	rcall	.-1672   	; 0x5372 <__addsf3>
    59fa:	e2 ec       	ldi	r30, 0xC2	; 194
    59fc:	f1 e0       	ldi	r31, 0x01	; 1
    59fe:	03 c0       	rjmp	.+6      	; 0x5a06 <log+0x4a>
    5a00:	b8 dc       	rcall	.-1680   	; 0x5372 <__addsf3>
    5a02:	ef ee       	ldi	r30, 0xEF	; 239
    5a04:	f1 e0       	ldi	r31, 0x01	; 1
    5a06:	73 df       	rcall	.-282    	; 0x58ee <__fp_powser>
    5a08:	8b 01       	movw	r16, r22
    5a0a:	be 01       	movw	r22, r28
    5a0c:	ec 01       	movw	r28, r24
    5a0e:	fb 2e       	mov	r15, r27
    5a10:	6f 57       	subi	r22, 0x7F	; 127
    5a12:	71 09       	sbc	r23, r1
    5a14:	75 95       	asr	r23
    5a16:	77 1f       	adc	r23, r23
    5a18:	88 0b       	sbc	r24, r24
    5a1a:	99 0b       	sbc	r25, r25
    5a1c:	a9 dd       	rcall	.-1198   	; 0x5570 <__floatsisf>
    5a1e:	28 e1       	ldi	r18, 0x18	; 24
    5a20:	32 e7       	ldi	r19, 0x72	; 114
    5a22:	41 e3       	ldi	r20, 0x31	; 49
    5a24:	5f e3       	ldi	r21, 0x3F	; 63
    5a26:	8f de       	rcall	.-738    	; 0x5746 <__mulsf3x>
    5a28:	af 2d       	mov	r26, r15
    5a2a:	98 01       	movw	r18, r16
    5a2c:	ae 01       	movw	r20, r28
    5a2e:	ff 90       	pop	r15
    5a30:	0f 91       	pop	r16
    5a32:	1f 91       	pop	r17
    5a34:	cf 91       	pop	r28
    5a36:	df 91       	pop	r29
    5a38:	ad dc       	rcall	.-1702   	; 0x5394 <__addsf3x>
    5a3a:	28 ce       	rjmp	.-944    	; 0x568c <__fp_round>

00005a3c <modf>:
    5a3c:	fa 01       	movw	r30, r20
    5a3e:	dc 01       	movw	r26, r24
    5a40:	aa 0f       	add	r26, r26
    5a42:	bb 1f       	adc	r27, r27
    5a44:	9b 01       	movw	r18, r22
    5a46:	ac 01       	movw	r20, r24
    5a48:	bf 57       	subi	r27, 0x7F	; 127
    5a4a:	28 f4       	brcc	.+10     	; 0x5a56 <modf+0x1a>
    5a4c:	22 27       	eor	r18, r18
    5a4e:	33 27       	eor	r19, r19
    5a50:	44 27       	eor	r20, r20
    5a52:	50 78       	andi	r21, 0x80	; 128
    5a54:	1f c0       	rjmp	.+62     	; 0x5a94 <modf+0x58>
    5a56:	b7 51       	subi	r27, 0x17	; 23
    5a58:	88 f4       	brcc	.+34     	; 0x5a7c <modf+0x40>
    5a5a:	ab 2f       	mov	r26, r27
    5a5c:	00 24       	eor	r0, r0
    5a5e:	46 95       	lsr	r20
    5a60:	37 95       	ror	r19
    5a62:	27 95       	ror	r18
    5a64:	01 1c       	adc	r0, r1
    5a66:	a3 95       	inc	r26
    5a68:	d2 f3       	brmi	.-12     	; 0x5a5e <modf+0x22>
    5a6a:	00 20       	and	r0, r0
    5a6c:	69 f0       	breq	.+26     	; 0x5a88 <modf+0x4c>
    5a6e:	22 0f       	add	r18, r18
    5a70:	33 1f       	adc	r19, r19
    5a72:	44 1f       	adc	r20, r20
    5a74:	b3 95       	inc	r27
    5a76:	da f3       	brmi	.-10     	; 0x5a6e <modf+0x32>
    5a78:	0d d0       	rcall	.+26     	; 0x5a94 <modf+0x58>
    5a7a:	7a cc       	rjmp	.-1804   	; 0x5370 <__subsf3>
    5a7c:	61 30       	cpi	r22, 0x01	; 1
    5a7e:	71 05       	cpc	r23, r1
    5a80:	a0 e8       	ldi	r26, 0x80	; 128
    5a82:	8a 07       	cpc	r24, r26
    5a84:	b9 46       	sbci	r27, 0x69	; 105
    5a86:	30 f4       	brcc	.+12     	; 0x5a94 <modf+0x58>
    5a88:	9b 01       	movw	r18, r22
    5a8a:	ac 01       	movw	r20, r24
    5a8c:	66 27       	eor	r22, r22
    5a8e:	77 27       	eor	r23, r23
    5a90:	88 27       	eor	r24, r24
    5a92:	90 78       	andi	r25, 0x80	; 128
    5a94:	30 96       	adiw	r30, 0x00	; 0
    5a96:	21 f0       	breq	.+8      	; 0x5aa0 <modf+0x64>
    5a98:	20 83       	st	Z, r18
    5a9a:	31 83       	std	Z+1, r19	; 0x01
    5a9c:	42 83       	std	Z+2, r20	; 0x02
    5a9e:	53 83       	std	Z+3, r21	; 0x03
    5aa0:	08 95       	ret

00005aa2 <__divmodhi4>:
    5aa2:	97 fb       	bst	r25, 7
    5aa4:	07 2e       	mov	r0, r23
    5aa6:	16 f4       	brtc	.+4      	; 0x5aac <__divmodhi4+0xa>
    5aa8:	00 94       	com	r0
    5aaa:	06 d0       	rcall	.+12     	; 0x5ab8 <__divmodhi4_neg1>
    5aac:	77 fd       	sbrc	r23, 7
    5aae:	08 d0       	rcall	.+16     	; 0x5ac0 <__divmodhi4_neg2>
    5ab0:	35 d0       	rcall	.+106    	; 0x5b1c <__udivmodhi4>
    5ab2:	07 fc       	sbrc	r0, 7
    5ab4:	05 d0       	rcall	.+10     	; 0x5ac0 <__divmodhi4_neg2>
    5ab6:	3e f4       	brtc	.+14     	; 0x5ac6 <__divmodhi4_exit>

00005ab8 <__divmodhi4_neg1>:
    5ab8:	90 95       	com	r25
    5aba:	81 95       	neg	r24
    5abc:	9f 4f       	sbci	r25, 0xFF	; 255
    5abe:	08 95       	ret

00005ac0 <__divmodhi4_neg2>:
    5ac0:	70 95       	com	r23
    5ac2:	61 95       	neg	r22
    5ac4:	7f 4f       	sbci	r23, 0xFF	; 255

00005ac6 <__divmodhi4_exit>:
    5ac6:	08 95       	ret

00005ac8 <__udivmodsi4>:
    5ac8:	a1 e2       	ldi	r26, 0x21	; 33
    5aca:	1a 2e       	mov	r1, r26
    5acc:	aa 1b       	sub	r26, r26
    5ace:	bb 1b       	sub	r27, r27
    5ad0:	fd 01       	movw	r30, r26
    5ad2:	0d c0       	rjmp	.+26     	; 0x5aee <__udivmodsi4_ep>

00005ad4 <__udivmodsi4_loop>:
    5ad4:	aa 1f       	adc	r26, r26
    5ad6:	bb 1f       	adc	r27, r27
    5ad8:	ee 1f       	adc	r30, r30
    5ada:	ff 1f       	adc	r31, r31
    5adc:	a2 17       	cp	r26, r18
    5ade:	b3 07       	cpc	r27, r19
    5ae0:	e4 07       	cpc	r30, r20
    5ae2:	f5 07       	cpc	r31, r21
    5ae4:	20 f0       	brcs	.+8      	; 0x5aee <__udivmodsi4_ep>
    5ae6:	a2 1b       	sub	r26, r18
    5ae8:	b3 0b       	sbc	r27, r19
    5aea:	e4 0b       	sbc	r30, r20
    5aec:	f5 0b       	sbc	r31, r21

00005aee <__udivmodsi4_ep>:
    5aee:	66 1f       	adc	r22, r22
    5af0:	77 1f       	adc	r23, r23
    5af2:	88 1f       	adc	r24, r24
    5af4:	99 1f       	adc	r25, r25
    5af6:	1a 94       	dec	r1
    5af8:	69 f7       	brne	.-38     	; 0x5ad4 <__udivmodsi4_loop>
    5afa:	60 95       	com	r22
    5afc:	70 95       	com	r23
    5afe:	80 95       	com	r24
    5b00:	90 95       	com	r25
    5b02:	9b 01       	movw	r18, r22
    5b04:	ac 01       	movw	r20, r24
    5b06:	bd 01       	movw	r22, r26
    5b08:	cf 01       	movw	r24, r30
    5b0a:	08 95       	ret

00005b0c <__tablejump2__>:
    5b0c:	ee 0f       	add	r30, r30
    5b0e:	ff 1f       	adc	r31, r31
    5b10:	88 1f       	adc	r24, r24
    5b12:	8b bf       	out	0x3b, r24	; 59
    5b14:	07 90       	elpm	r0, Z+
    5b16:	f6 91       	elpm	r31, Z
    5b18:	e0 2d       	mov	r30, r0
    5b1a:	19 94       	eijmp

00005b1c <__udivmodhi4>:
    5b1c:	aa 1b       	sub	r26, r26
    5b1e:	bb 1b       	sub	r27, r27
    5b20:	51 e1       	ldi	r21, 0x11	; 17
    5b22:	07 c0       	rjmp	.+14     	; 0x5b32 <__udivmodhi4_ep>

00005b24 <__udivmodhi4_loop>:
    5b24:	aa 1f       	adc	r26, r26
    5b26:	bb 1f       	adc	r27, r27
    5b28:	a6 17       	cp	r26, r22
    5b2a:	b7 07       	cpc	r27, r23
    5b2c:	10 f0       	brcs	.+4      	; 0x5b32 <__udivmodhi4_ep>
    5b2e:	a6 1b       	sub	r26, r22
    5b30:	b7 0b       	sbc	r27, r23

00005b32 <__udivmodhi4_ep>:
    5b32:	88 1f       	adc	r24, r24
    5b34:	99 1f       	adc	r25, r25
    5b36:	5a 95       	dec	r21
    5b38:	a9 f7       	brne	.-22     	; 0x5b24 <__udivmodhi4_loop>
    5b3a:	80 95       	com	r24
    5b3c:	90 95       	com	r25
    5b3e:	bc 01       	movw	r22, r24
    5b40:	cd 01       	movw	r24, r26
    5b42:	08 95       	ret

00005b44 <calloc>:
    5b44:	0f 93       	push	r16
    5b46:	1f 93       	push	r17
    5b48:	cf 93       	push	r28
    5b4a:	df 93       	push	r29
    5b4c:	86 9f       	mul	r24, r22
    5b4e:	80 01       	movw	r16, r0
    5b50:	87 9f       	mul	r24, r23
    5b52:	10 0d       	add	r17, r0
    5b54:	96 9f       	mul	r25, r22
    5b56:	10 0d       	add	r17, r0
    5b58:	11 24       	eor	r1, r1
    5b5a:	c8 01       	movw	r24, r16
    5b5c:	0d d0       	rcall	.+26     	; 0x5b78 <malloc>
    5b5e:	ec 01       	movw	r28, r24
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	21 f0       	breq	.+8      	; 0x5b6c <calloc+0x28>
    5b64:	a8 01       	movw	r20, r16
    5b66:	60 e0       	ldi	r22, 0x00	; 0
    5b68:	70 e0       	ldi	r23, 0x00	; 0
    5b6a:	34 d1       	rcall	.+616    	; 0x5dd4 <memset>
    5b6c:	ce 01       	movw	r24, r28
    5b6e:	df 91       	pop	r29
    5b70:	cf 91       	pop	r28
    5b72:	1f 91       	pop	r17
    5b74:	0f 91       	pop	r16
    5b76:	08 95       	ret

00005b78 <malloc>:
    5b78:	0f 93       	push	r16
    5b7a:	1f 93       	push	r17
    5b7c:	cf 93       	push	r28
    5b7e:	df 93       	push	r29
    5b80:	82 30       	cpi	r24, 0x02	; 2
    5b82:	91 05       	cpc	r25, r1
    5b84:	10 f4       	brcc	.+4      	; 0x5b8a <malloc+0x12>
    5b86:	82 e0       	ldi	r24, 0x02	; 2
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	e0 91 b6 16 	lds	r30, 0x16B6	; 0x8016b6 <__flp>
    5b8e:	f0 91 b7 16 	lds	r31, 0x16B7	; 0x8016b7 <__flp+0x1>
    5b92:	20 e0       	ldi	r18, 0x00	; 0
    5b94:	30 e0       	ldi	r19, 0x00	; 0
    5b96:	a0 e0       	ldi	r26, 0x00	; 0
    5b98:	b0 e0       	ldi	r27, 0x00	; 0
    5b9a:	30 97       	sbiw	r30, 0x00	; 0
    5b9c:	19 f1       	breq	.+70     	; 0x5be4 <malloc+0x6c>
    5b9e:	40 81       	ld	r20, Z
    5ba0:	51 81       	ldd	r21, Z+1	; 0x01
    5ba2:	02 81       	ldd	r16, Z+2	; 0x02
    5ba4:	13 81       	ldd	r17, Z+3	; 0x03
    5ba6:	48 17       	cp	r20, r24
    5ba8:	59 07       	cpc	r21, r25
    5baa:	c8 f0       	brcs	.+50     	; 0x5bde <malloc+0x66>
    5bac:	84 17       	cp	r24, r20
    5bae:	95 07       	cpc	r25, r21
    5bb0:	69 f4       	brne	.+26     	; 0x5bcc <malloc+0x54>
    5bb2:	10 97       	sbiw	r26, 0x00	; 0
    5bb4:	31 f0       	breq	.+12     	; 0x5bc2 <malloc+0x4a>
    5bb6:	12 96       	adiw	r26, 0x02	; 2
    5bb8:	0c 93       	st	X, r16
    5bba:	12 97       	sbiw	r26, 0x02	; 2
    5bbc:	13 96       	adiw	r26, 0x03	; 3
    5bbe:	1c 93       	st	X, r17
    5bc0:	27 c0       	rjmp	.+78     	; 0x5c10 <malloc+0x98>
    5bc2:	00 93 b6 16 	sts	0x16B6, r16	; 0x8016b6 <__flp>
    5bc6:	10 93 b7 16 	sts	0x16B7, r17	; 0x8016b7 <__flp+0x1>
    5bca:	22 c0       	rjmp	.+68     	; 0x5c10 <malloc+0x98>
    5bcc:	21 15       	cp	r18, r1
    5bce:	31 05       	cpc	r19, r1
    5bd0:	19 f0       	breq	.+6      	; 0x5bd8 <malloc+0x60>
    5bd2:	42 17       	cp	r20, r18
    5bd4:	53 07       	cpc	r21, r19
    5bd6:	18 f4       	brcc	.+6      	; 0x5bde <malloc+0x66>
    5bd8:	9a 01       	movw	r18, r20
    5bda:	bd 01       	movw	r22, r26
    5bdc:	ef 01       	movw	r28, r30
    5bde:	df 01       	movw	r26, r30
    5be0:	f8 01       	movw	r30, r16
    5be2:	db cf       	rjmp	.-74     	; 0x5b9a <malloc+0x22>
    5be4:	21 15       	cp	r18, r1
    5be6:	31 05       	cpc	r19, r1
    5be8:	f9 f0       	breq	.+62     	; 0x5c28 <malloc+0xb0>
    5bea:	28 1b       	sub	r18, r24
    5bec:	39 0b       	sbc	r19, r25
    5bee:	24 30       	cpi	r18, 0x04	; 4
    5bf0:	31 05       	cpc	r19, r1
    5bf2:	80 f4       	brcc	.+32     	; 0x5c14 <malloc+0x9c>
    5bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    5bf8:	61 15       	cp	r22, r1
    5bfa:	71 05       	cpc	r23, r1
    5bfc:	21 f0       	breq	.+8      	; 0x5c06 <malloc+0x8e>
    5bfe:	fb 01       	movw	r30, r22
    5c00:	93 83       	std	Z+3, r25	; 0x03
    5c02:	82 83       	std	Z+2, r24	; 0x02
    5c04:	04 c0       	rjmp	.+8      	; 0x5c0e <malloc+0x96>
    5c06:	90 93 b7 16 	sts	0x16B7, r25	; 0x8016b7 <__flp+0x1>
    5c0a:	80 93 b6 16 	sts	0x16B6, r24	; 0x8016b6 <__flp>
    5c0e:	fe 01       	movw	r30, r28
    5c10:	32 96       	adiw	r30, 0x02	; 2
    5c12:	44 c0       	rjmp	.+136    	; 0x5c9c <malloc+0x124>
    5c14:	fe 01       	movw	r30, r28
    5c16:	e2 0f       	add	r30, r18
    5c18:	f3 1f       	adc	r31, r19
    5c1a:	81 93       	st	Z+, r24
    5c1c:	91 93       	st	Z+, r25
    5c1e:	22 50       	subi	r18, 0x02	; 2
    5c20:	31 09       	sbc	r19, r1
    5c22:	39 83       	std	Y+1, r19	; 0x01
    5c24:	28 83       	st	Y, r18
    5c26:	3a c0       	rjmp	.+116    	; 0x5c9c <malloc+0x124>
    5c28:	20 91 b4 16 	lds	r18, 0x16B4	; 0x8016b4 <__brkval>
    5c2c:	30 91 b5 16 	lds	r19, 0x16B5	; 0x8016b5 <__brkval+0x1>
    5c30:	23 2b       	or	r18, r19
    5c32:	41 f4       	brne	.+16     	; 0x5c44 <malloc+0xcc>
    5c34:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5c38:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5c3c:	30 93 b5 16 	sts	0x16B5, r19	; 0x8016b5 <__brkval+0x1>
    5c40:	20 93 b4 16 	sts	0x16B4, r18	; 0x8016b4 <__brkval>
    5c44:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5c48:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5c4c:	21 15       	cp	r18, r1
    5c4e:	31 05       	cpc	r19, r1
    5c50:	41 f4       	brne	.+16     	; 0x5c62 <malloc+0xea>
    5c52:	2d b7       	in	r18, 0x3d	; 61
    5c54:	3e b7       	in	r19, 0x3e	; 62
    5c56:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5c5a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5c5e:	24 1b       	sub	r18, r20
    5c60:	35 0b       	sbc	r19, r21
    5c62:	e0 91 b4 16 	lds	r30, 0x16B4	; 0x8016b4 <__brkval>
    5c66:	f0 91 b5 16 	lds	r31, 0x16B5	; 0x8016b5 <__brkval+0x1>
    5c6a:	e2 17       	cp	r30, r18
    5c6c:	f3 07       	cpc	r31, r19
    5c6e:	a0 f4       	brcc	.+40     	; 0x5c98 <malloc+0x120>
    5c70:	2e 1b       	sub	r18, r30
    5c72:	3f 0b       	sbc	r19, r31
    5c74:	28 17       	cp	r18, r24
    5c76:	39 07       	cpc	r19, r25
    5c78:	78 f0       	brcs	.+30     	; 0x5c98 <malloc+0x120>
    5c7a:	ac 01       	movw	r20, r24
    5c7c:	4e 5f       	subi	r20, 0xFE	; 254
    5c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    5c80:	24 17       	cp	r18, r20
    5c82:	35 07       	cpc	r19, r21
    5c84:	48 f0       	brcs	.+18     	; 0x5c98 <malloc+0x120>
    5c86:	4e 0f       	add	r20, r30
    5c88:	5f 1f       	adc	r21, r31
    5c8a:	50 93 b5 16 	sts	0x16B5, r21	; 0x8016b5 <__brkval+0x1>
    5c8e:	40 93 b4 16 	sts	0x16B4, r20	; 0x8016b4 <__brkval>
    5c92:	81 93       	st	Z+, r24
    5c94:	91 93       	st	Z+, r25
    5c96:	02 c0       	rjmp	.+4      	; 0x5c9c <malloc+0x124>
    5c98:	e0 e0       	ldi	r30, 0x00	; 0
    5c9a:	f0 e0       	ldi	r31, 0x00	; 0
    5c9c:	cf 01       	movw	r24, r30
    5c9e:	df 91       	pop	r29
    5ca0:	cf 91       	pop	r28
    5ca2:	1f 91       	pop	r17
    5ca4:	0f 91       	pop	r16
    5ca6:	08 95       	ret

00005ca8 <free>:
    5ca8:	cf 93       	push	r28
    5caa:	df 93       	push	r29
    5cac:	00 97       	sbiw	r24, 0x00	; 0
    5cae:	09 f4       	brne	.+2      	; 0x5cb2 <free+0xa>
    5cb0:	81 c0       	rjmp	.+258    	; 0x5db4 <free+0x10c>
    5cb2:	fc 01       	movw	r30, r24
    5cb4:	32 97       	sbiw	r30, 0x02	; 2
    5cb6:	13 82       	std	Z+3, r1	; 0x03
    5cb8:	12 82       	std	Z+2, r1	; 0x02
    5cba:	a0 91 b6 16 	lds	r26, 0x16B6	; 0x8016b6 <__flp>
    5cbe:	b0 91 b7 16 	lds	r27, 0x16B7	; 0x8016b7 <__flp+0x1>
    5cc2:	10 97       	sbiw	r26, 0x00	; 0
    5cc4:	81 f4       	brne	.+32     	; 0x5ce6 <free+0x3e>
    5cc6:	20 81       	ld	r18, Z
    5cc8:	31 81       	ldd	r19, Z+1	; 0x01
    5cca:	82 0f       	add	r24, r18
    5ccc:	93 1f       	adc	r25, r19
    5cce:	20 91 b4 16 	lds	r18, 0x16B4	; 0x8016b4 <__brkval>
    5cd2:	30 91 b5 16 	lds	r19, 0x16B5	; 0x8016b5 <__brkval+0x1>
    5cd6:	28 17       	cp	r18, r24
    5cd8:	39 07       	cpc	r19, r25
    5cda:	51 f5       	brne	.+84     	; 0x5d30 <free+0x88>
    5cdc:	f0 93 b5 16 	sts	0x16B5, r31	; 0x8016b5 <__brkval+0x1>
    5ce0:	e0 93 b4 16 	sts	0x16B4, r30	; 0x8016b4 <__brkval>
    5ce4:	67 c0       	rjmp	.+206    	; 0x5db4 <free+0x10c>
    5ce6:	ed 01       	movw	r28, r26
    5ce8:	20 e0       	ldi	r18, 0x00	; 0
    5cea:	30 e0       	ldi	r19, 0x00	; 0
    5cec:	ce 17       	cp	r28, r30
    5cee:	df 07       	cpc	r29, r31
    5cf0:	40 f4       	brcc	.+16     	; 0x5d02 <free+0x5a>
    5cf2:	4a 81       	ldd	r20, Y+2	; 0x02
    5cf4:	5b 81       	ldd	r21, Y+3	; 0x03
    5cf6:	9e 01       	movw	r18, r28
    5cf8:	41 15       	cp	r20, r1
    5cfa:	51 05       	cpc	r21, r1
    5cfc:	f1 f0       	breq	.+60     	; 0x5d3a <free+0x92>
    5cfe:	ea 01       	movw	r28, r20
    5d00:	f5 cf       	rjmp	.-22     	; 0x5cec <free+0x44>
    5d02:	d3 83       	std	Z+3, r29	; 0x03
    5d04:	c2 83       	std	Z+2, r28	; 0x02
    5d06:	40 81       	ld	r20, Z
    5d08:	51 81       	ldd	r21, Z+1	; 0x01
    5d0a:	84 0f       	add	r24, r20
    5d0c:	95 1f       	adc	r25, r21
    5d0e:	c8 17       	cp	r28, r24
    5d10:	d9 07       	cpc	r29, r25
    5d12:	59 f4       	brne	.+22     	; 0x5d2a <free+0x82>
    5d14:	88 81       	ld	r24, Y
    5d16:	99 81       	ldd	r25, Y+1	; 0x01
    5d18:	84 0f       	add	r24, r20
    5d1a:	95 1f       	adc	r25, r21
    5d1c:	02 96       	adiw	r24, 0x02	; 2
    5d1e:	91 83       	std	Z+1, r25	; 0x01
    5d20:	80 83       	st	Z, r24
    5d22:	8a 81       	ldd	r24, Y+2	; 0x02
    5d24:	9b 81       	ldd	r25, Y+3	; 0x03
    5d26:	93 83       	std	Z+3, r25	; 0x03
    5d28:	82 83       	std	Z+2, r24	; 0x02
    5d2a:	21 15       	cp	r18, r1
    5d2c:	31 05       	cpc	r19, r1
    5d2e:	29 f4       	brne	.+10     	; 0x5d3a <free+0x92>
    5d30:	f0 93 b7 16 	sts	0x16B7, r31	; 0x8016b7 <__flp+0x1>
    5d34:	e0 93 b6 16 	sts	0x16B6, r30	; 0x8016b6 <__flp>
    5d38:	3d c0       	rjmp	.+122    	; 0x5db4 <free+0x10c>
    5d3a:	e9 01       	movw	r28, r18
    5d3c:	fb 83       	std	Y+3, r31	; 0x03
    5d3e:	ea 83       	std	Y+2, r30	; 0x02
    5d40:	49 91       	ld	r20, Y+
    5d42:	59 91       	ld	r21, Y+
    5d44:	c4 0f       	add	r28, r20
    5d46:	d5 1f       	adc	r29, r21
    5d48:	ec 17       	cp	r30, r28
    5d4a:	fd 07       	cpc	r31, r29
    5d4c:	61 f4       	brne	.+24     	; 0x5d66 <free+0xbe>
    5d4e:	80 81       	ld	r24, Z
    5d50:	91 81       	ldd	r25, Z+1	; 0x01
    5d52:	84 0f       	add	r24, r20
    5d54:	95 1f       	adc	r25, r21
    5d56:	02 96       	adiw	r24, 0x02	; 2
    5d58:	e9 01       	movw	r28, r18
    5d5a:	99 83       	std	Y+1, r25	; 0x01
    5d5c:	88 83       	st	Y, r24
    5d5e:	82 81       	ldd	r24, Z+2	; 0x02
    5d60:	93 81       	ldd	r25, Z+3	; 0x03
    5d62:	9b 83       	std	Y+3, r25	; 0x03
    5d64:	8a 83       	std	Y+2, r24	; 0x02
    5d66:	e0 e0       	ldi	r30, 0x00	; 0
    5d68:	f0 e0       	ldi	r31, 0x00	; 0
    5d6a:	12 96       	adiw	r26, 0x02	; 2
    5d6c:	8d 91       	ld	r24, X+
    5d6e:	9c 91       	ld	r25, X
    5d70:	13 97       	sbiw	r26, 0x03	; 3
    5d72:	00 97       	sbiw	r24, 0x00	; 0
    5d74:	19 f0       	breq	.+6      	; 0x5d7c <free+0xd4>
    5d76:	fd 01       	movw	r30, r26
    5d78:	dc 01       	movw	r26, r24
    5d7a:	f7 cf       	rjmp	.-18     	; 0x5d6a <free+0xc2>
    5d7c:	8d 91       	ld	r24, X+
    5d7e:	9c 91       	ld	r25, X
    5d80:	11 97       	sbiw	r26, 0x01	; 1
    5d82:	9d 01       	movw	r18, r26
    5d84:	2e 5f       	subi	r18, 0xFE	; 254
    5d86:	3f 4f       	sbci	r19, 0xFF	; 255
    5d88:	82 0f       	add	r24, r18
    5d8a:	93 1f       	adc	r25, r19
    5d8c:	20 91 b4 16 	lds	r18, 0x16B4	; 0x8016b4 <__brkval>
    5d90:	30 91 b5 16 	lds	r19, 0x16B5	; 0x8016b5 <__brkval+0x1>
    5d94:	28 17       	cp	r18, r24
    5d96:	39 07       	cpc	r19, r25
    5d98:	69 f4       	brne	.+26     	; 0x5db4 <free+0x10c>
    5d9a:	30 97       	sbiw	r30, 0x00	; 0
    5d9c:	29 f4       	brne	.+10     	; 0x5da8 <free+0x100>
    5d9e:	10 92 b7 16 	sts	0x16B7, r1	; 0x8016b7 <__flp+0x1>
    5da2:	10 92 b6 16 	sts	0x16B6, r1	; 0x8016b6 <__flp>
    5da6:	02 c0       	rjmp	.+4      	; 0x5dac <free+0x104>
    5da8:	13 82       	std	Z+3, r1	; 0x03
    5daa:	12 82       	std	Z+2, r1	; 0x02
    5dac:	b0 93 b5 16 	sts	0x16B5, r27	; 0x8016b5 <__brkval+0x1>
    5db0:	a0 93 b4 16 	sts	0x16B4, r26	; 0x8016b4 <__brkval>
    5db4:	df 91       	pop	r29
    5db6:	cf 91       	pop	r28
    5db8:	08 95       	ret

00005dba <abort>:
    5dba:	81 e0       	ldi	r24, 0x01	; 1
    5dbc:	90 e0       	ldi	r25, 0x00	; 0
    5dbe:	f8 94       	cli
    5dc0:	7d c3       	rjmp	.+1786   	; 0x64bc <_exit>

00005dc2 <memcpy>:
    5dc2:	fb 01       	movw	r30, r22
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	02 c0       	rjmp	.+4      	; 0x5dcc <memcpy+0xa>
    5dc8:	01 90       	ld	r0, Z+
    5dca:	0d 92       	st	X+, r0
    5dcc:	41 50       	subi	r20, 0x01	; 1
    5dce:	50 40       	sbci	r21, 0x00	; 0
    5dd0:	d8 f7       	brcc	.-10     	; 0x5dc8 <memcpy+0x6>
    5dd2:	08 95       	ret

00005dd4 <memset>:
    5dd4:	dc 01       	movw	r26, r24
    5dd6:	01 c0       	rjmp	.+2      	; 0x5dda <memset+0x6>
    5dd8:	6d 93       	st	X+, r22
    5dda:	41 50       	subi	r20, 0x01	; 1
    5ddc:	50 40       	sbci	r21, 0x00	; 0
    5dde:	e0 f7       	brcc	.-8      	; 0x5dd8 <memset+0x4>
    5de0:	08 95       	ret

00005de2 <strcasestr>:
    5de2:	fb 01       	movw	r30, r22
    5de4:	51 91       	ld	r21, Z+
    5de6:	55 23       	and	r21, r21
    5de8:	b1 f0       	breq	.+44     	; 0x5e16 <strcasestr+0x34>
    5dea:	bf 01       	movw	r22, r30
    5dec:	dc 01       	movw	r26, r24
    5dee:	05 2e       	mov	r0, r21
    5df0:	4d 91       	ld	r20, X+
    5df2:	44 23       	and	r20, r20
    5df4:	69 f0       	breq	.+26     	; 0x5e10 <strcasestr+0x2e>
    5df6:	10 d0       	rcall	.+32     	; 0x5e18 <strcasestr+0x36>
    5df8:	d9 f7       	brne	.-10     	; 0x5df0 <strcasestr+0xe>
    5dfa:	cd 01       	movw	r24, r26
    5dfc:	01 90       	ld	r0, Z+
    5dfe:	00 20       	and	r0, r0
    5e00:	49 f0       	breq	.+18     	; 0x5e14 <strcasestr+0x32>
    5e02:	4d 91       	ld	r20, X+
    5e04:	41 11       	cpse	r20, r1
    5e06:	08 d0       	rcall	.+16     	; 0x5e18 <strcasestr+0x36>
    5e08:	c9 f3       	breq	.-14     	; 0x5dfc <strcasestr+0x1a>
    5e0a:	fb 01       	movw	r30, r22
    5e0c:	41 11       	cpse	r20, r1
    5e0e:	ee cf       	rjmp	.-36     	; 0x5dec <strcasestr+0xa>
    5e10:	81 e0       	ldi	r24, 0x01	; 1
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	01 97       	sbiw	r24, 0x01	; 1
    5e16:	08 95       	ret
    5e18:	40 25       	eor	r20, r0
    5e1a:	39 f0       	breq	.+14     	; 0x5e2a <strcasestr+0x48>
    5e1c:	40 32       	cpi	r20, 0x20	; 32
    5e1e:	29 f4       	brne	.+10     	; 0x5e2a <strcasestr+0x48>
    5e20:	40 29       	or	r20, r0
    5e22:	4b 57       	subi	r20, 0x7B	; 123
    5e24:	46 5e       	subi	r20, 0xE6	; 230
    5e26:	08 f0       	brcs	.+2      	; 0x5e2a <strcasestr+0x48>
    5e28:	18 94       	sez
    5e2a:	08 95       	ret

00005e2c <strcat>:
    5e2c:	fb 01       	movw	r30, r22
    5e2e:	dc 01       	movw	r26, r24
    5e30:	0d 90       	ld	r0, X+
    5e32:	00 20       	and	r0, r0
    5e34:	e9 f7       	brne	.-6      	; 0x5e30 <strcat+0x4>
    5e36:	11 97       	sbiw	r26, 0x01	; 1
    5e38:	01 90       	ld	r0, Z+
    5e3a:	0d 92       	st	X+, r0
    5e3c:	00 20       	and	r0, r0
    5e3e:	e1 f7       	brne	.-8      	; 0x5e38 <strcat+0xc>
    5e40:	08 95       	ret

00005e42 <strcpy>:
    5e42:	fb 01       	movw	r30, r22
    5e44:	dc 01       	movw	r26, r24
    5e46:	01 90       	ld	r0, Z+
    5e48:	0d 92       	st	X+, r0
    5e4a:	00 20       	and	r0, r0
    5e4c:	e1 f7       	brne	.-8      	; 0x5e46 <strcpy+0x4>
    5e4e:	08 95       	ret

00005e50 <strncasecmp>:
    5e50:	fb 01       	movw	r30, r22
    5e52:	dc 01       	movw	r26, r24
    5e54:	41 50       	subi	r20, 0x01	; 1
    5e56:	50 40       	sbci	r21, 0x00	; 0
    5e58:	88 f0       	brcs	.+34     	; 0x5e7c <strncasecmp+0x2c>
    5e5a:	8d 91       	ld	r24, X+
    5e5c:	81 34       	cpi	r24, 0x41	; 65
    5e5e:	1c f0       	brlt	.+6      	; 0x5e66 <strncasecmp+0x16>
    5e60:	8b 35       	cpi	r24, 0x5B	; 91
    5e62:	0c f4       	brge	.+2      	; 0x5e66 <strncasecmp+0x16>
    5e64:	80 5e       	subi	r24, 0xE0	; 224
    5e66:	61 91       	ld	r22, Z+
    5e68:	61 34       	cpi	r22, 0x41	; 65
    5e6a:	1c f0       	brlt	.+6      	; 0x5e72 <strncasecmp+0x22>
    5e6c:	6b 35       	cpi	r22, 0x5B	; 91
    5e6e:	0c f4       	brge	.+2      	; 0x5e72 <strncasecmp+0x22>
    5e70:	60 5e       	subi	r22, 0xE0	; 224
    5e72:	86 1b       	sub	r24, r22
    5e74:	61 11       	cpse	r22, r1
    5e76:	71 f3       	breq	.-36     	; 0x5e54 <strncasecmp+0x4>
    5e78:	99 0b       	sbc	r25, r25
    5e7a:	08 95       	ret
    5e7c:	88 1b       	sub	r24, r24
    5e7e:	fc cf       	rjmp	.-8      	; 0x5e78 <strncasecmp+0x28>

00005e80 <printf>:
    5e80:	cf 93       	push	r28
    5e82:	df 93       	push	r29
    5e84:	cd b7       	in	r28, 0x3d	; 61
    5e86:	de b7       	in	r29, 0x3e	; 62
    5e88:	ae 01       	movw	r20, r28
    5e8a:	4a 5f       	subi	r20, 0xFA	; 250
    5e8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e8e:	fa 01       	movw	r30, r20
    5e90:	61 91       	ld	r22, Z+
    5e92:	71 91       	ld	r23, Z+
    5e94:	af 01       	movw	r20, r30
    5e96:	80 91 ba 16 	lds	r24, 0x16BA	; 0x8016ba <__iob+0x2>
    5e9a:	90 91 bb 16 	lds	r25, 0x16BB	; 0x8016bb <__iob+0x3>
    5e9e:	61 d0       	rcall	.+194    	; 0x5f62 <vfprintf>
    5ea0:	df 91       	pop	r29
    5ea2:	cf 91       	pop	r28
    5ea4:	08 95       	ret

00005ea6 <puts>:
    5ea6:	0f 93       	push	r16
    5ea8:	1f 93       	push	r17
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	e0 91 ba 16 	lds	r30, 0x16BA	; 0x8016ba <__iob+0x2>
    5eb2:	f0 91 bb 16 	lds	r31, 0x16BB	; 0x8016bb <__iob+0x3>
    5eb6:	23 81       	ldd	r18, Z+3	; 0x03
    5eb8:	21 ff       	sbrs	r18, 1
    5eba:	1b c0       	rjmp	.+54     	; 0x5ef2 <puts+0x4c>
    5ebc:	8c 01       	movw	r16, r24
    5ebe:	d0 e0       	ldi	r29, 0x00	; 0
    5ec0:	c0 e0       	ldi	r28, 0x00	; 0
    5ec2:	f8 01       	movw	r30, r16
    5ec4:	81 91       	ld	r24, Z+
    5ec6:	8f 01       	movw	r16, r30
    5ec8:	60 91 ba 16 	lds	r22, 0x16BA	; 0x8016ba <__iob+0x2>
    5ecc:	70 91 bb 16 	lds	r23, 0x16BB	; 0x8016bb <__iob+0x3>
    5ed0:	db 01       	movw	r26, r22
    5ed2:	18 96       	adiw	r26, 0x08	; 8
    5ed4:	ed 91       	ld	r30, X+
    5ed6:	fc 91       	ld	r31, X
    5ed8:	19 97       	sbiw	r26, 0x09	; 9
    5eda:	88 23       	and	r24, r24
    5edc:	31 f0       	breq	.+12     	; 0x5eea <puts+0x44>
    5ede:	19 95       	eicall
    5ee0:	89 2b       	or	r24, r25
    5ee2:	79 f3       	breq	.-34     	; 0x5ec2 <puts+0x1c>
    5ee4:	df ef       	ldi	r29, 0xFF	; 255
    5ee6:	cf ef       	ldi	r28, 0xFF	; 255
    5ee8:	ec cf       	rjmp	.-40     	; 0x5ec2 <puts+0x1c>
    5eea:	8a e0       	ldi	r24, 0x0A	; 10
    5eec:	19 95       	eicall
    5eee:	89 2b       	or	r24, r25
    5ef0:	19 f0       	breq	.+6      	; 0x5ef8 <puts+0x52>
    5ef2:	8f ef       	ldi	r24, 0xFF	; 255
    5ef4:	9f ef       	ldi	r25, 0xFF	; 255
    5ef6:	02 c0       	rjmp	.+4      	; 0x5efc <puts+0x56>
    5ef8:	8d 2f       	mov	r24, r29
    5efa:	9c 2f       	mov	r25, r28
    5efc:	df 91       	pop	r29
    5efe:	cf 91       	pop	r28
    5f00:	1f 91       	pop	r17
    5f02:	0f 91       	pop	r16
    5f04:	08 95       	ret

00005f06 <sprintf>:
    5f06:	0f 93       	push	r16
    5f08:	1f 93       	push	r17
    5f0a:	cf 93       	push	r28
    5f0c:	df 93       	push	r29
    5f0e:	cd b7       	in	r28, 0x3d	; 61
    5f10:	de b7       	in	r29, 0x3e	; 62
    5f12:	2e 97       	sbiw	r28, 0x0e	; 14
    5f14:	0f b6       	in	r0, 0x3f	; 63
    5f16:	f8 94       	cli
    5f18:	de bf       	out	0x3e, r29	; 62
    5f1a:	0f be       	out	0x3f, r0	; 63
    5f1c:	cd bf       	out	0x3d, r28	; 61
    5f1e:	0e 89       	ldd	r16, Y+22	; 0x16
    5f20:	1f 89       	ldd	r17, Y+23	; 0x17
    5f22:	86 e0       	ldi	r24, 0x06	; 6
    5f24:	8c 83       	std	Y+4, r24	; 0x04
    5f26:	1a 83       	std	Y+2, r17	; 0x02
    5f28:	09 83       	std	Y+1, r16	; 0x01
    5f2a:	8f ef       	ldi	r24, 0xFF	; 255
    5f2c:	9f e7       	ldi	r25, 0x7F	; 127
    5f2e:	9e 83       	std	Y+6, r25	; 0x06
    5f30:	8d 83       	std	Y+5, r24	; 0x05
    5f32:	ae 01       	movw	r20, r28
    5f34:	46 5e       	subi	r20, 0xE6	; 230
    5f36:	5f 4f       	sbci	r21, 0xFF	; 255
    5f38:	68 8d       	ldd	r22, Y+24	; 0x18
    5f3a:	79 8d       	ldd	r23, Y+25	; 0x19
    5f3c:	ce 01       	movw	r24, r28
    5f3e:	01 96       	adiw	r24, 0x01	; 1
    5f40:	10 d0       	rcall	.+32     	; 0x5f62 <vfprintf>
    5f42:	ef 81       	ldd	r30, Y+7	; 0x07
    5f44:	f8 85       	ldd	r31, Y+8	; 0x08
    5f46:	e0 0f       	add	r30, r16
    5f48:	f1 1f       	adc	r31, r17
    5f4a:	10 82       	st	Z, r1
    5f4c:	2e 96       	adiw	r28, 0x0e	; 14
    5f4e:	0f b6       	in	r0, 0x3f	; 63
    5f50:	f8 94       	cli
    5f52:	de bf       	out	0x3e, r29	; 62
    5f54:	0f be       	out	0x3f, r0	; 63
    5f56:	cd bf       	out	0x3d, r28	; 61
    5f58:	df 91       	pop	r29
    5f5a:	cf 91       	pop	r28
    5f5c:	1f 91       	pop	r17
    5f5e:	0f 91       	pop	r16
    5f60:	08 95       	ret

00005f62 <vfprintf>:
    5f62:	2f 92       	push	r2
    5f64:	3f 92       	push	r3
    5f66:	4f 92       	push	r4
    5f68:	5f 92       	push	r5
    5f6a:	6f 92       	push	r6
    5f6c:	7f 92       	push	r7
    5f6e:	8f 92       	push	r8
    5f70:	9f 92       	push	r9
    5f72:	af 92       	push	r10
    5f74:	bf 92       	push	r11
    5f76:	cf 92       	push	r12
    5f78:	df 92       	push	r13
    5f7a:	ef 92       	push	r14
    5f7c:	ff 92       	push	r15
    5f7e:	0f 93       	push	r16
    5f80:	1f 93       	push	r17
    5f82:	cf 93       	push	r28
    5f84:	df 93       	push	r29
    5f86:	cd b7       	in	r28, 0x3d	; 61
    5f88:	de b7       	in	r29, 0x3e	; 62
    5f8a:	2b 97       	sbiw	r28, 0x0b	; 11
    5f8c:	0f b6       	in	r0, 0x3f	; 63
    5f8e:	f8 94       	cli
    5f90:	de bf       	out	0x3e, r29	; 62
    5f92:	0f be       	out	0x3f, r0	; 63
    5f94:	cd bf       	out	0x3d, r28	; 61
    5f96:	6c 01       	movw	r12, r24
    5f98:	7b 01       	movw	r14, r22
    5f9a:	8a 01       	movw	r16, r20
    5f9c:	fc 01       	movw	r30, r24
    5f9e:	17 82       	std	Z+7, r1	; 0x07
    5fa0:	16 82       	std	Z+6, r1	; 0x06
    5fa2:	83 81       	ldd	r24, Z+3	; 0x03
    5fa4:	81 ff       	sbrs	r24, 1
    5fa6:	bf c1       	rjmp	.+894    	; 0x6326 <vfprintf+0x3c4>
    5fa8:	ce 01       	movw	r24, r28
    5faa:	01 96       	adiw	r24, 0x01	; 1
    5fac:	3c 01       	movw	r6, r24
    5fae:	f6 01       	movw	r30, r12
    5fb0:	93 81       	ldd	r25, Z+3	; 0x03
    5fb2:	f7 01       	movw	r30, r14
    5fb4:	93 fd       	sbrc	r25, 3
    5fb6:	85 91       	lpm	r24, Z+
    5fb8:	93 ff       	sbrs	r25, 3
    5fba:	81 91       	ld	r24, Z+
    5fbc:	7f 01       	movw	r14, r30
    5fbe:	88 23       	and	r24, r24
    5fc0:	09 f4       	brne	.+2      	; 0x5fc4 <vfprintf+0x62>
    5fc2:	ad c1       	rjmp	.+858    	; 0x631e <vfprintf+0x3bc>
    5fc4:	85 32       	cpi	r24, 0x25	; 37
    5fc6:	39 f4       	brne	.+14     	; 0x5fd6 <vfprintf+0x74>
    5fc8:	93 fd       	sbrc	r25, 3
    5fca:	85 91       	lpm	r24, Z+
    5fcc:	93 ff       	sbrs	r25, 3
    5fce:	81 91       	ld	r24, Z+
    5fd0:	7f 01       	movw	r14, r30
    5fd2:	85 32       	cpi	r24, 0x25	; 37
    5fd4:	21 f4       	brne	.+8      	; 0x5fde <vfprintf+0x7c>
    5fd6:	b6 01       	movw	r22, r12
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	d6 d1       	rcall	.+940    	; 0x6388 <fputc>
    5fdc:	e8 cf       	rjmp	.-48     	; 0x5fae <vfprintf+0x4c>
    5fde:	91 2c       	mov	r9, r1
    5fe0:	21 2c       	mov	r2, r1
    5fe2:	31 2c       	mov	r3, r1
    5fe4:	ff e1       	ldi	r31, 0x1F	; 31
    5fe6:	f3 15       	cp	r31, r3
    5fe8:	d8 f0       	brcs	.+54     	; 0x6020 <vfprintf+0xbe>
    5fea:	8b 32       	cpi	r24, 0x2B	; 43
    5fec:	79 f0       	breq	.+30     	; 0x600c <vfprintf+0xaa>
    5fee:	38 f4       	brcc	.+14     	; 0x5ffe <vfprintf+0x9c>
    5ff0:	80 32       	cpi	r24, 0x20	; 32
    5ff2:	79 f0       	breq	.+30     	; 0x6012 <vfprintf+0xb0>
    5ff4:	83 32       	cpi	r24, 0x23	; 35
    5ff6:	a1 f4       	brne	.+40     	; 0x6020 <vfprintf+0xbe>
    5ff8:	23 2d       	mov	r18, r3
    5ffa:	20 61       	ori	r18, 0x10	; 16
    5ffc:	1d c0       	rjmp	.+58     	; 0x6038 <vfprintf+0xd6>
    5ffe:	8d 32       	cpi	r24, 0x2D	; 45
    6000:	61 f0       	breq	.+24     	; 0x601a <vfprintf+0xb8>
    6002:	80 33       	cpi	r24, 0x30	; 48
    6004:	69 f4       	brne	.+26     	; 0x6020 <vfprintf+0xbe>
    6006:	23 2d       	mov	r18, r3
    6008:	21 60       	ori	r18, 0x01	; 1
    600a:	16 c0       	rjmp	.+44     	; 0x6038 <vfprintf+0xd6>
    600c:	83 2d       	mov	r24, r3
    600e:	82 60       	ori	r24, 0x02	; 2
    6010:	38 2e       	mov	r3, r24
    6012:	e3 2d       	mov	r30, r3
    6014:	e4 60       	ori	r30, 0x04	; 4
    6016:	3e 2e       	mov	r3, r30
    6018:	2a c0       	rjmp	.+84     	; 0x606e <vfprintf+0x10c>
    601a:	f3 2d       	mov	r31, r3
    601c:	f8 60       	ori	r31, 0x08	; 8
    601e:	1d c0       	rjmp	.+58     	; 0x605a <vfprintf+0xf8>
    6020:	37 fc       	sbrc	r3, 7
    6022:	2d c0       	rjmp	.+90     	; 0x607e <vfprintf+0x11c>
    6024:	20 ed       	ldi	r18, 0xD0	; 208
    6026:	28 0f       	add	r18, r24
    6028:	2a 30       	cpi	r18, 0x0A	; 10
    602a:	40 f0       	brcs	.+16     	; 0x603c <vfprintf+0xda>
    602c:	8e 32       	cpi	r24, 0x2E	; 46
    602e:	b9 f4       	brne	.+46     	; 0x605e <vfprintf+0xfc>
    6030:	36 fc       	sbrc	r3, 6
    6032:	75 c1       	rjmp	.+746    	; 0x631e <vfprintf+0x3bc>
    6034:	23 2d       	mov	r18, r3
    6036:	20 64       	ori	r18, 0x40	; 64
    6038:	32 2e       	mov	r3, r18
    603a:	19 c0       	rjmp	.+50     	; 0x606e <vfprintf+0x10c>
    603c:	36 fe       	sbrs	r3, 6
    603e:	06 c0       	rjmp	.+12     	; 0x604c <vfprintf+0xea>
    6040:	8a e0       	ldi	r24, 0x0A	; 10
    6042:	98 9e       	mul	r9, r24
    6044:	20 0d       	add	r18, r0
    6046:	11 24       	eor	r1, r1
    6048:	92 2e       	mov	r9, r18
    604a:	11 c0       	rjmp	.+34     	; 0x606e <vfprintf+0x10c>
    604c:	ea e0       	ldi	r30, 0x0A	; 10
    604e:	2e 9e       	mul	r2, r30
    6050:	20 0d       	add	r18, r0
    6052:	11 24       	eor	r1, r1
    6054:	22 2e       	mov	r2, r18
    6056:	f3 2d       	mov	r31, r3
    6058:	f0 62       	ori	r31, 0x20	; 32
    605a:	3f 2e       	mov	r3, r31
    605c:	08 c0       	rjmp	.+16     	; 0x606e <vfprintf+0x10c>
    605e:	8c 36       	cpi	r24, 0x6C	; 108
    6060:	21 f4       	brne	.+8      	; 0x606a <vfprintf+0x108>
    6062:	83 2d       	mov	r24, r3
    6064:	80 68       	ori	r24, 0x80	; 128
    6066:	38 2e       	mov	r3, r24
    6068:	02 c0       	rjmp	.+4      	; 0x606e <vfprintf+0x10c>
    606a:	88 36       	cpi	r24, 0x68	; 104
    606c:	41 f4       	brne	.+16     	; 0x607e <vfprintf+0x11c>
    606e:	f7 01       	movw	r30, r14
    6070:	93 fd       	sbrc	r25, 3
    6072:	85 91       	lpm	r24, Z+
    6074:	93 ff       	sbrs	r25, 3
    6076:	81 91       	ld	r24, Z+
    6078:	7f 01       	movw	r14, r30
    607a:	81 11       	cpse	r24, r1
    607c:	b3 cf       	rjmp	.-154    	; 0x5fe4 <vfprintf+0x82>
    607e:	98 2f       	mov	r25, r24
    6080:	9f 7d       	andi	r25, 0xDF	; 223
    6082:	95 54       	subi	r25, 0x45	; 69
    6084:	93 30       	cpi	r25, 0x03	; 3
    6086:	28 f4       	brcc	.+10     	; 0x6092 <vfprintf+0x130>
    6088:	0c 5f       	subi	r16, 0xFC	; 252
    608a:	1f 4f       	sbci	r17, 0xFF	; 255
    608c:	9f e3       	ldi	r25, 0x3F	; 63
    608e:	99 83       	std	Y+1, r25	; 0x01
    6090:	0d c0       	rjmp	.+26     	; 0x60ac <vfprintf+0x14a>
    6092:	83 36       	cpi	r24, 0x63	; 99
    6094:	31 f0       	breq	.+12     	; 0x60a2 <vfprintf+0x140>
    6096:	83 37       	cpi	r24, 0x73	; 115
    6098:	71 f0       	breq	.+28     	; 0x60b6 <vfprintf+0x154>
    609a:	83 35       	cpi	r24, 0x53	; 83
    609c:	09 f0       	breq	.+2      	; 0x60a0 <vfprintf+0x13e>
    609e:	55 c0       	rjmp	.+170    	; 0x614a <vfprintf+0x1e8>
    60a0:	20 c0       	rjmp	.+64     	; 0x60e2 <vfprintf+0x180>
    60a2:	f8 01       	movw	r30, r16
    60a4:	80 81       	ld	r24, Z
    60a6:	89 83       	std	Y+1, r24	; 0x01
    60a8:	0e 5f       	subi	r16, 0xFE	; 254
    60aa:	1f 4f       	sbci	r17, 0xFF	; 255
    60ac:	88 24       	eor	r8, r8
    60ae:	83 94       	inc	r8
    60b0:	91 2c       	mov	r9, r1
    60b2:	53 01       	movw	r10, r6
    60b4:	12 c0       	rjmp	.+36     	; 0x60da <vfprintf+0x178>
    60b6:	28 01       	movw	r4, r16
    60b8:	f2 e0       	ldi	r31, 0x02	; 2
    60ba:	4f 0e       	add	r4, r31
    60bc:	51 1c       	adc	r5, r1
    60be:	f8 01       	movw	r30, r16
    60c0:	a0 80       	ld	r10, Z
    60c2:	b1 80       	ldd	r11, Z+1	; 0x01
    60c4:	36 fe       	sbrs	r3, 6
    60c6:	03 c0       	rjmp	.+6      	; 0x60ce <vfprintf+0x16c>
    60c8:	69 2d       	mov	r22, r9
    60ca:	70 e0       	ldi	r23, 0x00	; 0
    60cc:	02 c0       	rjmp	.+4      	; 0x60d2 <vfprintf+0x170>
    60ce:	6f ef       	ldi	r22, 0xFF	; 255
    60d0:	7f ef       	ldi	r23, 0xFF	; 255
    60d2:	c5 01       	movw	r24, r10
    60d4:	4e d1       	rcall	.+668    	; 0x6372 <strnlen>
    60d6:	4c 01       	movw	r8, r24
    60d8:	82 01       	movw	r16, r4
    60da:	f3 2d       	mov	r31, r3
    60dc:	ff 77       	andi	r31, 0x7F	; 127
    60de:	3f 2e       	mov	r3, r31
    60e0:	15 c0       	rjmp	.+42     	; 0x610c <vfprintf+0x1aa>
    60e2:	28 01       	movw	r4, r16
    60e4:	22 e0       	ldi	r18, 0x02	; 2
    60e6:	42 0e       	add	r4, r18
    60e8:	51 1c       	adc	r5, r1
    60ea:	f8 01       	movw	r30, r16
    60ec:	a0 80       	ld	r10, Z
    60ee:	b1 80       	ldd	r11, Z+1	; 0x01
    60f0:	36 fe       	sbrs	r3, 6
    60f2:	03 c0       	rjmp	.+6      	; 0x60fa <vfprintf+0x198>
    60f4:	69 2d       	mov	r22, r9
    60f6:	70 e0       	ldi	r23, 0x00	; 0
    60f8:	02 c0       	rjmp	.+4      	; 0x60fe <vfprintf+0x19c>
    60fa:	6f ef       	ldi	r22, 0xFF	; 255
    60fc:	7f ef       	ldi	r23, 0xFF	; 255
    60fe:	c5 01       	movw	r24, r10
    6100:	2d d1       	rcall	.+602    	; 0x635c <strnlen_P>
    6102:	4c 01       	movw	r8, r24
    6104:	f3 2d       	mov	r31, r3
    6106:	f0 68       	ori	r31, 0x80	; 128
    6108:	3f 2e       	mov	r3, r31
    610a:	82 01       	movw	r16, r4
    610c:	33 fc       	sbrc	r3, 3
    610e:	19 c0       	rjmp	.+50     	; 0x6142 <vfprintf+0x1e0>
    6110:	82 2d       	mov	r24, r2
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	88 16       	cp	r8, r24
    6116:	99 06       	cpc	r9, r25
    6118:	a0 f4       	brcc	.+40     	; 0x6142 <vfprintf+0x1e0>
    611a:	b6 01       	movw	r22, r12
    611c:	80 e2       	ldi	r24, 0x20	; 32
    611e:	90 e0       	ldi	r25, 0x00	; 0
    6120:	33 d1       	rcall	.+614    	; 0x6388 <fputc>
    6122:	2a 94       	dec	r2
    6124:	f5 cf       	rjmp	.-22     	; 0x6110 <vfprintf+0x1ae>
    6126:	f5 01       	movw	r30, r10
    6128:	37 fc       	sbrc	r3, 7
    612a:	85 91       	lpm	r24, Z+
    612c:	37 fe       	sbrs	r3, 7
    612e:	81 91       	ld	r24, Z+
    6130:	5f 01       	movw	r10, r30
    6132:	b6 01       	movw	r22, r12
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	28 d1       	rcall	.+592    	; 0x6388 <fputc>
    6138:	21 10       	cpse	r2, r1
    613a:	2a 94       	dec	r2
    613c:	21 e0       	ldi	r18, 0x01	; 1
    613e:	82 1a       	sub	r8, r18
    6140:	91 08       	sbc	r9, r1
    6142:	81 14       	cp	r8, r1
    6144:	91 04       	cpc	r9, r1
    6146:	79 f7       	brne	.-34     	; 0x6126 <vfprintf+0x1c4>
    6148:	e1 c0       	rjmp	.+450    	; 0x630c <vfprintf+0x3aa>
    614a:	84 36       	cpi	r24, 0x64	; 100
    614c:	11 f0       	breq	.+4      	; 0x6152 <vfprintf+0x1f0>
    614e:	89 36       	cpi	r24, 0x69	; 105
    6150:	39 f5       	brne	.+78     	; 0x61a0 <vfprintf+0x23e>
    6152:	f8 01       	movw	r30, r16
    6154:	37 fe       	sbrs	r3, 7
    6156:	07 c0       	rjmp	.+14     	; 0x6166 <vfprintf+0x204>
    6158:	60 81       	ld	r22, Z
    615a:	71 81       	ldd	r23, Z+1	; 0x01
    615c:	82 81       	ldd	r24, Z+2	; 0x02
    615e:	93 81       	ldd	r25, Z+3	; 0x03
    6160:	0c 5f       	subi	r16, 0xFC	; 252
    6162:	1f 4f       	sbci	r17, 0xFF	; 255
    6164:	08 c0       	rjmp	.+16     	; 0x6176 <vfprintf+0x214>
    6166:	60 81       	ld	r22, Z
    6168:	71 81       	ldd	r23, Z+1	; 0x01
    616a:	07 2e       	mov	r0, r23
    616c:	00 0c       	add	r0, r0
    616e:	88 0b       	sbc	r24, r24
    6170:	99 0b       	sbc	r25, r25
    6172:	0e 5f       	subi	r16, 0xFE	; 254
    6174:	1f 4f       	sbci	r17, 0xFF	; 255
    6176:	f3 2d       	mov	r31, r3
    6178:	ff 76       	andi	r31, 0x6F	; 111
    617a:	3f 2e       	mov	r3, r31
    617c:	97 ff       	sbrs	r25, 7
    617e:	09 c0       	rjmp	.+18     	; 0x6192 <vfprintf+0x230>
    6180:	90 95       	com	r25
    6182:	80 95       	com	r24
    6184:	70 95       	com	r23
    6186:	61 95       	neg	r22
    6188:	7f 4f       	sbci	r23, 0xFF	; 255
    618a:	8f 4f       	sbci	r24, 0xFF	; 255
    618c:	9f 4f       	sbci	r25, 0xFF	; 255
    618e:	f0 68       	ori	r31, 0x80	; 128
    6190:	3f 2e       	mov	r3, r31
    6192:	2a e0       	ldi	r18, 0x0A	; 10
    6194:	30 e0       	ldi	r19, 0x00	; 0
    6196:	a3 01       	movw	r20, r6
    6198:	33 d1       	rcall	.+614    	; 0x6400 <__ultoa_invert>
    619a:	88 2e       	mov	r8, r24
    619c:	86 18       	sub	r8, r6
    619e:	44 c0       	rjmp	.+136    	; 0x6228 <vfprintf+0x2c6>
    61a0:	85 37       	cpi	r24, 0x75	; 117
    61a2:	31 f4       	brne	.+12     	; 0x61b0 <vfprintf+0x24e>
    61a4:	23 2d       	mov	r18, r3
    61a6:	2f 7e       	andi	r18, 0xEF	; 239
    61a8:	b2 2e       	mov	r11, r18
    61aa:	2a e0       	ldi	r18, 0x0A	; 10
    61ac:	30 e0       	ldi	r19, 0x00	; 0
    61ae:	25 c0       	rjmp	.+74     	; 0x61fa <vfprintf+0x298>
    61b0:	93 2d       	mov	r25, r3
    61b2:	99 7f       	andi	r25, 0xF9	; 249
    61b4:	b9 2e       	mov	r11, r25
    61b6:	8f 36       	cpi	r24, 0x6F	; 111
    61b8:	c1 f0       	breq	.+48     	; 0x61ea <vfprintf+0x288>
    61ba:	18 f4       	brcc	.+6      	; 0x61c2 <vfprintf+0x260>
    61bc:	88 35       	cpi	r24, 0x58	; 88
    61be:	79 f0       	breq	.+30     	; 0x61de <vfprintf+0x27c>
    61c0:	ae c0       	rjmp	.+348    	; 0x631e <vfprintf+0x3bc>
    61c2:	80 37       	cpi	r24, 0x70	; 112
    61c4:	19 f0       	breq	.+6      	; 0x61cc <vfprintf+0x26a>
    61c6:	88 37       	cpi	r24, 0x78	; 120
    61c8:	21 f0       	breq	.+8      	; 0x61d2 <vfprintf+0x270>
    61ca:	a9 c0       	rjmp	.+338    	; 0x631e <vfprintf+0x3bc>
    61cc:	e9 2f       	mov	r30, r25
    61ce:	e0 61       	ori	r30, 0x10	; 16
    61d0:	be 2e       	mov	r11, r30
    61d2:	b4 fe       	sbrs	r11, 4
    61d4:	0d c0       	rjmp	.+26     	; 0x61f0 <vfprintf+0x28e>
    61d6:	fb 2d       	mov	r31, r11
    61d8:	f4 60       	ori	r31, 0x04	; 4
    61da:	bf 2e       	mov	r11, r31
    61dc:	09 c0       	rjmp	.+18     	; 0x61f0 <vfprintf+0x28e>
    61de:	34 fe       	sbrs	r3, 4
    61e0:	0a c0       	rjmp	.+20     	; 0x61f6 <vfprintf+0x294>
    61e2:	29 2f       	mov	r18, r25
    61e4:	26 60       	ori	r18, 0x06	; 6
    61e6:	b2 2e       	mov	r11, r18
    61e8:	06 c0       	rjmp	.+12     	; 0x61f6 <vfprintf+0x294>
    61ea:	28 e0       	ldi	r18, 0x08	; 8
    61ec:	30 e0       	ldi	r19, 0x00	; 0
    61ee:	05 c0       	rjmp	.+10     	; 0x61fa <vfprintf+0x298>
    61f0:	20 e1       	ldi	r18, 0x10	; 16
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	02 c0       	rjmp	.+4      	; 0x61fa <vfprintf+0x298>
    61f6:	20 e1       	ldi	r18, 0x10	; 16
    61f8:	32 e0       	ldi	r19, 0x02	; 2
    61fa:	f8 01       	movw	r30, r16
    61fc:	b7 fe       	sbrs	r11, 7
    61fe:	07 c0       	rjmp	.+14     	; 0x620e <vfprintf+0x2ac>
    6200:	60 81       	ld	r22, Z
    6202:	71 81       	ldd	r23, Z+1	; 0x01
    6204:	82 81       	ldd	r24, Z+2	; 0x02
    6206:	93 81       	ldd	r25, Z+3	; 0x03
    6208:	0c 5f       	subi	r16, 0xFC	; 252
    620a:	1f 4f       	sbci	r17, 0xFF	; 255
    620c:	06 c0       	rjmp	.+12     	; 0x621a <vfprintf+0x2b8>
    620e:	60 81       	ld	r22, Z
    6210:	71 81       	ldd	r23, Z+1	; 0x01
    6212:	80 e0       	ldi	r24, 0x00	; 0
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	0e 5f       	subi	r16, 0xFE	; 254
    6218:	1f 4f       	sbci	r17, 0xFF	; 255
    621a:	a3 01       	movw	r20, r6
    621c:	f1 d0       	rcall	.+482    	; 0x6400 <__ultoa_invert>
    621e:	88 2e       	mov	r8, r24
    6220:	86 18       	sub	r8, r6
    6222:	fb 2d       	mov	r31, r11
    6224:	ff 77       	andi	r31, 0x7F	; 127
    6226:	3f 2e       	mov	r3, r31
    6228:	36 fe       	sbrs	r3, 6
    622a:	0d c0       	rjmp	.+26     	; 0x6246 <vfprintf+0x2e4>
    622c:	23 2d       	mov	r18, r3
    622e:	2e 7f       	andi	r18, 0xFE	; 254
    6230:	a2 2e       	mov	r10, r18
    6232:	89 14       	cp	r8, r9
    6234:	58 f4       	brcc	.+22     	; 0x624c <vfprintf+0x2ea>
    6236:	34 fe       	sbrs	r3, 4
    6238:	0b c0       	rjmp	.+22     	; 0x6250 <vfprintf+0x2ee>
    623a:	32 fc       	sbrc	r3, 2
    623c:	09 c0       	rjmp	.+18     	; 0x6250 <vfprintf+0x2ee>
    623e:	83 2d       	mov	r24, r3
    6240:	8e 7e       	andi	r24, 0xEE	; 238
    6242:	a8 2e       	mov	r10, r24
    6244:	05 c0       	rjmp	.+10     	; 0x6250 <vfprintf+0x2ee>
    6246:	b8 2c       	mov	r11, r8
    6248:	a3 2c       	mov	r10, r3
    624a:	03 c0       	rjmp	.+6      	; 0x6252 <vfprintf+0x2f0>
    624c:	b8 2c       	mov	r11, r8
    624e:	01 c0       	rjmp	.+2      	; 0x6252 <vfprintf+0x2f0>
    6250:	b9 2c       	mov	r11, r9
    6252:	a4 fe       	sbrs	r10, 4
    6254:	0f c0       	rjmp	.+30     	; 0x6274 <vfprintf+0x312>
    6256:	fe 01       	movw	r30, r28
    6258:	e8 0d       	add	r30, r8
    625a:	f1 1d       	adc	r31, r1
    625c:	80 81       	ld	r24, Z
    625e:	80 33       	cpi	r24, 0x30	; 48
    6260:	21 f4       	brne	.+8      	; 0x626a <vfprintf+0x308>
    6262:	9a 2d       	mov	r25, r10
    6264:	99 7e       	andi	r25, 0xE9	; 233
    6266:	a9 2e       	mov	r10, r25
    6268:	09 c0       	rjmp	.+18     	; 0x627c <vfprintf+0x31a>
    626a:	a2 fe       	sbrs	r10, 2
    626c:	06 c0       	rjmp	.+12     	; 0x627a <vfprintf+0x318>
    626e:	b3 94       	inc	r11
    6270:	b3 94       	inc	r11
    6272:	04 c0       	rjmp	.+8      	; 0x627c <vfprintf+0x31a>
    6274:	8a 2d       	mov	r24, r10
    6276:	86 78       	andi	r24, 0x86	; 134
    6278:	09 f0       	breq	.+2      	; 0x627c <vfprintf+0x31a>
    627a:	b3 94       	inc	r11
    627c:	a3 fc       	sbrc	r10, 3
    627e:	10 c0       	rjmp	.+32     	; 0x62a0 <vfprintf+0x33e>
    6280:	a0 fe       	sbrs	r10, 0
    6282:	06 c0       	rjmp	.+12     	; 0x6290 <vfprintf+0x32e>
    6284:	b2 14       	cp	r11, r2
    6286:	80 f4       	brcc	.+32     	; 0x62a8 <vfprintf+0x346>
    6288:	28 0c       	add	r2, r8
    628a:	92 2c       	mov	r9, r2
    628c:	9b 18       	sub	r9, r11
    628e:	0d c0       	rjmp	.+26     	; 0x62aa <vfprintf+0x348>
    6290:	b2 14       	cp	r11, r2
    6292:	58 f4       	brcc	.+22     	; 0x62aa <vfprintf+0x348>
    6294:	b6 01       	movw	r22, r12
    6296:	80 e2       	ldi	r24, 0x20	; 32
    6298:	90 e0       	ldi	r25, 0x00	; 0
    629a:	76 d0       	rcall	.+236    	; 0x6388 <fputc>
    629c:	b3 94       	inc	r11
    629e:	f8 cf       	rjmp	.-16     	; 0x6290 <vfprintf+0x32e>
    62a0:	b2 14       	cp	r11, r2
    62a2:	18 f4       	brcc	.+6      	; 0x62aa <vfprintf+0x348>
    62a4:	2b 18       	sub	r2, r11
    62a6:	02 c0       	rjmp	.+4      	; 0x62ac <vfprintf+0x34a>
    62a8:	98 2c       	mov	r9, r8
    62aa:	21 2c       	mov	r2, r1
    62ac:	a4 fe       	sbrs	r10, 4
    62ae:	0f c0       	rjmp	.+30     	; 0x62ce <vfprintf+0x36c>
    62b0:	b6 01       	movw	r22, r12
    62b2:	80 e3       	ldi	r24, 0x30	; 48
    62b4:	90 e0       	ldi	r25, 0x00	; 0
    62b6:	68 d0       	rcall	.+208    	; 0x6388 <fputc>
    62b8:	a2 fe       	sbrs	r10, 2
    62ba:	16 c0       	rjmp	.+44     	; 0x62e8 <vfprintf+0x386>
    62bc:	a1 fc       	sbrc	r10, 1
    62be:	03 c0       	rjmp	.+6      	; 0x62c6 <vfprintf+0x364>
    62c0:	88 e7       	ldi	r24, 0x78	; 120
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	02 c0       	rjmp	.+4      	; 0x62ca <vfprintf+0x368>
    62c6:	88 e5       	ldi	r24, 0x58	; 88
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	b6 01       	movw	r22, r12
    62cc:	0c c0       	rjmp	.+24     	; 0x62e6 <vfprintf+0x384>
    62ce:	8a 2d       	mov	r24, r10
    62d0:	86 78       	andi	r24, 0x86	; 134
    62d2:	51 f0       	breq	.+20     	; 0x62e8 <vfprintf+0x386>
    62d4:	a1 fe       	sbrs	r10, 1
    62d6:	02 c0       	rjmp	.+4      	; 0x62dc <vfprintf+0x37a>
    62d8:	8b e2       	ldi	r24, 0x2B	; 43
    62da:	01 c0       	rjmp	.+2      	; 0x62de <vfprintf+0x37c>
    62dc:	80 e2       	ldi	r24, 0x20	; 32
    62de:	a7 fc       	sbrc	r10, 7
    62e0:	8d e2       	ldi	r24, 0x2D	; 45
    62e2:	b6 01       	movw	r22, r12
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	50 d0       	rcall	.+160    	; 0x6388 <fputc>
    62e8:	89 14       	cp	r8, r9
    62ea:	30 f4       	brcc	.+12     	; 0x62f8 <vfprintf+0x396>
    62ec:	b6 01       	movw	r22, r12
    62ee:	80 e3       	ldi	r24, 0x30	; 48
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	4a d0       	rcall	.+148    	; 0x6388 <fputc>
    62f4:	9a 94       	dec	r9
    62f6:	f8 cf       	rjmp	.-16     	; 0x62e8 <vfprintf+0x386>
    62f8:	8a 94       	dec	r8
    62fa:	f3 01       	movw	r30, r6
    62fc:	e8 0d       	add	r30, r8
    62fe:	f1 1d       	adc	r31, r1
    6300:	80 81       	ld	r24, Z
    6302:	b6 01       	movw	r22, r12
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	40 d0       	rcall	.+128    	; 0x6388 <fputc>
    6308:	81 10       	cpse	r8, r1
    630a:	f6 cf       	rjmp	.-20     	; 0x62f8 <vfprintf+0x396>
    630c:	22 20       	and	r2, r2
    630e:	09 f4       	brne	.+2      	; 0x6312 <vfprintf+0x3b0>
    6310:	4e ce       	rjmp	.-868    	; 0x5fae <vfprintf+0x4c>
    6312:	b6 01       	movw	r22, r12
    6314:	80 e2       	ldi	r24, 0x20	; 32
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	37 d0       	rcall	.+110    	; 0x6388 <fputc>
    631a:	2a 94       	dec	r2
    631c:	f7 cf       	rjmp	.-18     	; 0x630c <vfprintf+0x3aa>
    631e:	f6 01       	movw	r30, r12
    6320:	86 81       	ldd	r24, Z+6	; 0x06
    6322:	97 81       	ldd	r25, Z+7	; 0x07
    6324:	02 c0       	rjmp	.+4      	; 0x632a <vfprintf+0x3c8>
    6326:	8f ef       	ldi	r24, 0xFF	; 255
    6328:	9f ef       	ldi	r25, 0xFF	; 255
    632a:	2b 96       	adiw	r28, 0x0b	; 11
    632c:	0f b6       	in	r0, 0x3f	; 63
    632e:	f8 94       	cli
    6330:	de bf       	out	0x3e, r29	; 62
    6332:	0f be       	out	0x3f, r0	; 63
    6334:	cd bf       	out	0x3d, r28	; 61
    6336:	df 91       	pop	r29
    6338:	cf 91       	pop	r28
    633a:	1f 91       	pop	r17
    633c:	0f 91       	pop	r16
    633e:	ff 90       	pop	r15
    6340:	ef 90       	pop	r14
    6342:	df 90       	pop	r13
    6344:	cf 90       	pop	r12
    6346:	bf 90       	pop	r11
    6348:	af 90       	pop	r10
    634a:	9f 90       	pop	r9
    634c:	8f 90       	pop	r8
    634e:	7f 90       	pop	r7
    6350:	6f 90       	pop	r6
    6352:	5f 90       	pop	r5
    6354:	4f 90       	pop	r4
    6356:	3f 90       	pop	r3
    6358:	2f 90       	pop	r2
    635a:	08 95       	ret

0000635c <strnlen_P>:
    635c:	fc 01       	movw	r30, r24
    635e:	05 90       	lpm	r0, Z+
    6360:	61 50       	subi	r22, 0x01	; 1
    6362:	70 40       	sbci	r23, 0x00	; 0
    6364:	01 10       	cpse	r0, r1
    6366:	d8 f7       	brcc	.-10     	; 0x635e <strnlen_P+0x2>
    6368:	80 95       	com	r24
    636a:	90 95       	com	r25
    636c:	8e 0f       	add	r24, r30
    636e:	9f 1f       	adc	r25, r31
    6370:	08 95       	ret

00006372 <strnlen>:
    6372:	fc 01       	movw	r30, r24
    6374:	61 50       	subi	r22, 0x01	; 1
    6376:	70 40       	sbci	r23, 0x00	; 0
    6378:	01 90       	ld	r0, Z+
    637a:	01 10       	cpse	r0, r1
    637c:	d8 f7       	brcc	.-10     	; 0x6374 <strnlen+0x2>
    637e:	80 95       	com	r24
    6380:	90 95       	com	r25
    6382:	8e 0f       	add	r24, r30
    6384:	9f 1f       	adc	r25, r31
    6386:	08 95       	ret

00006388 <fputc>:
    6388:	0f 93       	push	r16
    638a:	1f 93       	push	r17
    638c:	cf 93       	push	r28
    638e:	df 93       	push	r29
    6390:	fb 01       	movw	r30, r22
    6392:	23 81       	ldd	r18, Z+3	; 0x03
    6394:	21 fd       	sbrc	r18, 1
    6396:	03 c0       	rjmp	.+6      	; 0x639e <fputc+0x16>
    6398:	8f ef       	ldi	r24, 0xFF	; 255
    639a:	9f ef       	ldi	r25, 0xFF	; 255
    639c:	2c c0       	rjmp	.+88     	; 0x63f6 <fputc+0x6e>
    639e:	22 ff       	sbrs	r18, 2
    63a0:	16 c0       	rjmp	.+44     	; 0x63ce <fputc+0x46>
    63a2:	46 81       	ldd	r20, Z+6	; 0x06
    63a4:	57 81       	ldd	r21, Z+7	; 0x07
    63a6:	24 81       	ldd	r18, Z+4	; 0x04
    63a8:	35 81       	ldd	r19, Z+5	; 0x05
    63aa:	42 17       	cp	r20, r18
    63ac:	53 07       	cpc	r21, r19
    63ae:	44 f4       	brge	.+16     	; 0x63c0 <fputc+0x38>
    63b0:	a0 81       	ld	r26, Z
    63b2:	b1 81       	ldd	r27, Z+1	; 0x01
    63b4:	9d 01       	movw	r18, r26
    63b6:	2f 5f       	subi	r18, 0xFF	; 255
    63b8:	3f 4f       	sbci	r19, 0xFF	; 255
    63ba:	31 83       	std	Z+1, r19	; 0x01
    63bc:	20 83       	st	Z, r18
    63be:	8c 93       	st	X, r24
    63c0:	26 81       	ldd	r18, Z+6	; 0x06
    63c2:	37 81       	ldd	r19, Z+7	; 0x07
    63c4:	2f 5f       	subi	r18, 0xFF	; 255
    63c6:	3f 4f       	sbci	r19, 0xFF	; 255
    63c8:	37 83       	std	Z+7, r19	; 0x07
    63ca:	26 83       	std	Z+6, r18	; 0x06
    63cc:	14 c0       	rjmp	.+40     	; 0x63f6 <fputc+0x6e>
    63ce:	8b 01       	movw	r16, r22
    63d0:	ec 01       	movw	r28, r24
    63d2:	fb 01       	movw	r30, r22
    63d4:	00 84       	ldd	r0, Z+8	; 0x08
    63d6:	f1 85       	ldd	r31, Z+9	; 0x09
    63d8:	e0 2d       	mov	r30, r0
    63da:	19 95       	eicall
    63dc:	89 2b       	or	r24, r25
    63de:	e1 f6       	brne	.-72     	; 0x6398 <fputc+0x10>
    63e0:	d8 01       	movw	r26, r16
    63e2:	16 96       	adiw	r26, 0x06	; 6
    63e4:	8d 91       	ld	r24, X+
    63e6:	9c 91       	ld	r25, X
    63e8:	17 97       	sbiw	r26, 0x07	; 7
    63ea:	01 96       	adiw	r24, 0x01	; 1
    63ec:	17 96       	adiw	r26, 0x07	; 7
    63ee:	9c 93       	st	X, r25
    63f0:	8e 93       	st	-X, r24
    63f2:	16 97       	sbiw	r26, 0x06	; 6
    63f4:	ce 01       	movw	r24, r28
    63f6:	df 91       	pop	r29
    63f8:	cf 91       	pop	r28
    63fa:	1f 91       	pop	r17
    63fc:	0f 91       	pop	r16
    63fe:	08 95       	ret

00006400 <__ultoa_invert>:
    6400:	fa 01       	movw	r30, r20
    6402:	aa 27       	eor	r26, r26
    6404:	28 30       	cpi	r18, 0x08	; 8
    6406:	51 f1       	breq	.+84     	; 0x645c <__ultoa_invert+0x5c>
    6408:	20 31       	cpi	r18, 0x10	; 16
    640a:	81 f1       	breq	.+96     	; 0x646c <__ultoa_invert+0x6c>
    640c:	e8 94       	clt
    640e:	6f 93       	push	r22
    6410:	6e 7f       	andi	r22, 0xFE	; 254
    6412:	6e 5f       	subi	r22, 0xFE	; 254
    6414:	7f 4f       	sbci	r23, 0xFF	; 255
    6416:	8f 4f       	sbci	r24, 0xFF	; 255
    6418:	9f 4f       	sbci	r25, 0xFF	; 255
    641a:	af 4f       	sbci	r26, 0xFF	; 255
    641c:	b1 e0       	ldi	r27, 0x01	; 1
    641e:	3e d0       	rcall	.+124    	; 0x649c <__ultoa_invert+0x9c>
    6420:	b4 e0       	ldi	r27, 0x04	; 4
    6422:	3c d0       	rcall	.+120    	; 0x649c <__ultoa_invert+0x9c>
    6424:	67 0f       	add	r22, r23
    6426:	78 1f       	adc	r23, r24
    6428:	89 1f       	adc	r24, r25
    642a:	9a 1f       	adc	r25, r26
    642c:	a1 1d       	adc	r26, r1
    642e:	68 0f       	add	r22, r24
    6430:	79 1f       	adc	r23, r25
    6432:	8a 1f       	adc	r24, r26
    6434:	91 1d       	adc	r25, r1
    6436:	a1 1d       	adc	r26, r1
    6438:	6a 0f       	add	r22, r26
    643a:	71 1d       	adc	r23, r1
    643c:	81 1d       	adc	r24, r1
    643e:	91 1d       	adc	r25, r1
    6440:	a1 1d       	adc	r26, r1
    6442:	20 d0       	rcall	.+64     	; 0x6484 <__ultoa_invert+0x84>
    6444:	09 f4       	brne	.+2      	; 0x6448 <__ultoa_invert+0x48>
    6446:	68 94       	set
    6448:	3f 91       	pop	r19
    644a:	2a e0       	ldi	r18, 0x0A	; 10
    644c:	26 9f       	mul	r18, r22
    644e:	11 24       	eor	r1, r1
    6450:	30 19       	sub	r19, r0
    6452:	30 5d       	subi	r19, 0xD0	; 208
    6454:	31 93       	st	Z+, r19
    6456:	de f6       	brtc	.-74     	; 0x640e <__ultoa_invert+0xe>
    6458:	cf 01       	movw	r24, r30
    645a:	08 95       	ret
    645c:	46 2f       	mov	r20, r22
    645e:	47 70       	andi	r20, 0x07	; 7
    6460:	40 5d       	subi	r20, 0xD0	; 208
    6462:	41 93       	st	Z+, r20
    6464:	b3 e0       	ldi	r27, 0x03	; 3
    6466:	0f d0       	rcall	.+30     	; 0x6486 <__ultoa_invert+0x86>
    6468:	c9 f7       	brne	.-14     	; 0x645c <__ultoa_invert+0x5c>
    646a:	f6 cf       	rjmp	.-20     	; 0x6458 <__ultoa_invert+0x58>
    646c:	46 2f       	mov	r20, r22
    646e:	4f 70       	andi	r20, 0x0F	; 15
    6470:	40 5d       	subi	r20, 0xD0	; 208
    6472:	4a 33       	cpi	r20, 0x3A	; 58
    6474:	18 f0       	brcs	.+6      	; 0x647c <__ultoa_invert+0x7c>
    6476:	49 5d       	subi	r20, 0xD9	; 217
    6478:	31 fd       	sbrc	r19, 1
    647a:	40 52       	subi	r20, 0x20	; 32
    647c:	41 93       	st	Z+, r20
    647e:	02 d0       	rcall	.+4      	; 0x6484 <__ultoa_invert+0x84>
    6480:	a9 f7       	brne	.-22     	; 0x646c <__ultoa_invert+0x6c>
    6482:	ea cf       	rjmp	.-44     	; 0x6458 <__ultoa_invert+0x58>
    6484:	b4 e0       	ldi	r27, 0x04	; 4
    6486:	a6 95       	lsr	r26
    6488:	97 95       	ror	r25
    648a:	87 95       	ror	r24
    648c:	77 95       	ror	r23
    648e:	67 95       	ror	r22
    6490:	ba 95       	dec	r27
    6492:	c9 f7       	brne	.-14     	; 0x6486 <__ultoa_invert+0x86>
    6494:	00 97       	sbiw	r24, 0x00	; 0
    6496:	61 05       	cpc	r22, r1
    6498:	71 05       	cpc	r23, r1
    649a:	08 95       	ret
    649c:	9b 01       	movw	r18, r22
    649e:	ac 01       	movw	r20, r24
    64a0:	0a 2e       	mov	r0, r26
    64a2:	06 94       	lsr	r0
    64a4:	57 95       	ror	r21
    64a6:	47 95       	ror	r20
    64a8:	37 95       	ror	r19
    64aa:	27 95       	ror	r18
    64ac:	ba 95       	dec	r27
    64ae:	c9 f7       	brne	.-14     	; 0x64a2 <__ultoa_invert+0xa2>
    64b0:	62 0f       	add	r22, r18
    64b2:	73 1f       	adc	r23, r19
    64b4:	84 1f       	adc	r24, r20
    64b6:	95 1f       	adc	r25, r21
    64b8:	a0 1d       	adc	r26, r0
    64ba:	08 95       	ret

000064bc <_exit>:
    64bc:	f8 94       	cli

000064be <__stop_program>:
    64be:	ff cf       	rjmp	.-2      	; 0x64be <__stop_program>
